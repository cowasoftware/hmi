cmake_minimum_required(VERSION 3.5)
project(three)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_definitions(-DSTB_IMAGE_IMPLEMENTATION)
add_definitions(-DGLM_ENABLE_EXPERIMENTAL)
# add_definitions(-DGLM_FORCE_RADIANS)
# add_definitions(-DGLM_FORCE_XYZW_ONLY)
# add_definitions(-DGLM_FORCE_QUAT_DATA_XYZW)

if(EXISTS "${PROJECT_SOURCE_DIR}/conanfile.txt")
    execute_process(
        COMMAND conan install ${PROJECT_SOURCE_DIR}
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    if(NOT EXISTS "${PROJECT_BINARY_DIR}/conanbuildinfo.cmake")
        message(FATAL "please check conanfile.txt")
    endif()
    include(${PROJECT_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup()
endif()

add_subdirectory(${PROJECT_SOURCE_DIR}/third/cppgl-1.0.0)
add_subdirectory(${PROJECT_SOURCE_DIR}/third/fmt-9.1.0)

file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/core/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/cameras/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/extras/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/geometries/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/lights/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/loaders/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/materials/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/math/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/objects/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/renderers/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/scenes/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/textures/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/utils/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/examples/controls/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/renderers/gl/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/renderers/shaders/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/renderers/shaders/shader_chunk/*.h")
file(GLOB PROJECT_HEADERS "${PROJECT_SOURCE_DIR}/src/renderers/shaders/shader_lib/*.h")

aux_source_directory(${PROJECT_SOURCE_DIR}/src/core PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/cameras PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/extras PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/geometries PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/lights PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/loaders PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/materials PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/math PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/objects PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/renderers PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/scenes PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/textures PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/utils PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/examples/controls PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/renderers/gl PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/renderers/shaders PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/renderers/shaders/shader_chunk PROJECT_SOURCES)
aux_source_directory(${PROJECT_SOURCE_DIR}/src/renderers/shaders/shader_lib PROJECT_SOURCES)

add_library(${PROJECT_NAME} ${PROJECT_SOURCES} ${PROJECT_HEADERS})

target_include_directories(${PROJECT_NAME} PUBLIC ${CONAN_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC ${CONAN_LIBS} fmt)

target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/inc)
target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/src)
target_link_libraries(${PROJECT_NAME} PUBLIC cppgl )