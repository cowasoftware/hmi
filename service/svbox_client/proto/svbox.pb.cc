// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svbox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "svbox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svbox {
class ImageFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageFrame> {
} _ImageFrame_default_instance_;

namespace protobuf_svbox_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, jpeg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, extra_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFrame, encode_),
  0,
  1,
  5,
  6,
  7,
  8,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(ImageFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageFrame_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "svbox.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ImageFrame_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  ImageFrame::_default_encode_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ImageFrame::_default_encode_.DefaultConstruct();
  *ImageFrame::_default_encode_.get_mutable() = ::std::string("H264", 4);
  _ImageFrame_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013svbox.proto\022\005svbox\"\256\001\n\nImageFrame\022\016\n\006h"
      "eader\030\001 \001(\014\022\020\n\004jpeg\030\002 \001(\014B\002\030\001\022\017\n\003pts\030\003 \001"
      "(\004B\002\030\001\022\017\n\003dts\030\004 \001(\004B\002\030\001\022\024\n\010duration\030\005 \001("
      "\004B\002\030\001\022\017\n\003key\030\006 \001(\010B\002\030\001\022\014\n\004data\030\007 \001(\014\022\021\n\005"
      "extra\030\010 \001(\014B\002\030\001\022\024\n\006encode\030\t \001(\t:\004H264"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "svbox.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_svbox_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ImageFrame::_default_encode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageFrame::kHeaderFieldNumber;
const int ImageFrame::kJpegFieldNumber;
const int ImageFrame::kPtsFieldNumber;
const int ImageFrame::kDtsFieldNumber;
const int ImageFrame::kDurationFieldNumber;
const int ImageFrame::kKeyFieldNumber;
const int ImageFrame::kDataFieldNumber;
const int ImageFrame::kExtraFieldNumber;
const int ImageFrame::kEncodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageFrame::ImageFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_svbox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svbox.ImageFrame)
}
ImageFrame::ImageFrame(const ImageFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  jpeg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_jpeg()) {
    jpeg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jpeg_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra()) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  encode_.UnsafeSetDefault(&ImageFrame::_default_encode_.get());
  if (from.has_encode()) {
    encode_.AssignWithDefault(&ImageFrame::_default_encode_.get(), from.encode_);
  }
  ::memcpy(&pts_, &from.pts_,
    reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&pts_) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:svbox.ImageFrame)
}

void ImageFrame::SharedCtor() {
  _cached_size_ = 0;
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jpeg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encode_.UnsafeSetDefault(&ImageFrame::_default_encode_.get());
  ::memset(&pts_, 0, reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&pts_) + sizeof(key_));
}

ImageFrame::~ImageFrame() {
  // @@protoc_insertion_point(destructor:svbox.ImageFrame)
  SharedDtor();
}

void ImageFrame::SharedDtor() {
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jpeg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encode_.DestroyNoArena(&ImageFrame::_default_encode_.get());
}

void ImageFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFrame::descriptor() {
  protobuf_svbox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_svbox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageFrame& ImageFrame::default_instance() {
  protobuf_svbox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageFrame* ImageFrame::New(::google::protobuf::Arena* arena) const {
  ImageFrame* n = new ImageFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:svbox.ImageFrame)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_header()) {
      GOOGLE_DCHECK(!header_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*header_.UnsafeRawStringPointer())->clear();
    }
    if (has_jpeg()) {
      GOOGLE_DCHECK(!jpeg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*jpeg_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_extra()) {
      GOOGLE_DCHECK(!extra_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extra_.UnsafeRawStringPointer())->clear();
    }
    if (has_encode()) {
      GOOGLE_DCHECK(!encode_.IsDefault(&ImageFrame::_default_encode_.get()));
      (*encode_.UnsafeRawStringPointer())->assign(*&ImageFrame::_default_encode_.get());
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&pts_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&pts_) + sizeof(duration_));
  }
  key_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svbox.ImageFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes jpeg = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jpeg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pts = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_pts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dts = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 duration = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool key = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes extra = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encode = 9 [default = "H264"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encode().data(), this->encode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "svbox.ImageFrame.encode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svbox.ImageFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svbox.ImageFrame)
  return false;
#undef DO_
}

void ImageFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svbox.ImageFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->header(), output);
  }

  // optional bytes jpeg = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->jpeg(), output);
  }

  // optional uint64 pts = 3 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pts(), output);
  }

  // optional uint64 dts = 4 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dts(), output);
  }

  // optional uint64 duration = 5 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->duration(), output);
  }

  // optional bool key = 6 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->key(), output);
  }

  // optional bytes data = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional bytes extra = 8 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->extra(), output);
  }

  // optional string encode = 9 [default = "H264"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encode().data(), this->encode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "svbox.ImageFrame.encode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->encode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svbox.ImageFrame)
}

::google::protobuf::uint8* ImageFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svbox.ImageFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes header = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->header(), target);
  }

  // optional bytes jpeg = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->jpeg(), target);
  }

  // optional uint64 pts = 3 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pts(), target);
  }

  // optional uint64 dts = 4 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dts(), target);
  }

  // optional uint64 duration = 5 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->duration(), target);
  }

  // optional bool key = 6 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->key(), target);
  }

  // optional bytes data = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional bytes extra = 8 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->extra(), target);
  }

  // optional string encode = 9 [default = "H264"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encode().data(), this->encode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "svbox.ImageFrame.encode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->encode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svbox.ImageFrame)
  return target;
}

size_t ImageFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svbox.ImageFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header());
    }

    // optional bytes jpeg = 2 [deprecated = true];
    if (has_jpeg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jpeg());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes extra = 8 [deprecated = true];
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra());
    }

    // optional string encode = 9 [default = "H264"];
    if (has_encode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encode());
    }

    // optional uint64 pts = 3 [deprecated = true];
    if (has_pts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pts());
    }

    // optional uint64 dts = 4 [deprecated = true];
    if (has_dts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dts());
    }

    // optional uint64 duration = 5 [deprecated = true];
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration());
    }

  }
  // optional bool key = 6 [deprecated = true];
  if (has_key()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svbox.ImageFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svbox.ImageFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svbox.ImageFrame)
    MergeFrom(*source);
  }
}

void ImageFrame::MergeFrom(const ImageFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svbox.ImageFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header();
      header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_jpeg();
      jpeg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jpeg_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_encode();
      encode_.AssignWithDefault(&ImageFrame::_default_encode_.get(), from.encode_);
    }
    if (cached_has_bits & 0x00000020u) {
      pts_ = from.pts_;
    }
    if (cached_has_bits & 0x00000040u) {
      dts_ = from.dts_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_key(from.key());
  }
}

void ImageFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svbox.ImageFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFrame::CopyFrom(const ImageFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svbox.ImageFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFrame::IsInitialized() const {
  return true;
}

void ImageFrame::Swap(ImageFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageFrame::InternalSwap(ImageFrame* other) {
  header_.Swap(&other->header_);
  jpeg_.Swap(&other->jpeg_);
  data_.Swap(&other->data_);
  extra_.Swap(&other->extra_);
  encode_.Swap(&other->encode_);
  std::swap(pts_, other->pts_);
  std::swap(dts_, other->dts_);
  std::swap(duration_, other->duration_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageFrame::GetMetadata() const {
  protobuf_svbox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_svbox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageFrame

// optional bytes header = 1;
bool ImageFrame::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageFrame::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageFrame::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageFrame::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
const ::std::string& ImageFrame::header() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.header)
  return header_.GetNoArena();
}
void ImageFrame::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.header)
}
#if LANG_CXX11
void ImageFrame::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.header)
}
#endif
void ImageFrame::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.header)
}
void ImageFrame::set_header(const void* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.header)
}
::std::string* ImageFrame::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageFrame::release_header() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.header)
  clear_has_header();
  return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageFrame::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.header)
}

// optional bytes jpeg = 2 [deprecated = true];
bool ImageFrame::has_jpeg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageFrame::set_has_jpeg() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageFrame::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageFrame::clear_jpeg() {
  jpeg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jpeg();
}
const ::std::string& ImageFrame::jpeg() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.jpeg)
  return jpeg_.GetNoArena();
}
void ImageFrame::set_jpeg(const ::std::string& value) {
  set_has_jpeg();
  jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.jpeg)
}
#if LANG_CXX11
void ImageFrame::set_jpeg(::std::string&& value) {
  set_has_jpeg();
  jpeg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.jpeg)
}
#endif
void ImageFrame::set_jpeg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jpeg();
  jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.jpeg)
}
void ImageFrame::set_jpeg(const void* value, size_t size) {
  set_has_jpeg();
  jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.jpeg)
}
::std::string* ImageFrame::mutable_jpeg() {
  set_has_jpeg();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.jpeg)
  return jpeg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageFrame::release_jpeg() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.jpeg)
  clear_has_jpeg();
  return jpeg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageFrame::set_allocated_jpeg(::std::string* jpeg) {
  if (jpeg != NULL) {
    set_has_jpeg();
  } else {
    clear_has_jpeg();
  }
  jpeg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jpeg);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.jpeg)
}

// optional uint64 pts = 3 [deprecated = true];
bool ImageFrame::has_pts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageFrame::set_has_pts() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageFrame::clear_has_pts() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageFrame::clear_pts() {
  pts_ = GOOGLE_ULONGLONG(0);
  clear_has_pts();
}
::google::protobuf::uint64 ImageFrame::pts() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.pts)
  return pts_;
}
void ImageFrame::set_pts(::google::protobuf::uint64 value) {
  set_has_pts();
  pts_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.pts)
}

// optional uint64 dts = 4 [deprecated = true];
bool ImageFrame::has_dts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageFrame::set_has_dts() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageFrame::clear_has_dts() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageFrame::clear_dts() {
  dts_ = GOOGLE_ULONGLONG(0);
  clear_has_dts();
}
::google::protobuf::uint64 ImageFrame::dts() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.dts)
  return dts_;
}
void ImageFrame::set_dts(::google::protobuf::uint64 value) {
  set_has_dts();
  dts_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.dts)
}

// optional uint64 duration = 5 [deprecated = true];
bool ImageFrame::has_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageFrame::set_has_duration() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageFrame::clear_has_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageFrame::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
::google::protobuf::uint64 ImageFrame::duration() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.duration)
  return duration_;
}
void ImageFrame::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.duration)
}

// optional bool key = 6 [deprecated = true];
bool ImageFrame::has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageFrame::set_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageFrame::clear_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageFrame::clear_key() {
  key_ = false;
  clear_has_key();
}
bool ImageFrame::key() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.key)
  return key_;
}
void ImageFrame::set_key(bool value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.key)
}

// optional bytes data = 7;
bool ImageFrame::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageFrame::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageFrame::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageFrame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& ImageFrame::data() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.data)
  return data_.GetNoArena();
}
void ImageFrame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.data)
}
#if LANG_CXX11
void ImageFrame::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.data)
}
#endif
void ImageFrame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.data)
}
void ImageFrame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.data)
}
::std::string* ImageFrame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageFrame::release_data() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageFrame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.data)
}

// optional bytes extra = 8 [deprecated = true];
bool ImageFrame::has_extra() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageFrame::set_has_extra() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageFrame::clear_has_extra() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageFrame::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& ImageFrame::extra() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.extra)
  return extra_.GetNoArena();
}
void ImageFrame::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.extra)
}
#if LANG_CXX11
void ImageFrame::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.extra)
}
#endif
void ImageFrame::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.extra)
}
void ImageFrame::set_extra(const void* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.extra)
}
::std::string* ImageFrame::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageFrame::release_extra() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageFrame::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.extra)
}

// optional string encode = 9 [default = "H264"];
bool ImageFrame::has_encode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageFrame::set_has_encode() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageFrame::clear_has_encode() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageFrame::clear_encode() {
  encode_.ClearToDefaultNoArena(&ImageFrame::_default_encode_.get());
  clear_has_encode();
}
const ::std::string& ImageFrame::encode() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.encode)
  return encode_.GetNoArena();
}
void ImageFrame::set_encode(const ::std::string& value) {
  set_has_encode();
  encode_.SetNoArena(&ImageFrame::_default_encode_.get(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.encode)
}
#if LANG_CXX11
void ImageFrame::set_encode(::std::string&& value) {
  set_has_encode();
  encode_.SetNoArena(
    &ImageFrame::_default_encode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.encode)
}
#endif
void ImageFrame::set_encode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encode();
  encode_.SetNoArena(&ImageFrame::_default_encode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.encode)
}
void ImageFrame::set_encode(const char* value, size_t size) {
  set_has_encode();
  encode_.SetNoArena(&ImageFrame::_default_encode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.encode)
}
::std::string* ImageFrame::mutable_encode() {
  set_has_encode();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.encode)
  return encode_.MutableNoArena(&ImageFrame::_default_encode_.get());
}
::std::string* ImageFrame::release_encode() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.encode)
  clear_has_encode();
  return encode_.ReleaseNoArena(&ImageFrame::_default_encode_.get());
}
void ImageFrame::set_allocated_encode(::std::string* encode) {
  if (encode != NULL) {
    set_has_encode();
  } else {
    clear_has_encode();
  }
  encode_.SetAllocatedNoArena(&ImageFrame::_default_encode_.get(), encode);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.encode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace svbox

// @@protoc_insertion_point(global_scope)
