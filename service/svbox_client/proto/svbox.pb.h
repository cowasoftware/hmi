// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svbox.proto

#ifndef PROTOBUF_svbox_2eproto__INCLUDED
#define PROTOBUF_svbox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace svbox {
class ImageFrame;
class ImageFrameDefaultTypeInternal;
extern ImageFrameDefaultTypeInternal _ImageFrame_default_instance_;
}  // namespace svbox

namespace svbox {

namespace protobuf_svbox_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_svbox_2eproto

// ===================================================================

class ImageFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svbox.ImageFrame) */ {
 public:
  ImageFrame();
  virtual ~ImageFrame();

  ImageFrame(const ImageFrame& from);

  inline ImageFrame& operator=(const ImageFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageFrame& default_instance();

  static inline const ImageFrame* internal_default_instance() {
    return reinterpret_cast<const ImageFrame*>(
               &_ImageFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImageFrame* other);

  // implements Message ----------------------------------------------

  inline ImageFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageFrame& from);
  void MergeFrom(const ImageFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::std::string& header() const;
  void set_header(const ::std::string& value);
  #if LANG_CXX11
  void set_header(::std::string&& value);
  #endif
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  ::std::string* mutable_header();
  ::std::string* release_header();
  void set_allocated_header(::std::string* header);

  // optional bytes jpeg = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_jpeg() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_jpeg();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kJpegFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& jpeg() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_jpeg(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_jpeg(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_jpeg(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_jpeg(const void* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_jpeg();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_jpeg();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_jpeg(::std::string* jpeg);

  // optional bytes data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes extra = 8 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_extra() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_extra();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kExtraFieldNumber = 8;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& extra() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_extra(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_extra(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_extra(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_extra(const void* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_extra();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_extra();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_extra(::std::string* extra);

  // optional string encode = 9 [default = "H264"];
  bool has_encode() const;
  void clear_encode();
  static const int kEncodeFieldNumber = 9;
  const ::std::string& encode() const;
  void set_encode(const ::std::string& value);
  #if LANG_CXX11
  void set_encode(::std::string&& value);
  #endif
  void set_encode(const char* value);
  void set_encode(const char* value, size_t size);
  ::std::string* mutable_encode();
  ::std::string* release_encode();
  void set_allocated_encode(::std::string* encode);

  // optional uint64 pts = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_pts() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_pts();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kPtsFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::uint64 pts() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_pts(::google::protobuf::uint64 value);

  // optional uint64 dts = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_dts() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_dts();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDtsFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::uint64 dts() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_dts(::google::protobuf::uint64 value);

  // optional uint64 duration = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_duration() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_duration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDurationFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::uint64 duration() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_duration(::google::protobuf::uint64 value);

  // optional bool key = 6 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_key() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_key();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kKeyFieldNumber = 6;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool key() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_key(bool value);

  // @@protoc_insertion_point(class_scope:svbox.ImageFrame)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_jpeg();
  void clear_has_jpeg();
  void set_has_pts();
  void clear_has_pts();
  void set_has_dts();
  void clear_has_dts();
  void set_has_duration();
  void clear_has_duration();
  void set_has_key();
  void clear_has_key();
  void set_has_data();
  void clear_has_data();
  void set_has_extra();
  void clear_has_extra();
  void set_has_encode();
  void clear_has_encode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_;
  ::google::protobuf::internal::ArenaStringPtr jpeg_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_encode_;
  ::google::protobuf::internal::ArenaStringPtr encode_;
  ::google::protobuf::uint64 pts_;
  ::google::protobuf::uint64 dts_;
  ::google::protobuf::uint64 duration_;
  bool key_;
  friend struct protobuf_svbox_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageFrame

// optional bytes header = 1;
inline bool ImageFrame::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageFrame::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageFrame::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageFrame::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
inline const ::std::string& ImageFrame::header() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.header)
  return header_.GetNoArena();
}
inline void ImageFrame::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.header)
}
#if LANG_CXX11
inline void ImageFrame::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.header)
}
#endif
inline void ImageFrame::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.header)
}
inline void ImageFrame::set_header(const void* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.header)
}
inline ::std::string* ImageFrame::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageFrame::release_header() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.header)
  clear_has_header();
  return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageFrame::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.header)
}

// optional bytes jpeg = 2 [deprecated = true];
inline bool ImageFrame::has_jpeg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageFrame::set_has_jpeg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageFrame::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageFrame::clear_jpeg() {
  jpeg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jpeg();
}
inline const ::std::string& ImageFrame::jpeg() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.jpeg)
  return jpeg_.GetNoArena();
}
inline void ImageFrame::set_jpeg(const ::std::string& value) {
  set_has_jpeg();
  jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.jpeg)
}
#if LANG_CXX11
inline void ImageFrame::set_jpeg(::std::string&& value) {
  set_has_jpeg();
  jpeg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.jpeg)
}
#endif
inline void ImageFrame::set_jpeg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jpeg();
  jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.jpeg)
}
inline void ImageFrame::set_jpeg(const void* value, size_t size) {
  set_has_jpeg();
  jpeg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.jpeg)
}
inline ::std::string* ImageFrame::mutable_jpeg() {
  set_has_jpeg();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.jpeg)
  return jpeg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageFrame::release_jpeg() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.jpeg)
  clear_has_jpeg();
  return jpeg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageFrame::set_allocated_jpeg(::std::string* jpeg) {
  if (jpeg != NULL) {
    set_has_jpeg();
  } else {
    clear_has_jpeg();
  }
  jpeg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jpeg);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.jpeg)
}

// optional uint64 pts = 3 [deprecated = true];
inline bool ImageFrame::has_pts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageFrame::set_has_pts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageFrame::clear_has_pts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageFrame::clear_pts() {
  pts_ = GOOGLE_ULONGLONG(0);
  clear_has_pts();
}
inline ::google::protobuf::uint64 ImageFrame::pts() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.pts)
  return pts_;
}
inline void ImageFrame::set_pts(::google::protobuf::uint64 value) {
  set_has_pts();
  pts_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.pts)
}

// optional uint64 dts = 4 [deprecated = true];
inline bool ImageFrame::has_dts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageFrame::set_has_dts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageFrame::clear_has_dts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageFrame::clear_dts() {
  dts_ = GOOGLE_ULONGLONG(0);
  clear_has_dts();
}
inline ::google::protobuf::uint64 ImageFrame::dts() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.dts)
  return dts_;
}
inline void ImageFrame::set_dts(::google::protobuf::uint64 value) {
  set_has_dts();
  dts_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.dts)
}

// optional uint64 duration = 5 [deprecated = true];
inline bool ImageFrame::has_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageFrame::set_has_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageFrame::clear_has_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageFrame::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::uint64 ImageFrame::duration() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.duration)
  return duration_;
}
inline void ImageFrame::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.duration)
}

// optional bool key = 6 [deprecated = true];
inline bool ImageFrame::has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageFrame::set_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageFrame::clear_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageFrame::clear_key() {
  key_ = false;
  clear_has_key();
}
inline bool ImageFrame::key() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.key)
  return key_;
}
inline void ImageFrame::set_key(bool value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.key)
}

// optional bytes data = 7;
inline bool ImageFrame::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageFrame::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageFrame::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageFrame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ImageFrame::data() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.data)
  return data_.GetNoArena();
}
inline void ImageFrame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.data)
}
#if LANG_CXX11
inline void ImageFrame::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.data)
}
#endif
inline void ImageFrame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.data)
}
inline void ImageFrame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.data)
}
inline ::std::string* ImageFrame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageFrame::release_data() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageFrame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.data)
}

// optional bytes extra = 8 [deprecated = true];
inline bool ImageFrame::has_extra() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageFrame::set_has_extra() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageFrame::clear_has_extra() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageFrame::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
inline const ::std::string& ImageFrame::extra() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.extra)
  return extra_.GetNoArena();
}
inline void ImageFrame::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.extra)
}
#if LANG_CXX11
inline void ImageFrame::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.extra)
}
#endif
inline void ImageFrame::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.extra)
}
inline void ImageFrame::set_extra(const void* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.extra)
}
inline ::std::string* ImageFrame::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageFrame::release_extra() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageFrame::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.extra)
}

// optional string encode = 9 [default = "H264"];
inline bool ImageFrame::has_encode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageFrame::set_has_encode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageFrame::clear_has_encode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageFrame::clear_encode() {
  encode_.ClearToDefaultNoArena(&ImageFrame::_default_encode_.get());
  clear_has_encode();
}
inline const ::std::string& ImageFrame::encode() const {
  // @@protoc_insertion_point(field_get:svbox.ImageFrame.encode)
  return encode_.GetNoArena();
}
inline void ImageFrame::set_encode(const ::std::string& value) {
  set_has_encode();
  encode_.SetNoArena(&ImageFrame::_default_encode_.get(), value);
  // @@protoc_insertion_point(field_set:svbox.ImageFrame.encode)
}
#if LANG_CXX11
inline void ImageFrame::set_encode(::std::string&& value) {
  set_has_encode();
  encode_.SetNoArena(
    &ImageFrame::_default_encode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svbox.ImageFrame.encode)
}
#endif
inline void ImageFrame::set_encode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encode();
  encode_.SetNoArena(&ImageFrame::_default_encode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svbox.ImageFrame.encode)
}
inline void ImageFrame::set_encode(const char* value, size_t size) {
  set_has_encode();
  encode_.SetNoArena(&ImageFrame::_default_encode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svbox.ImageFrame.encode)
}
inline ::std::string* ImageFrame::mutable_encode() {
  set_has_encode();
  // @@protoc_insertion_point(field_mutable:svbox.ImageFrame.encode)
  return encode_.MutableNoArena(&ImageFrame::_default_encode_.get());
}
inline ::std::string* ImageFrame::release_encode() {
  // @@protoc_insertion_point(field_release:svbox.ImageFrame.encode)
  clear_has_encode();
  return encode_.ReleaseNoArena(&ImageFrame::_default_encode_.get());
}
inline void ImageFrame::set_allocated_encode(::std::string* encode) {
  if (encode != NULL) {
    set_has_encode();
  } else {
    clear_has_encode();
  }
  encode_.SetAllocatedNoArena(&ImageFrame::_default_encode_.get(), encode);
  // @@protoc_insertion_point(field_set_allocated:svbox.ImageFrame.encode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace svbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_svbox_2eproto__INCLUDED
