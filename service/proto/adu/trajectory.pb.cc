// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace COWA {
namespace NavMsg {
class TrajectoryPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPoint> {
} _TrajectoryPoint_default_instance_;
class TrajectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Trajectory> {
} _Trajectory_default_instance_;

namespace protobuf_trajectory_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, dkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, ddkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, da_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, relative_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, left_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, right_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, lane_hash_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, latency_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, sequence_),
  0,
  ~0u,
  ~0u,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 20, sizeof(TrajectoryPoint)},
  { 35, 45, sizeof(Trajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trajectory.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TrajectoryPoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Trajectory_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TrajectoryPoint_default_instance_.DefaultConstruct();
  _Trajectory_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020trajectory.proto\022\013COWA.NavMsg\"\367\001\n\017Traj"
      "ectoryPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003"
      " \001(\001\022\r\n\005theta\030\004 \001(\002\022\r\n\005kappa\030\005 \001(\002\022\016\n\006dk"
      "appa\030\006 \001(\002\022\017\n\007ddkappa\030\007 \001(\002\022\t\n\001s\030\010 \001(\002\022\t"
      "\n\001v\030\t \001(\002\022\t\n\001a\030\n \001(\002\022\n\n\002da\030\013 \001(\002\022\025\n\rrela"
      "tive_time\030\014 \001(\002\022\025\n\rleft_distance\030\r \001(\002\022\026"
      "\n\016right_distance\030\016 \001(\002\022\021\n\tlane_hash\030\017 \001("
      "\r\"\234\006\n\nTrajectory\022\021\n\ttimestamp\030\001 \001(\004\022.\n\006a"
      "ction\030\002 \003(\0162\036.COWA.NavMsg.Trajectory.Act"
      "ion\022,\n\006points\030\003 \003(\0132\034.COWA.NavMsg.Trajec"
      "toryPoint\022\022\n\nlatency_ms\030\005 \001(\005\022\020\n\010sequenc"
      "e\030\006 \001(\r\"\366\004\n\006Action\022\010\n\004NONE\020\000\022\r\n\tTURN_LEF"
      "T\020\001\022\016\n\nTURN_RIGHT\020\002\022\024\n\020CHANGE_LANE_LEFT\020"
      "\003\022\025\n\021CHANGE_LANE_RIGHT\020\004\022\n\n\006U_TURN\020\005\022\020\n\014"
      "STOP_BLOCKED\020\n\022\033\n\027STOP_BLOCKED_PEDESTRIA"
      "N\020\013\022\030\n\024STOP_BLOCKED_VEHICLE\020\014\022!\n\035STOP_BL"
      "OCKED_NO_MOTOR_VEHICLE\020\r\022\030\n\024STOP_BLOCKED"
      "_UNKNOWN\020\016\022\022\n\016STOP_EMERGENCY\020\017\022\024\n\020STOP_T"
      "RFFICLIGHT\020\020\022\r\n\tSTOP_WAIT\020\021\022\r\n\tPULL_OVER"
      "\020\022\022\013\n\007PARKING\020\023\022\013\n\007STANDBY\020\024\022\016\n\nMOVE_STA"
      "RT\020\025\022\023\n\017MOVE_ACCELERATE\020\026\022\023\n\017MOVE_DECELE"
      "RATE\020\027\022\021\n\rOVERTACK_LEFT\020\037\022\022\n\016OVERTACK_RI"
      "GHT\020 \022\016\n\nAVOID_LEFT\020!\022\017\n\013AVOID_RIGHT\020\"\022\n"
      "\n\006MANUAL\020)\022\016\n\nAUTO_DRIVE\020*\022\014\n\010SWEEP_ON\020,"
      "\022\r\n\tVACUUM_ON\020-\022\014\n\010SPRAY_ON\020.\022\r\n\tLOOK_LE"
      "FT\020e\022\016\n\nLOOK_RIGHT\020f\022\022\n\016LOOK_BACK_LEFT\020g"
      "\022\023\n\017LOOK_BACK_RIGHT\020h\022\021\n\rLOOK_BACKWARD\020i"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1080);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trajectory.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_trajectory_2eproto

const ::google::protobuf::EnumDescriptor* Trajectory_Action_descriptor() {
  protobuf_trajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trajectory_2eproto::file_level_enum_descriptors[0];
}
bool Trajectory_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 31:
    case 32:
    case 33:
    case 34:
    case 41:
    case 42:
    case 44:
    case 45:
    case 46:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Trajectory_Action Trajectory::NONE;
const Trajectory_Action Trajectory::TURN_LEFT;
const Trajectory_Action Trajectory::TURN_RIGHT;
const Trajectory_Action Trajectory::CHANGE_LANE_LEFT;
const Trajectory_Action Trajectory::CHANGE_LANE_RIGHT;
const Trajectory_Action Trajectory::U_TURN;
const Trajectory_Action Trajectory::STOP_BLOCKED;
const Trajectory_Action Trajectory::STOP_BLOCKED_PEDESTRIAN;
const Trajectory_Action Trajectory::STOP_BLOCKED_VEHICLE;
const Trajectory_Action Trajectory::STOP_BLOCKED_NO_MOTOR_VEHICLE;
const Trajectory_Action Trajectory::STOP_BLOCKED_UNKNOWN;
const Trajectory_Action Trajectory::STOP_EMERGENCY;
const Trajectory_Action Trajectory::STOP_TRFFICLIGHT;
const Trajectory_Action Trajectory::STOP_WAIT;
const Trajectory_Action Trajectory::PULL_OVER;
const Trajectory_Action Trajectory::PARKING;
const Trajectory_Action Trajectory::STANDBY;
const Trajectory_Action Trajectory::MOVE_START;
const Trajectory_Action Trajectory::MOVE_ACCELERATE;
const Trajectory_Action Trajectory::MOVE_DECELERATE;
const Trajectory_Action Trajectory::OVERTACK_LEFT;
const Trajectory_Action Trajectory::OVERTACK_RIGHT;
const Trajectory_Action Trajectory::AVOID_LEFT;
const Trajectory_Action Trajectory::AVOID_RIGHT;
const Trajectory_Action Trajectory::MANUAL;
const Trajectory_Action Trajectory::AUTO_DRIVE;
const Trajectory_Action Trajectory::SWEEP_ON;
const Trajectory_Action Trajectory::VACUUM_ON;
const Trajectory_Action Trajectory::SPRAY_ON;
const Trajectory_Action Trajectory::LOOK_LEFT;
const Trajectory_Action Trajectory::LOOK_RIGHT;
const Trajectory_Action Trajectory::LOOK_BACK_LEFT;
const Trajectory_Action Trajectory::LOOK_BACK_RIGHT;
const Trajectory_Action Trajectory::LOOK_BACKWARD;
const Trajectory_Action Trajectory::Action_MIN;
const Trajectory_Action Trajectory::Action_MAX;
const int Trajectory::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPoint::kXFieldNumber;
const int TrajectoryPoint::kYFieldNumber;
const int TrajectoryPoint::kZFieldNumber;
const int TrajectoryPoint::kThetaFieldNumber;
const int TrajectoryPoint::kKappaFieldNumber;
const int TrajectoryPoint::kDkappaFieldNumber;
const int TrajectoryPoint::kDdkappaFieldNumber;
const int TrajectoryPoint::kSFieldNumber;
const int TrajectoryPoint::kVFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kDaFieldNumber;
const int TrajectoryPoint::kRelativeTimeFieldNumber;
const int TrajectoryPoint::kLeftDistanceFieldNumber;
const int TrajectoryPoint::kRightDistanceFieldNumber;
const int TrajectoryPoint::kLaneHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trajectory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&lane_hash_) -
    reinterpret_cast<char*>(&x_) + sizeof(lane_hash_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&lane_hash_) -
    reinterpret_cast<char*>(&x_) + sizeof(lane_hash_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  protobuf_trajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trajectory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  protobuf_trajectory_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryPoint* TrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  TrajectoryPoint* n = new TrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.TrajectoryPoint)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_) + sizeof(s_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&v_, 0, reinterpret_cast<char*>(&lane_hash_) -
      reinterpret_cast<char*>(&v_) + sizeof(lane_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kappa = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dkappa = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_dkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ddkappa = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_ddkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ddkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float s = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float a = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float da = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_da();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float relative_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_relative_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float left_distance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_left_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float right_distance = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_right_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_hash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_lane_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional float theta = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->theta(), output);
  }

  // optional float kappa = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->kappa(), output);
  }

  // optional float dkappa = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dkappa(), output);
  }

  // optional float ddkappa = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ddkappa(), output);
  }

  // optional float s = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->s(), output);
  }

  // optional float v = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->v(), output);
  }

  // optional float a = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->a(), output);
  }

  // optional float da = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->da(), output);
  }

  // optional float relative_time = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->relative_time(), output);
  }

  // optional float left_distance = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->left_distance(), output);
  }

  // optional float right_distance = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->right_distance(), output);
  }

  // optional uint32 lane_hash = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->lane_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional float theta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->theta(), target);
  }

  // optional float kappa = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->kappa(), target);
  }

  // optional float dkappa = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dkappa(), target);
  }

  // optional float ddkappa = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ddkappa(), target);
  }

  // optional float s = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->s(), target);
  }

  // optional float v = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->v(), target);
  }

  // optional float a = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->a(), target);
  }

  // optional float da = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->da(), target);
  }

  // optional float relative_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->relative_time(), target);
  }

  // optional float left_distance = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->left_distance(), target);
  }

  // optional float right_distance = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->right_distance(), target);
  }

  // optional uint32 lane_hash = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->lane_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.TrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional float theta = 4;
    if (has_theta()) {
      total_size += 1 + 4;
    }

    // optional float kappa = 5;
    if (has_kappa()) {
      total_size += 1 + 4;
    }

    // optional float dkappa = 6;
    if (has_dkappa()) {
      total_size += 1 + 4;
    }

    // optional float ddkappa = 7;
    if (has_ddkappa()) {
      total_size += 1 + 4;
    }

    // optional float s = 8;
    if (has_s()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional float v = 9;
    if (has_v()) {
      total_size += 1 + 4;
    }

    // optional float a = 10;
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float da = 11;
    if (has_da()) {
      total_size += 1 + 4;
    }

    // optional float relative_time = 12;
    if (has_relative_time()) {
      total_size += 1 + 4;
    }

    // optional float left_distance = 13;
    if (has_left_distance()) {
      total_size += 1 + 4;
    }

    // optional float right_distance = 14;
    if (has_right_distance()) {
      total_size += 1 + 4;
    }

    // optional uint32 lane_hash = 15;
    if (has_lane_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_hash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.TrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000010u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000020u) {
      dkappa_ = from.dkappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      ddkappa_ = from.ddkappa_;
    }
    if (cached_has_bits & 0x00000080u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000200u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000400u) {
      da_ = from.da_;
    }
    if (cached_has_bits & 0x00000800u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      left_distance_ = from.left_distance_;
    }
    if (cached_has_bits & 0x00002000u) {
      right_distance_ = from.right_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      lane_hash_ = from.lane_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(theta_, other->theta_);
  std::swap(kappa_, other->kappa_);
  std::swap(dkappa_, other->dkappa_);
  std::swap(ddkappa_, other->ddkappa_);
  std::swap(s_, other->s_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(da_, other->da_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(left_distance_, other->left_distance_);
  std::swap(right_distance_, other->right_distance_);
  std::swap(lane_hash_, other->lane_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_trajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trajectory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPoint

// optional double x = 1;
bool TrajectoryPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
double TrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.x)
  return x_;
}
void TrajectoryPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.x)
}

// optional double y = 2;
bool TrajectoryPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
double TrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.y)
  return y_;
}
void TrajectoryPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.y)
}

// optional double z = 3;
bool TrajectoryPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
double TrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.z)
  return z_;
}
void TrajectoryPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.z)
}

// optional float theta = 4;
bool TrajectoryPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrajectoryPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void TrajectoryPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrajectoryPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
float TrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.theta)
  return theta_;
}
void TrajectoryPoint::set_theta(float value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.theta)
}

// optional float kappa = 5;
bool TrajectoryPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrajectoryPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
void TrajectoryPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrajectoryPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
float TrajectoryPoint::kappa() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.kappa)
  return kappa_;
}
void TrajectoryPoint::set_kappa(float value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.kappa)
}

// optional float dkappa = 6;
bool TrajectoryPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrajectoryPoint::set_has_dkappa() {
  _has_bits_[0] |= 0x00000020u;
}
void TrajectoryPoint::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrajectoryPoint::clear_dkappa() {
  dkappa_ = 0;
  clear_has_dkappa();
}
float TrajectoryPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.dkappa)
  return dkappa_;
}
void TrajectoryPoint::set_dkappa(float value) {
  set_has_dkappa();
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.dkappa)
}

// optional float ddkappa = 7;
bool TrajectoryPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrajectoryPoint::set_has_ddkappa() {
  _has_bits_[0] |= 0x00000040u;
}
void TrajectoryPoint::clear_has_ddkappa() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrajectoryPoint::clear_ddkappa() {
  ddkappa_ = 0;
  clear_has_ddkappa();
}
float TrajectoryPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.ddkappa)
  return ddkappa_;
}
void TrajectoryPoint::set_ddkappa(float value) {
  set_has_ddkappa();
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.ddkappa)
}

// optional float s = 8;
bool TrajectoryPoint::has_s() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrajectoryPoint::set_has_s() {
  _has_bits_[0] |= 0x00000080u;
}
void TrajectoryPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrajectoryPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
float TrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.s)
  return s_;
}
void TrajectoryPoint::set_s(float value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.s)
}

// optional float v = 9;
bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrajectoryPoint::set_has_v() {
  _has_bits_[0] |= 0x00000100u;
}
void TrajectoryPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrajectoryPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
float TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.v)
  return v_;
}
void TrajectoryPoint::set_v(float value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.v)
}

// optional float a = 10;
bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrajectoryPoint::set_has_a() {
  _has_bits_[0] |= 0x00000200u;
}
void TrajectoryPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrajectoryPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
float TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.a)
  return a_;
}
void TrajectoryPoint::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.a)
}

// optional float da = 11;
bool TrajectoryPoint::has_da() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrajectoryPoint::set_has_da() {
  _has_bits_[0] |= 0x00000400u;
}
void TrajectoryPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrajectoryPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
float TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.da)
  return da_;
}
void TrajectoryPoint::set_da(float value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.da)
}

// optional float relative_time = 12;
bool TrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000800u;
}
void TrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
float TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.relative_time)
  return relative_time_;
}
void TrajectoryPoint::set_relative_time(float value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.relative_time)
}

// optional float left_distance = 13;
bool TrajectoryPoint::has_left_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TrajectoryPoint::set_has_left_distance() {
  _has_bits_[0] |= 0x00001000u;
}
void TrajectoryPoint::clear_has_left_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
void TrajectoryPoint::clear_left_distance() {
  left_distance_ = 0;
  clear_has_left_distance();
}
float TrajectoryPoint::left_distance() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.left_distance)
  return left_distance_;
}
void TrajectoryPoint::set_left_distance(float value) {
  set_has_left_distance();
  left_distance_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.left_distance)
}

// optional float right_distance = 14;
bool TrajectoryPoint::has_right_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TrajectoryPoint::set_has_right_distance() {
  _has_bits_[0] |= 0x00002000u;
}
void TrajectoryPoint::clear_has_right_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
void TrajectoryPoint::clear_right_distance() {
  right_distance_ = 0;
  clear_has_right_distance();
}
float TrajectoryPoint::right_distance() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.right_distance)
  return right_distance_;
}
void TrajectoryPoint::set_right_distance(float value) {
  set_has_right_distance();
  right_distance_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.right_distance)
}

// optional uint32 lane_hash = 15;
bool TrajectoryPoint::has_lane_hash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TrajectoryPoint::set_has_lane_hash() {
  _has_bits_[0] |= 0x00004000u;
}
void TrajectoryPoint::clear_has_lane_hash() {
  _has_bits_[0] &= ~0x00004000u;
}
void TrajectoryPoint::clear_lane_hash() {
  lane_hash_ = 0u;
  clear_has_lane_hash();
}
::google::protobuf::uint32 TrajectoryPoint::lane_hash() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.lane_hash)
  return lane_hash_;
}
void TrajectoryPoint::set_lane_hash(::google::protobuf::uint32 value) {
  set_has_lane_hash();
  lane_hash_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.lane_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kTimestampFieldNumber;
const int Trajectory::kActionFieldNumber;
const int Trajectory::kPointsFieldNumber;
const int Trajectory::kLatencyMsFieldNumber;
const int Trajectory::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trajectory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      action_(from.action_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(sequence_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_trajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trajectory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  protobuf_trajectory_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.Trajectory)
  action_.Clear();
  points_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.Trajectory.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::Trajectory_Action_IsValid(value)) {
            add_action(static_cast< ::COWA::NavMsg::Trajectory_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::COWA::NavMsg::Trajectory_Action_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_action())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.TrajectoryPoint points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_latency_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // repeated .COWA.NavMsg.Trajectory.Action action = 2;
  for (int i = 0, n = this->action_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(i), output);
  }

  // repeated .COWA.NavMsg.TrajectoryPoint points = 3;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  // optional int32 latency_ms = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->latency_ms(), output);
  }

  // optional uint32 sequence = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .COWA.NavMsg.Trajectory.Action action = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->action_, target);

  // repeated .COWA.NavMsg.TrajectoryPoint points = 3;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->points(i), deterministic, target);
  }

  // optional int32 latency_ms = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->latency_ms(), target);
  }

  // optional uint32 sequence = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.Trajectory.Action action = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->action_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->action(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .COWA.NavMsg.TrajectoryPoint points = 3;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int32 latency_ms = 5;
    if (has_latency_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional uint32 sequence = 6;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_.MergeFrom(from.action_);
  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  action_.InternalSwap(&other->action_);
  points_.InternalSwap(&other->points_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(latency_ms_, other->latency_ms_);
  std::swap(sequence_, other->sequence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_trajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trajectory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional uint64 timestamp = 1;
bool Trajectory::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trajectory::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Trajectory::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Trajectory::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.timestamp)
  return timestamp_;
}
void Trajectory::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.timestamp)
}

// repeated .COWA.NavMsg.Trajectory.Action action = 2;
int Trajectory::action_size() const {
  return action_.size();
}
void Trajectory::clear_action() {
  action_.Clear();
}
::COWA::NavMsg::Trajectory_Action Trajectory::action(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.action)
  return static_cast< ::COWA::NavMsg::Trajectory_Action >(action_.Get(index));
}
void Trajectory::set_action(int index, ::COWA::NavMsg::Trajectory_Action value) {
  assert(::COWA::NavMsg::Trajectory_Action_IsValid(value));
  action_.Set(index, value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.action)
}
void Trajectory::add_action(::COWA::NavMsg::Trajectory_Action value) {
  assert(::COWA::NavMsg::Trajectory_Action_IsValid(value));
  action_.Add(value);
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Trajectory.action)
}
const ::google::protobuf::RepeatedField<int>&
Trajectory::action() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Trajectory.action)
  return action_;
}
::google::protobuf::RepeatedField<int>*
Trajectory::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Trajectory.action)
  return &action_;
}

// repeated .COWA.NavMsg.TrajectoryPoint points = 3;
int Trajectory::points_size() const {
  return points_.size();
}
void Trajectory::clear_points() {
  points_.Clear();
}
const ::COWA::NavMsg::TrajectoryPoint& Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.points)
  return points_.Get(index);
}
::COWA::NavMsg::TrajectoryPoint* Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Trajectory.points)
  return points_.Mutable(index);
}
::COWA::NavMsg::TrajectoryPoint* Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Trajectory.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >*
Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Trajectory.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >&
Trajectory::points() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Trajectory.points)
  return points_;
}

// optional int32 latency_ms = 5;
bool Trajectory::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Trajectory::set_has_latency_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void Trajectory::clear_has_latency_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void Trajectory::clear_latency_ms() {
  latency_ms_ = 0;
  clear_has_latency_ms();
}
::google::protobuf::int32 Trajectory::latency_ms() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.latency_ms)
  return latency_ms_;
}
void Trajectory::set_latency_ms(::google::protobuf::int32 value) {
  set_has_latency_ms();
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.latency_ms)
}

// optional uint32 sequence = 6;
bool Trajectory::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Trajectory::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
void Trajectory::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void Trajectory::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 Trajectory::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.sequence)
  return sequence_;
}
void Trajectory::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NavMsg
}  // namespace COWA

// @@protoc_insertion_point(global_scope)
