// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace COWA {
namespace NavMsg {
class Obstacle_ObstacleTrajectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Obstacle_ObstacleTrajectory> {
} _Obstacle_ObstacleTrajectory_default_instance_;
class ObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Obstacle> {
} _Obstacle_default_instance_;
class ObstaclesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Obstacles> {
} _Obstacles_default_instance_;

namespace protobuf_obstacle_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle_ObstacleTrajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle_ObstacleTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle_ObstacleTrajectory, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle_ObstacleTrajectory, point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, theta_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, pose_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, velocity_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, size_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, bounding_contours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, bounding_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, trajectory_),
  4,
  3,
  5,
  14,
  15,
  0,
  16,
  1,
  17,
  6,
  7,
  8,
  18,
  9,
  13,
  ~0u,
  19,
  10,
  2,
  11,
  12,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, latency_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, debug_),
  0,
  2,
  3,
  ~0u,
  4,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Obstacle_ObstacleTrajectory)},
  { 9, 36, sizeof(Obstacle)},
  { 58, 69, sizeof(Obstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Obstacle_ObstacleTrajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Obstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Obstacles_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Obstacle_ObstacleTrajectory_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Obstacle_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Obstacles_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::COWA::NavMsg::protobuf_pose_2eproto::InitDefaults();
  ::COWA::NavMsg::protobuf_trajectory_2eproto::InitDefaults();
  _Obstacle_ObstacleTrajectory_default_instance_.DefaultConstruct();
  _Obstacle_default_instance_.DefaultConstruct();
  _Obstacles_default_instance_.DefaultConstruct();
  _Obstacle_default_instance_.get_mutable()->pose_ = const_cast< ::COWA::NavMsg::Pose*>(
      ::COWA::NavMsg::Pose::internal_default_instance());
  _Obstacle_default_instance_.get_mutable()->velocity_ = const_cast< ::COWA::NavMsg::Velocity*>(
      ::COWA::NavMsg::Velocity::internal_default_instance());
  _Obstacle_default_instance_.get_mutable()->acceleration_ = const_cast< ::COWA::NavMsg::Velocity*>(
      ::COWA::NavMsg::Velocity::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016obstacle.proto\022\013COWA.NavMsg\032\npose.prot"
      "o\032\020trajectory.proto\"\323\t\n\010Obstacle\022\n\n\002id\030\001"
      " \001(\005\022\021\n\ttimestamp\030\002 \001(\004\022(\n\004type\030\003 \001(\0162\032."
      "COWA.NavMsg.Obstacle.Type\022\r\n\005theta\030\025 \001(\002"
      "\022\030\n\020theta_confidence\030\026 \001(\002\022\037\n\004pose\030\005 \001(\013"
      "2\021.COWA.NavMsg.Pose\022\027\n\017pose_confidence\030\027"
      " \001(\002\022\'\n\010velocity\030\006 \001(\0132\025.COWA.NavMsg.Vel"
      "ocity\022\033\n\023velocity_confidence\030\030 \001(\002\022\016\n\006le"
      "ngth\030\007 \001(\002\022\r\n\005width\030\010 \001(\002\022\016\n\006height\030\t \001("
      "\002\022\027\n\017size_confidence\030\031 \001(\002\022\021\n\tis_static\030"
      "\n \001(\010\022\020\n\010track_id\030\020 \001(\005\022/\n\021bounding_cont"
      "ours\030\013 \003(\0132\024.COWA.NavMsg.Point3D\022\033\n\023boun"
      "ding_confidence\030\032 \001(\002\022\022\n\nconfidence\030\014 \001("
      "\002\022+\n\014acceleration\030\r \001(\0132\025.COWA.NavMsg.Ve"
      "locity\0220\n\006signal\030\016 \001(\0162 .COWA.NavMsg.Obs"
      "tacle.SignalLamp\022.\n\005brake\030\017 \001(\0162\037.COWA.N"
      "avMsg.Obstacle.BrakeLamp\022<\n\ntrajectory\030\024"
      " \003(\0132(.COWA.NavMsg.Obstacle.ObstacleTraj"
      "ectory\032U\n\022ObstacleTrajectory\022\022\n\nconfiden"
      "ce\030\001 \001(\002\022+\n\005point\030\002 \003(\0132\034.COWA.NavMsg.Tr"
      "ajectoryPoint\"\260\002\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017U"
      "NKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022"
      "\007\n\003CAR\020\003\022\007\n\003BUS\020\004\022\t\n\005TRUCK\020\005\022\013\n\007SPECIAL\020"
      "\006\022\013\n\007CYCLIST\020\n\022\014\n\010TRICYCLE\020\013\022\020\n\014MOTORCYC"
      "LIST\020\014\022\016\n\nPEDESTRIAN\020\024\022\016\n\nWHEELCHAIR\020\025\022\013"
      "\n\007BABYCAR\020\026\022\r\n\tROADBLOCK\020\036\022\016\n\nTREE_TRUNK"
      "\020\037\022\010\n\004POLE\020 \022\t\n\005PILES\020!\022\013\n\007DUSTBIN\020#\022\t\n\005"
      "BLOCK\020$\022\r\n\tCURB_LINE\020%\022\020\n\014TRAFFICLIGHT\020("
      "\"r\n\nSignalLamp\022\020\n\014INDICATE_OFF\020\000\022\021\n\rINDI"
      "CATE_LEFT\020\001\022\022\n\016INDICATE_RIGHT\020\002\022\025\n\021EMERG"
      "ENCY_FLASHER\020\003\022\024\n\020INDICATE_UNKNOWN\020\t\";\n\t"
      "BrakeLamp\022\r\n\tBRAKE_OFF\020\000\022\014\n\010BRAKE_ON\020\001\022\021"
      "\n\rBRAKE_UNKNOWN\020\t\"\217\001\n\tObstacles\022\020\n\010frame"
      "_id\030\001 \001(\014\022\021\n\ttimestamp\030\002 \001(\004\022\020\n\010sequence"
      "\030\003 \001(\r\022(\n\tobstacles\030\004 \003(\0132\025.COWA.NavMsg."
      "Obstacle\022\022\n\nlatency_ms\030\005 \001(\005\022\r\n\005debug\030\006 "
      "\001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "obstacle.proto", &protobuf_RegisterTypes);
  ::COWA::NavMsg::protobuf_pose_2eproto::AddDescriptors();
  ::COWA::NavMsg::protobuf_trajectory_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_obstacle_2eproto

const ::google::protobuf::EnumDescriptor* Obstacle_Type_descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_enum_descriptors[0];
}
bool Obstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 40:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Obstacle_Type Obstacle::UNKNOWN;
const Obstacle_Type Obstacle::UNKNOWN_MOVABLE;
const Obstacle_Type Obstacle::UNKNOWN_UNMOVABLE;
const Obstacle_Type Obstacle::CAR;
const Obstacle_Type Obstacle::BUS;
const Obstacle_Type Obstacle::TRUCK;
const Obstacle_Type Obstacle::SPECIAL;
const Obstacle_Type Obstacle::CYCLIST;
const Obstacle_Type Obstacle::TRICYCLE;
const Obstacle_Type Obstacle::MOTORCYCLIST;
const Obstacle_Type Obstacle::PEDESTRIAN;
const Obstacle_Type Obstacle::WHEELCHAIR;
const Obstacle_Type Obstacle::BABYCAR;
const Obstacle_Type Obstacle::ROADBLOCK;
const Obstacle_Type Obstacle::TREE_TRUNK;
const Obstacle_Type Obstacle::POLE;
const Obstacle_Type Obstacle::PILES;
const Obstacle_Type Obstacle::DUSTBIN;
const Obstacle_Type Obstacle::BLOCK;
const Obstacle_Type Obstacle::CURB_LINE;
const Obstacle_Type Obstacle::TRAFFICLIGHT;
const Obstacle_Type Obstacle::Type_MIN;
const Obstacle_Type Obstacle::Type_MAX;
const int Obstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Obstacle_SignalLamp_descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_enum_descriptors[1];
}
bool Obstacle_SignalLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Obstacle_SignalLamp Obstacle::INDICATE_OFF;
const Obstacle_SignalLamp Obstacle::INDICATE_LEFT;
const Obstacle_SignalLamp Obstacle::INDICATE_RIGHT;
const Obstacle_SignalLamp Obstacle::EMERGENCY_FLASHER;
const Obstacle_SignalLamp Obstacle::INDICATE_UNKNOWN;
const Obstacle_SignalLamp Obstacle::SignalLamp_MIN;
const Obstacle_SignalLamp Obstacle::SignalLamp_MAX;
const int Obstacle::SignalLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Obstacle_BrakeLamp_descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_enum_descriptors[2];
}
bool Obstacle_BrakeLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Obstacle_BrakeLamp Obstacle::BRAKE_OFF;
const Obstacle_BrakeLamp Obstacle::BRAKE_ON;
const Obstacle_BrakeLamp Obstacle::BRAKE_UNKNOWN;
const Obstacle_BrakeLamp Obstacle::BrakeLamp_MIN;
const Obstacle_BrakeLamp Obstacle::BrakeLamp_MAX;
const int Obstacle::BrakeLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle_ObstacleTrajectory::kConfidenceFieldNumber;
const int Obstacle_ObstacleTrajectory::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle_ObstacleTrajectory::Obstacle_ObstacleTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.Obstacle.ObstacleTrajectory)
}
Obstacle_ObstacleTrajectory::Obstacle_ObstacleTrajectory(const Obstacle_ObstacleTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.Obstacle.ObstacleTrajectory)
}

void Obstacle_ObstacleTrajectory::SharedCtor() {
  _cached_size_ = 0;
  confidence_ = 0;
}

Obstacle_ObstacleTrajectory::~Obstacle_ObstacleTrajectory() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  SharedDtor();
}

void Obstacle_ObstacleTrajectory::SharedDtor() {
}

void Obstacle_ObstacleTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle_ObstacleTrajectory::descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacle_ObstacleTrajectory& Obstacle_ObstacleTrajectory::default_instance() {
  protobuf_obstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Obstacle_ObstacleTrajectory* Obstacle_ObstacleTrajectory::New(::google::protobuf::Arena* arena) const {
  Obstacle_ObstacleTrajectory* n = new Obstacle_ObstacleTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacle_ObstacleTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  point_.Clear();
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Obstacle_ObstacleTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.TrajectoryPoint point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  return false;
#undef DO_
}

void Obstacle_ObstacleTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // repeated .COWA.NavMsg.TrajectoryPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.Obstacle.ObstacleTrajectory)
}

::google::protobuf::uint8* Obstacle_ObstacleTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // repeated .COWA.NavMsg.TrajectoryPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  return target;
}

size_t Obstacle_ObstacleTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.TrajectoryPoint point = 2;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  // optional float confidence = 1;
  if (has_confidence()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle_ObstacleTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle_ObstacleTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacle_ObstacleTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.Obstacle.ObstacleTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.Obstacle.ObstacleTrajectory)
    MergeFrom(*source);
  }
}

void Obstacle_ObstacleTrajectory::MergeFrom(const Obstacle_ObstacleTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  if (from.has_confidence()) {
    set_confidence(from.confidence());
  }
}

void Obstacle_ObstacleTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle_ObstacleTrajectory::CopyFrom(const Obstacle_ObstacleTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.Obstacle.ObstacleTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle_ObstacleTrajectory::IsInitialized() const {
  return true;
}

void Obstacle_ObstacleTrajectory::Swap(Obstacle_ObstacleTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle_ObstacleTrajectory::InternalSwap(Obstacle_ObstacleTrajectory* other) {
  point_.InternalSwap(&other->point_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacle_ObstacleTrajectory::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Obstacle_ObstacleTrajectory

// optional float confidence = 1;
bool Obstacle_ObstacleTrajectory::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Obstacle_ObstacleTrajectory::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
void Obstacle_ObstacleTrajectory::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
void Obstacle_ObstacleTrajectory::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
float Obstacle_ObstacleTrajectory::confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.ObstacleTrajectory.confidence)
  return confidence_;
}
void Obstacle_ObstacleTrajectory::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.ObstacleTrajectory.confidence)
}

// repeated .COWA.NavMsg.TrajectoryPoint point = 2;
int Obstacle_ObstacleTrajectory::point_size() const {
  return point_.size();
}
void Obstacle_ObstacleTrajectory::clear_point() {
  point_.Clear();
}
const ::COWA::NavMsg::TrajectoryPoint& Obstacle_ObstacleTrajectory::point(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.ObstacleTrajectory.point)
  return point_.Get(index);
}
::COWA::NavMsg::TrajectoryPoint* Obstacle_ObstacleTrajectory::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacle.ObstacleTrajectory.point)
  return point_.Mutable(index);
}
::COWA::NavMsg::TrajectoryPoint* Obstacle_ObstacleTrajectory::add_point() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Obstacle.ObstacleTrajectory.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >*
Obstacle_ObstacleTrajectory::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Obstacle.ObstacleTrajectory.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >&
Obstacle_ObstacleTrajectory::point() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Obstacle.ObstacleTrajectory.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle::kIdFieldNumber;
const int Obstacle::kTimestampFieldNumber;
const int Obstacle::kTypeFieldNumber;
const int Obstacle::kThetaFieldNumber;
const int Obstacle::kThetaConfidenceFieldNumber;
const int Obstacle::kPoseFieldNumber;
const int Obstacle::kPoseConfidenceFieldNumber;
const int Obstacle::kVelocityFieldNumber;
const int Obstacle::kVelocityConfidenceFieldNumber;
const int Obstacle::kLengthFieldNumber;
const int Obstacle::kWidthFieldNumber;
const int Obstacle::kHeightFieldNumber;
const int Obstacle::kSizeConfidenceFieldNumber;
const int Obstacle::kIsStaticFieldNumber;
const int Obstacle::kTrackIdFieldNumber;
const int Obstacle::kBoundingContoursFieldNumber;
const int Obstacle::kBoundingConfidenceFieldNumber;
const int Obstacle::kConfidenceFieldNumber;
const int Obstacle::kAccelerationFieldNumber;
const int Obstacle::kSignalFieldNumber;
const int Obstacle::kBrakeFieldNumber;
const int Obstacle::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle::Obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bounding_contours_(from.bounding_contours_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::COWA::NavMsg::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::COWA::NavMsg::Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::COWA::NavMsg::Velocity(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&bounding_confidence_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(bounding_confidence_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.Obstacle)
}

void Obstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, reinterpret_cast<char*>(&bounding_confidence_) -
    reinterpret_cast<char*>(&pose_) + sizeof(bounding_confidence_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacle& Obstacle::default_instance() {
  protobuf_obstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Obstacle* Obstacle::New(::google::protobuf::Arena* arena) const {
  Obstacle* n = new Obstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.Obstacle)
  bounding_contours_.Clear();
  trajectory_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::COWA::NavMsg::Pose::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::COWA::NavMsg::Velocity::Clear();
    }
    if (has_acceleration()) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->::COWA::NavMsg::Velocity::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(width_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&height_, 0, reinterpret_cast<char*>(&theta_confidence_) -
      reinterpret_cast<char*>(&height_) + sizeof(theta_confidence_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&pose_confidence_, 0, reinterpret_cast<char*>(&bounding_confidence_) -
      reinterpret_cast<char*>(&pose_confidence_) + sizeof(bounding_confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Obstacle.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::Obstacle_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::NavMsg::Obstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Pose pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Velocity velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_static = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_static();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.Point3D bounding_contours = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bounding_contours()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Velocity acceleration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Obstacle.SignalLamp signal = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::Obstacle_SignalLamp_IsValid(value)) {
            set_signal(static_cast< ::COWA::NavMsg::Obstacle_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Obstacle.BrakeLamp brake = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::Obstacle_BrakeLamp_IsValid(value)) {
            set_brake(static_cast< ::COWA::NavMsg::Obstacle_BrakeLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.Obstacle.ObstacleTrajectory trajectory = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float theta = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float theta_confidence = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_theta_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pose_confidence = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_pose_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float velocity_confidence = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_velocity_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size_confidence = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_size_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bounding_confidence = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u)) {
          set_has_bounding_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bounding_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional .COWA.NavMsg.Obstacle.Type type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .COWA.NavMsg.Pose pose = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pose_, output);
  }

  // optional .COWA.NavMsg.Velocity velocity = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->velocity_, output);
  }

  // optional float length = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->length(), output);
  }

  // optional float width = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->width(), output);
  }

  // optional float height = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // optional bool is_static = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_static(), output);
  }

  // repeated .COWA.NavMsg.Point3D bounding_contours = 11;
  for (unsigned int i = 0, n = this->bounding_contours_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bounding_contours(i), output);
  }

  // optional float confidence = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->confidence(), output);
  }

  // optional .COWA.NavMsg.Velocity acceleration = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->acceleration_, output);
  }

  // optional .COWA.NavMsg.Obstacle.SignalLamp signal = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->signal(), output);
  }

  // optional .COWA.NavMsg.Obstacle.BrakeLamp brake = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->brake(), output);
  }

  // optional int32 track_id = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->track_id(), output);
  }

  // repeated .COWA.NavMsg.Obstacle.ObstacleTrajectory trajectory = 20;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->trajectory(i), output);
  }

  // optional float theta = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->theta(), output);
  }

  // optional float theta_confidence = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->theta_confidence(), output);
  }

  // optional float pose_confidence = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->pose_confidence(), output);
  }

  // optional float velocity_confidence = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->velocity_confidence(), output);
  }

  // optional float size_confidence = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->size_confidence(), output);
  }

  // optional float bounding_confidence = 26;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->bounding_confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.Obstacle)
}

::google::protobuf::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional .COWA.NavMsg.Obstacle.Type type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .COWA.NavMsg.Pose pose = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->pose_, deterministic, target);
  }

  // optional .COWA.NavMsg.Velocity velocity = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->velocity_, deterministic, target);
  }

  // optional float length = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->length(), target);
  }

  // optional float width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->width(), target);
  }

  // optional float height = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // optional bool is_static = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_static(), target);
  }

  // repeated .COWA.NavMsg.Point3D bounding_contours = 11;
  for (unsigned int i = 0, n = this->bounding_contours_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->bounding_contours(i), deterministic, target);
  }

  // optional float confidence = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->confidence(), target);
  }

  // optional .COWA.NavMsg.Velocity acceleration = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->acceleration_, deterministic, target);
  }

  // optional .COWA.NavMsg.Obstacle.SignalLamp signal = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->signal(), target);
  }

  // optional .COWA.NavMsg.Obstacle.BrakeLamp brake = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->brake(), target);
  }

  // optional int32 track_id = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->track_id(), target);
  }

  // repeated .COWA.NavMsg.Obstacle.ObstacleTrajectory trajectory = 20;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->trajectory(i), deterministic, target);
  }

  // optional float theta = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->theta(), target);
  }

  // optional float theta_confidence = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->theta_confidence(), target);
  }

  // optional float pose_confidence = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->pose_confidence(), target);
  }

  // optional float velocity_confidence = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->velocity_confidence(), target);
  }

  // optional float size_confidence = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->size_confidence(), target);
  }

  // optional float bounding_confidence = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->bounding_confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.Obstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.Point3D bounding_contours = 11;
  {
    unsigned int count = this->bounding_contours_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_contours(i));
    }
  }

  // repeated .COWA.NavMsg.Obstacle.ObstacleTrajectory trajectory = 20;
  {
    unsigned int count = this->trajectory_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .COWA.NavMsg.Pose pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .COWA.NavMsg.Velocity velocity = 6;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .COWA.NavMsg.Velocity acceleration = 13;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acceleration_);
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .COWA.NavMsg.Obstacle.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float length = 7;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional float width = 8;
    if (has_width()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float height = 9;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional bool is_static = 10;
    if (has_is_static()) {
      total_size += 1 + 1;
    }

    // optional float confidence = 12;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional .COWA.NavMsg.Obstacle.SignalLamp signal = 14;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal());
    }

    // optional .COWA.NavMsg.Obstacle.BrakeLamp brake = 15;
    if (has_brake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake());
    }

    // optional int32 track_id = 16;
    if (has_track_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_id());
    }

    // optional float theta = 21;
    if (has_theta()) {
      total_size += 2 + 4;
    }

    // optional float theta_confidence = 22;
    if (has_theta_confidence()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional float pose_confidence = 23;
    if (has_pose_confidence()) {
      total_size += 2 + 4;
    }

    // optional float velocity_confidence = 24;
    if (has_velocity_confidence()) {
      total_size += 2 + 4;
    }

    // optional float size_confidence = 25;
    if (has_size_confidence()) {
      total_size += 2 + 4;
    }

    // optional float bounding_confidence = 26;
    if (has_bounding_confidence()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.Obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_contours_.MergeFrom(from.bounding_contours_);
  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::COWA::NavMsg::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::COWA::NavMsg::Velocity::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::COWA::NavMsg::Velocity::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_static_ = from.is_static_;
    }
    if (cached_has_bits & 0x00000400u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000800u) {
      signal_ = from.signal_;
    }
    if (cached_has_bits & 0x00001000u) {
      brake_ = from.brake_;
    }
    if (cached_has_bits & 0x00002000u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00008000u) {
      theta_confidence_ = from.theta_confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      pose_confidence_ = from.pose_confidence_;
    }
    if (cached_has_bits & 0x00020000u) {
      velocity_confidence_ = from.velocity_confidence_;
    }
    if (cached_has_bits & 0x00040000u) {
      size_confidence_ = from.size_confidence_;
    }
    if (cached_has_bits & 0x00080000u) {
      bounding_confidence_ = from.bounding_confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle::InternalSwap(Obstacle* other) {
  bounding_contours_.InternalSwap(&other->bounding_contours_);
  trajectory_.InternalSwap(&other->trajectory_);
  std::swap(pose_, other->pose_);
  std::swap(velocity_, other->velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(is_static_, other->is_static_);
  std::swap(confidence_, other->confidence_);
  std::swap(signal_, other->signal_);
  std::swap(brake_, other->brake_);
  std::swap(track_id_, other->track_id_);
  std::swap(theta_, other->theta_);
  std::swap(theta_confidence_, other->theta_confidence_);
  std::swap(pose_confidence_, other->pose_confidence_);
  std::swap(velocity_confidence_, other->velocity_confidence_);
  std::swap(size_confidence_, other->size_confidence_);
  std::swap(bounding_confidence_, other->bounding_confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Obstacle

// optional int32 id = 1;
bool Obstacle::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Obstacle::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Obstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Obstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.id)
  return id_;
}
void Obstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.id)
}

// optional uint64 timestamp = 2;
bool Obstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Obstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void Obstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Obstacle::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Obstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.timestamp)
  return timestamp_;
}
void Obstacle::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.timestamp)
}

// optional .COWA.NavMsg.Obstacle.Type type = 3;
bool Obstacle::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Obstacle::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void Obstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void Obstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
::COWA::NavMsg::Obstacle_Type Obstacle::type() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.type)
  return static_cast< ::COWA::NavMsg::Obstacle_Type >(type_);
}
void Obstacle::set_type(::COWA::NavMsg::Obstacle_Type value) {
  assert(::COWA::NavMsg::Obstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.type)
}

// optional float theta = 21;
bool Obstacle::has_theta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Obstacle::set_has_theta() {
  _has_bits_[0] |= 0x00004000u;
}
void Obstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00004000u;
}
void Obstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
float Obstacle::theta() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.theta)
  return theta_;
}
void Obstacle::set_theta(float value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.theta)
}

// optional float theta_confidence = 22;
bool Obstacle::has_theta_confidence() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Obstacle::set_has_theta_confidence() {
  _has_bits_[0] |= 0x00008000u;
}
void Obstacle::clear_has_theta_confidence() {
  _has_bits_[0] &= ~0x00008000u;
}
void Obstacle::clear_theta_confidence() {
  theta_confidence_ = 0;
  clear_has_theta_confidence();
}
float Obstacle::theta_confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.theta_confidence)
  return theta_confidence_;
}
void Obstacle::set_theta_confidence(float value) {
  set_has_theta_confidence();
  theta_confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.theta_confidence)
}

// optional .COWA.NavMsg.Pose pose = 5;
bool Obstacle::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Obstacle::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void Obstacle::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void Obstacle::clear_pose() {
  if (pose_ != NULL) pose_->::COWA::NavMsg::Pose::Clear();
  clear_has_pose();
}
const ::COWA::NavMsg::Pose& Obstacle::pose() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.pose)
  return pose_ != NULL ? *pose_
                         : *::COWA::NavMsg::Pose::internal_default_instance();
}
::COWA::NavMsg::Pose* Obstacle::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::COWA::NavMsg::Pose;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacle.pose)
  return pose_;
}
::COWA::NavMsg::Pose* Obstacle::release_pose() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.Obstacle.pose)
  clear_has_pose();
  ::COWA::NavMsg::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Obstacle::set_allocated_pose(::COWA::NavMsg::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.Obstacle.pose)
}

// optional float pose_confidence = 23;
bool Obstacle::has_pose_confidence() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Obstacle::set_has_pose_confidence() {
  _has_bits_[0] |= 0x00010000u;
}
void Obstacle::clear_has_pose_confidence() {
  _has_bits_[0] &= ~0x00010000u;
}
void Obstacle::clear_pose_confidence() {
  pose_confidence_ = 0;
  clear_has_pose_confidence();
}
float Obstacle::pose_confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.pose_confidence)
  return pose_confidence_;
}
void Obstacle::set_pose_confidence(float value) {
  set_has_pose_confidence();
  pose_confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.pose_confidence)
}

// optional .COWA.NavMsg.Velocity velocity = 6;
bool Obstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Obstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void Obstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Obstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::COWA::NavMsg::Velocity::Clear();
  clear_has_velocity();
}
const ::COWA::NavMsg::Velocity& Obstacle::velocity() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::COWA::NavMsg::Velocity::internal_default_instance();
}
::COWA::NavMsg::Velocity* Obstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::COWA::NavMsg::Velocity;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacle.velocity)
  return velocity_;
}
::COWA::NavMsg::Velocity* Obstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.Obstacle.velocity)
  clear_has_velocity();
  ::COWA::NavMsg::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Obstacle::set_allocated_velocity(::COWA::NavMsg::Velocity* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.Obstacle.velocity)
}

// optional float velocity_confidence = 24;
bool Obstacle::has_velocity_confidence() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Obstacle::set_has_velocity_confidence() {
  _has_bits_[0] |= 0x00020000u;
}
void Obstacle::clear_has_velocity_confidence() {
  _has_bits_[0] &= ~0x00020000u;
}
void Obstacle::clear_velocity_confidence() {
  velocity_confidence_ = 0;
  clear_has_velocity_confidence();
}
float Obstacle::velocity_confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.velocity_confidence)
  return velocity_confidence_;
}
void Obstacle::set_velocity_confidence(float value) {
  set_has_velocity_confidence();
  velocity_confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.velocity_confidence)
}

// optional float length = 7;
bool Obstacle::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Obstacle::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
void Obstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void Obstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
float Obstacle::length() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.length)
  return length_;
}
void Obstacle::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.length)
}

// optional float width = 8;
bool Obstacle::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Obstacle::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
void Obstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void Obstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
float Obstacle::width() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.width)
  return width_;
}
void Obstacle::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.width)
}

// optional float height = 9;
bool Obstacle::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Obstacle::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
void Obstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void Obstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
float Obstacle::height() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.height)
  return height_;
}
void Obstacle::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.height)
}

// optional float size_confidence = 25;
bool Obstacle::has_size_confidence() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Obstacle::set_has_size_confidence() {
  _has_bits_[0] |= 0x00040000u;
}
void Obstacle::clear_has_size_confidence() {
  _has_bits_[0] &= ~0x00040000u;
}
void Obstacle::clear_size_confidence() {
  size_confidence_ = 0;
  clear_has_size_confidence();
}
float Obstacle::size_confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.size_confidence)
  return size_confidence_;
}
void Obstacle::set_size_confidence(float value) {
  set_has_size_confidence();
  size_confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.size_confidence)
}

// optional bool is_static = 10;
bool Obstacle::has_is_static() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Obstacle::set_has_is_static() {
  _has_bits_[0] |= 0x00000200u;
}
void Obstacle::clear_has_is_static() {
  _has_bits_[0] &= ~0x00000200u;
}
void Obstacle::clear_is_static() {
  is_static_ = false;
  clear_has_is_static();
}
bool Obstacle::is_static() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.is_static)
  return is_static_;
}
void Obstacle::set_is_static(bool value) {
  set_has_is_static();
  is_static_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.is_static)
}

// optional int32 track_id = 16;
bool Obstacle::has_track_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Obstacle::set_has_track_id() {
  _has_bits_[0] |= 0x00002000u;
}
void Obstacle::clear_has_track_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void Obstacle::clear_track_id() {
  track_id_ = 0;
  clear_has_track_id();
}
::google::protobuf::int32 Obstacle::track_id() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.track_id)
  return track_id_;
}
void Obstacle::set_track_id(::google::protobuf::int32 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.track_id)
}

// repeated .COWA.NavMsg.Point3D bounding_contours = 11;
int Obstacle::bounding_contours_size() const {
  return bounding_contours_.size();
}
void Obstacle::clear_bounding_contours() {
  bounding_contours_.Clear();
}
const ::COWA::NavMsg::Point3D& Obstacle::bounding_contours(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.bounding_contours)
  return bounding_contours_.Get(index);
}
::COWA::NavMsg::Point3D* Obstacle::mutable_bounding_contours(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacle.bounding_contours)
  return bounding_contours_.Mutable(index);
}
::COWA::NavMsg::Point3D* Obstacle::add_bounding_contours() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Obstacle.bounding_contours)
  return bounding_contours_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::Point3D >*
Obstacle::mutable_bounding_contours() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Obstacle.bounding_contours)
  return &bounding_contours_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::Point3D >&
Obstacle::bounding_contours() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Obstacle.bounding_contours)
  return bounding_contours_;
}

// optional float bounding_confidence = 26;
bool Obstacle::has_bounding_confidence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Obstacle::set_has_bounding_confidence() {
  _has_bits_[0] |= 0x00080000u;
}
void Obstacle::clear_has_bounding_confidence() {
  _has_bits_[0] &= ~0x00080000u;
}
void Obstacle::clear_bounding_confidence() {
  bounding_confidence_ = 0;
  clear_has_bounding_confidence();
}
float Obstacle::bounding_confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.bounding_confidence)
  return bounding_confidence_;
}
void Obstacle::set_bounding_confidence(float value) {
  set_has_bounding_confidence();
  bounding_confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.bounding_confidence)
}

// optional float confidence = 12;
bool Obstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Obstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00000400u;
}
void Obstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000400u;
}
void Obstacle::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
float Obstacle::confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.confidence)
  return confidence_;
}
void Obstacle::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.confidence)
}

// optional .COWA.NavMsg.Velocity acceleration = 13;
bool Obstacle::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Obstacle::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void Obstacle::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void Obstacle::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::COWA::NavMsg::Velocity::Clear();
  clear_has_acceleration();
}
const ::COWA::NavMsg::Velocity& Obstacle::acceleration() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::COWA::NavMsg::Velocity::internal_default_instance();
}
::COWA::NavMsg::Velocity* Obstacle::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::COWA::NavMsg::Velocity;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacle.acceleration)
  return acceleration_;
}
::COWA::NavMsg::Velocity* Obstacle::release_acceleration() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.Obstacle.acceleration)
  clear_has_acceleration();
  ::COWA::NavMsg::Velocity* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void Obstacle::set_allocated_acceleration(::COWA::NavMsg::Velocity* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.Obstacle.acceleration)
}

// optional .COWA.NavMsg.Obstacle.SignalLamp signal = 14;
bool Obstacle::has_signal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Obstacle::set_has_signal() {
  _has_bits_[0] |= 0x00000800u;
}
void Obstacle::clear_has_signal() {
  _has_bits_[0] &= ~0x00000800u;
}
void Obstacle::clear_signal() {
  signal_ = 0;
  clear_has_signal();
}
::COWA::NavMsg::Obstacle_SignalLamp Obstacle::signal() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.signal)
  return static_cast< ::COWA::NavMsg::Obstacle_SignalLamp >(signal_);
}
void Obstacle::set_signal(::COWA::NavMsg::Obstacle_SignalLamp value) {
  assert(::COWA::NavMsg::Obstacle_SignalLamp_IsValid(value));
  set_has_signal();
  signal_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.signal)
}

// optional .COWA.NavMsg.Obstacle.BrakeLamp brake = 15;
bool Obstacle::has_brake() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Obstacle::set_has_brake() {
  _has_bits_[0] |= 0x00001000u;
}
void Obstacle::clear_has_brake() {
  _has_bits_[0] &= ~0x00001000u;
}
void Obstacle::clear_brake() {
  brake_ = 0;
  clear_has_brake();
}
::COWA::NavMsg::Obstacle_BrakeLamp Obstacle::brake() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.brake)
  return static_cast< ::COWA::NavMsg::Obstacle_BrakeLamp >(brake_);
}
void Obstacle::set_brake(::COWA::NavMsg::Obstacle_BrakeLamp value) {
  assert(::COWA::NavMsg::Obstacle_BrakeLamp_IsValid(value));
  set_has_brake();
  brake_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacle.brake)
}

// repeated .COWA.NavMsg.Obstacle.ObstacleTrajectory trajectory = 20;
int Obstacle::trajectory_size() const {
  return trajectory_.size();
}
void Obstacle::clear_trajectory() {
  trajectory_.Clear();
}
const ::COWA::NavMsg::Obstacle_ObstacleTrajectory& Obstacle::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacle.trajectory)
  return trajectory_.Get(index);
}
::COWA::NavMsg::Obstacle_ObstacleTrajectory* Obstacle::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacle.trajectory)
  return trajectory_.Mutable(index);
}
::COWA::NavMsg::Obstacle_ObstacleTrajectory* Obstacle::add_trajectory() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Obstacle.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::Obstacle_ObstacleTrajectory >*
Obstacle::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Obstacle.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::Obstacle_ObstacleTrajectory >&
Obstacle::trajectory() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Obstacle.trajectory)
  return trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacles::kFrameIdFieldNumber;
const int Obstacles::kTimestampFieldNumber;
const int Obstacles::kSequenceFieldNumber;
const int Obstacles::kObstaclesFieldNumber;
const int Obstacles::kLatencyMsFieldNumber;
const int Obstacles::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacles::Obstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.Obstacles)
}

void Obstacles::SharedCtor() {
  _cached_size_ = 0;
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Obstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacles::descriptor() {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacles& Obstacles::default_instance() {
  protobuf_obstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Obstacles* Obstacles::New(::google::protobuf::Arena* arena) const {
  Obstacles* n = new Obstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.Obstacles)
  obstacles_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_frame_id()) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_debug()) {
      GOOGLE_DCHECK(!debug_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*debug_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.Obstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.Obstacle obstacles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_latency_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), this->debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "COWA.NavMsg.Obstacles.debug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.Obstacles)
  return false;
#undef DO_
}

void Obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes frame_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->frame_id(), output);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional uint32 sequence = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence(), output);
  }

  // repeated .COWA.NavMsg.Obstacle obstacles = 4;
  for (unsigned int i = 0, n = this->obstacles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obstacles(i), output);
  }

  // optional int32 latency_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->latency_ms(), output);
  }

  // optional string debug = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.NavMsg.Obstacles.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.Obstacles)
}

::google::protobuf::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes frame_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->frame_id(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional uint32 sequence = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence(), target);
  }

  // repeated .COWA.NavMsg.Obstacle obstacles = 4;
  for (unsigned int i = 0, n = this->obstacles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->obstacles(i), deterministic, target);
  }

  // optional int32 latency_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->latency_ms(), target);
  }

  // optional string debug = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.NavMsg.Obstacles.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.Obstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.Obstacle obstacles = 4;
  {
    unsigned int count = this->obstacles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacles(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame_id());
    }

    // optional string debug = 6;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional int32 latency_ms = 5;
    if (has_latency_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.Obstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::Swap(Obstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacles::InternalSwap(Obstacles* other) {
  obstacles_.InternalSwap(&other->obstacles_);
  frame_id_.Swap(&other->frame_id_);
  debug_.Swap(&other->debug_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequence_, other->sequence_);
  std::swap(latency_ms_, other->latency_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacles::GetMetadata() const {
  protobuf_obstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Obstacles

// optional bytes frame_id = 1;
bool Obstacles::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Obstacles::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Obstacles::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Obstacles::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
const ::std::string& Obstacles::frame_id() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacles.frame_id)
  return frame_id_.GetNoArena();
}
void Obstacles::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacles.frame_id)
}
#if LANG_CXX11
void Obstacles::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.NavMsg.Obstacles.frame_id)
}
#endif
void Obstacles::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.Obstacles.frame_id)
}
void Obstacles::set_frame_id(const void* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.Obstacles.frame_id)
}
::std::string* Obstacles::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacles.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Obstacles::release_frame_id() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.Obstacles.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Obstacles::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.Obstacles.frame_id)
}

// optional uint64 timestamp = 2;
bool Obstacles::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Obstacles::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void Obstacles::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Obstacles::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Obstacles::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacles.timestamp)
  return timestamp_;
}
void Obstacles::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacles.timestamp)
}

// optional uint32 sequence = 3;
bool Obstacles::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Obstacles::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
void Obstacles::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
void Obstacles::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 Obstacles::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacles.sequence)
  return sequence_;
}
void Obstacles::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacles.sequence)
}

// repeated .COWA.NavMsg.Obstacle obstacles = 4;
int Obstacles::obstacles_size() const {
  return obstacles_.size();
}
void Obstacles::clear_obstacles() {
  obstacles_.Clear();
}
const ::COWA::NavMsg::Obstacle& Obstacles::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacles.obstacles)
  return obstacles_.Get(index);
}
::COWA::NavMsg::Obstacle* Obstacles::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacles.obstacles)
  return obstacles_.Mutable(index);
}
::COWA::NavMsg::Obstacle* Obstacles::add_obstacles() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Obstacles.obstacles)
  return obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::Obstacle >*
Obstacles::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Obstacles.obstacles)
  return &obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::Obstacle >&
Obstacles::obstacles() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Obstacles.obstacles)
  return obstacles_;
}

// optional int32 latency_ms = 5;
bool Obstacles::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Obstacles::set_has_latency_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void Obstacles::clear_has_latency_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void Obstacles::clear_latency_ms() {
  latency_ms_ = 0;
  clear_has_latency_ms();
}
::google::protobuf::int32 Obstacles::latency_ms() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacles.latency_ms)
  return latency_ms_;
}
void Obstacles::set_latency_ms(::google::protobuf::int32 value) {
  set_has_latency_ms();
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacles.latency_ms)
}

// optional string debug = 6;
bool Obstacles::has_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Obstacles::set_has_debug() {
  _has_bits_[0] |= 0x00000002u;
}
void Obstacles::clear_has_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
void Obstacles::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
const ::std::string& Obstacles::debug() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Obstacles.debug)
  return debug_.GetNoArena();
}
void Obstacles::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Obstacles.debug)
}
#if LANG_CXX11
void Obstacles::set_debug(::std::string&& value) {
  set_has_debug();
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.NavMsg.Obstacles.debug)
}
#endif
void Obstacles::set_debug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.Obstacles.debug)
}
void Obstacles::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.Obstacles.debug)
}
::std::string* Obstacles::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Obstacles.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Obstacles::release_debug() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.Obstacles.debug)
  clear_has_debug();
  return debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Obstacles::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.Obstacles.debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NavMsg
}  // namespace COWA

// @@protoc_insertion_point(global_scope)
