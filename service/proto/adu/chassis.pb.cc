// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace COWA {
namespace NavMsg {
class VehicleBCMDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleBCM> {
} _VehicleBCM_default_instance_;
class VehicleSocDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleSoc> {
} _VehicleSoc_default_instance_;
class VehicleDriveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleDrive> {
} _VehicleDrive_default_instance_;
class DebugFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DebugField> {
} _DebugField_default_instance_;
class VehicleInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleInfo> {
} _VehicleInfo_default_instance_;
class VehicleCommondDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleCommond> {
} _VehicleCommond_default_instance_;

namespace protobuf_chassis_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, low_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, emergency_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, sweep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, vacuum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, spray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, left_sweep_servo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleBCM, right_sweep_servo_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, engine_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, sla_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, garbage_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSoc, water_capacity_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, speed_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDrive, steer_speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugField, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, bcm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, soc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, wheel_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, wheel_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, timestamp_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, timestamp_steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleInfo, latency_ms_),
  3,
  4,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  6,
  8,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, bcm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommond, latency_ms_),
  2,
  3,
  0,
  1,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(VehicleBCM)},
  { 27, 38, sizeof(VehicleSoc)},
  { 44, 56, sizeof(VehicleDrive)},
  { 63, 70, sizeof(DebugField)},
  { 72, 89, sizeof(VehicleInfo)},
  { 101, 111, sizeof(VehicleCommond)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleBCM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleSoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleDrive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleCommond_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "chassis.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _VehicleBCM_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VehicleSoc_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VehicleDrive_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DebugField_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _VehicleInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _VehicleCommond_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VehicleBCM_default_instance_.DefaultConstruct();
  _VehicleSoc_default_instance_.DefaultConstruct();
  _VehicleDrive_default_instance_.DefaultConstruct();
  _DebugField_default_instance_.DefaultConstruct();
  _VehicleInfo_default_instance_.DefaultConstruct();
  _VehicleCommond_default_instance_.DefaultConstruct();
  _VehicleInfo_default_instance_.get_mutable()->drive_ = const_cast< ::COWA::NavMsg::VehicleDrive*>(
      ::COWA::NavMsg::VehicleDrive::internal_default_instance());
  _VehicleInfo_default_instance_.get_mutable()->bcm_ = const_cast< ::COWA::NavMsg::VehicleBCM*>(
      ::COWA::NavMsg::VehicleBCM::internal_default_instance());
  _VehicleInfo_default_instance_.get_mutable()->soc_ = const_cast< ::COWA::NavMsg::VehicleSoc*>(
      ::COWA::NavMsg::VehicleSoc::internal_default_instance());
  _VehicleCommond_default_instance_.get_mutable()->drive_ = const_cast< ::COWA::NavMsg::VehicleDrive*>(
      ::COWA::NavMsg::VehicleDrive::internal_default_instance());
  _VehicleCommond_default_instance_.get_mutable()->bcm_ = const_cast< ::COWA::NavMsg::VehicleBCM*>(
      ::COWA::NavMsg::VehicleBCM::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rchassis.proto\022\013COWA.NavMsg\"\277\002\n\nVehicle"
      "BCM\0227\n\013turn_signal\030\001 \001(\0162\".COWA.NavMsg.V"
      "ehicleBCM.TurnSignal\022\021\n\thigh_beam\030\002 \001(\010\022"
      "\020\n\010low_beam\030\003 \001(\010\022\014\n\004horn\030\004 \001(\010\022\027\n\017emerg"
      "ency_light\030\005 \001(\010\022\r\n\005wiper\030\006 \001(\010\022\r\n\005sweep"
      "\030\n \001(\002\022\016\n\006vacuum\030\013 \001(\002\022\r\n\005spray\030\014 \001(\002\022\030\n"
      "\020left_sweep_servo\030\r \001(\002\022\031\n\021right_sweep_s"
      "ervo\030\016 \001(\002\":\n\nTurnSignal\022\r\n\tTURN_NONE\020\000\022"
      "\r\n\tTURN_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002\"\201\001\n\nVehic"
      "leSoc\022\017\n\007battery\030\001 \001(\002\022\022\n\nengine_rpm\030\002 \001"
      "(\002\022\017\n\007mileage\030\003 \001(\002\022\013\n\003sla\030\004 \001(\002\022\030\n\020garb"
      "age_capacity\030\n \001(\002\022\026\n\016water_capacity\030\013 \001"
      "(\002\"\214\004\n\014VehicleDrive\022;\n\014driving_mode\030\001 \001("
      "\0162%.COWA.NavMsg.VehicleDrive.DrivingMode"
      "\0224\n\004gear\030\002 \001(\0162&.COWA.NavMsg.VehicleDriv"
      "e.GearPosition\0227\n\nspeed_mode\030\003 \001(\0162#.COW"
      "A.NavMsg.VehicleDrive.SpeedMode\022\r\n\005speed"
      "\030\004 \001(\002\022\020\n\010throttle\030\005 \001(\002\022\r\n\005steer\030\006 \001(\002\022"
      "\023\n\013steer_speed\030\007 \001(\002\"\201\001\n\013DrivingMode\022\n\n\006"
      "MANUAL\020\000\022\016\n\nAUTO_DRIVE\020\001\022\023\n\017AUTO_STEER_O"
      "NLY\020\002\022\023\n\017AUTO_SPEED_ONLY\020\003\022\022\n\016EMERGENCY_"
      "MODE\020\004\022\013\n\007STANDBY\020\005\022\013\n\007PARKING\020\006\"c\n\014Gear"
      "Position\022\020\n\014GEAR_NEUTRAL\020\000\022\016\n\nGEAR_DRIVE"
      "\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEAR_PARKING\020\003\022\r"
      "\n\tGEAR_NONE\020\004\"\"\n\tSpeedMode\022\n\n\006TORQUE\020\000\022\t"
      "\n\005SPEED\020\001\"*\n\nDebugField\022\r\n\005field\030\001 \001(\014\022\r"
      "\n\005value\030\002 \001(\002\"\355\002\n\013VehicleInfo\022\021\n\ttimesta"
      "mp\030\001 \001(\004\022\020\n\010sequence\030\002 \001(\r\022(\n\005drive\030\003 \001("
      "\0132\031.COWA.NavMsg.VehicleDrive\022$\n\003bcm\030\004 \001("
      "\0132\027.COWA.NavMsg.VehicleBCM\022$\n\003soc\030\005 \001(\0132"
      "\027.COWA.NavMsg.VehicleSoc\022&\n\005debug\030\006 \003(\0132"
      "\027.COWA.NavMsg.DebugField\022\023\n\013wheel_speed\030"
      "\n \003(\002\022\026\n\016wheel_position\030\013 \003(\002\022\027\n\017timesta"
      "mp_speed\030\r \001(\004\022\027\n\017timestamp_steer\030\016 \001(\004\022"
      "(\n\005error\030\014 \001(\0162\031.COWA.NavMsg.DrivingErro"
      "r\022\022\n\nlatency_ms\030\017 \001(\005\"\231\001\n\016VehicleCommond"
      "\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010sequence\030\002 \001(\r\022(\n"
      "\005drive\030\003 \001(\0132\031.COWA.NavMsg.VehicleDrive\022"
      "$\n\003bcm\030\004 \001(\0132\027.COWA.NavMsg.VehicleBCM\022\022\n"
      "\nlatency_ms\030\005 \001(\005*\237\001\n\014DrivingError\022\014\n\010NO"
      "_ERROR\020\000\022\023\n\017CONTROL_TIMEOUT\020\001\022\017\n\013STEER_E"
      "RROR\020\002\022\022\n\016THROTTLE_ERROR\020\003\022\017\n\013BRAKE_ERRO"
      "R\020\004\022\016\n\nGEAR_ERROR\020\005\022\027\n\023MANUAL_INTERVENTI"
      "ON\020\006\022\r\n\tCAN_ERROR\020\007"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chassis.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_chassis_2eproto

const ::google::protobuf::EnumDescriptor* VehicleBCM_TurnSignal_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[0];
}
bool VehicleBCM_TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleBCM_TurnSignal VehicleBCM::TURN_NONE;
const VehicleBCM_TurnSignal VehicleBCM::TURN_LEFT;
const VehicleBCM_TurnSignal VehicleBCM::TURN_RIGHT;
const VehicleBCM_TurnSignal VehicleBCM::TurnSignal_MIN;
const VehicleBCM_TurnSignal VehicleBCM::TurnSignal_MAX;
const int VehicleBCM::TurnSignal_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleDrive_DrivingMode_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[1];
}
bool VehicleDrive_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleDrive_DrivingMode VehicleDrive::MANUAL;
const VehicleDrive_DrivingMode VehicleDrive::AUTO_DRIVE;
const VehicleDrive_DrivingMode VehicleDrive::AUTO_STEER_ONLY;
const VehicleDrive_DrivingMode VehicleDrive::AUTO_SPEED_ONLY;
const VehicleDrive_DrivingMode VehicleDrive::EMERGENCY_MODE;
const VehicleDrive_DrivingMode VehicleDrive::STANDBY;
const VehicleDrive_DrivingMode VehicleDrive::PARKING;
const VehicleDrive_DrivingMode VehicleDrive::DrivingMode_MIN;
const VehicleDrive_DrivingMode VehicleDrive::DrivingMode_MAX;
const int VehicleDrive::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleDrive_GearPosition_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[2];
}
bool VehicleDrive_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleDrive_GearPosition VehicleDrive::GEAR_NEUTRAL;
const VehicleDrive_GearPosition VehicleDrive::GEAR_DRIVE;
const VehicleDrive_GearPosition VehicleDrive::GEAR_REVERSE;
const VehicleDrive_GearPosition VehicleDrive::GEAR_PARKING;
const VehicleDrive_GearPosition VehicleDrive::GEAR_NONE;
const VehicleDrive_GearPosition VehicleDrive::GearPosition_MIN;
const VehicleDrive_GearPosition VehicleDrive::GearPosition_MAX;
const int VehicleDrive::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleDrive_SpeedMode_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[3];
}
bool VehicleDrive_SpeedMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleDrive_SpeedMode VehicleDrive::TORQUE;
const VehicleDrive_SpeedMode VehicleDrive::SPEED;
const VehicleDrive_SpeedMode VehicleDrive::SpeedMode_MIN;
const VehicleDrive_SpeedMode VehicleDrive::SpeedMode_MAX;
const int VehicleDrive::SpeedMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrivingError_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[4];
}
bool DrivingError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleBCM::kTurnSignalFieldNumber;
const int VehicleBCM::kHighBeamFieldNumber;
const int VehicleBCM::kLowBeamFieldNumber;
const int VehicleBCM::kHornFieldNumber;
const int VehicleBCM::kEmergencyLightFieldNumber;
const int VehicleBCM::kWiperFieldNumber;
const int VehicleBCM::kSweepFieldNumber;
const int VehicleBCM::kVacuumFieldNumber;
const int VehicleBCM::kSprayFieldNumber;
const int VehicleBCM::kLeftSweepServoFieldNumber;
const int VehicleBCM::kRightSweepServoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleBCM::VehicleBCM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.VehicleBCM)
}
VehicleBCM::VehicleBCM(const VehicleBCM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_signal_, &from.turn_signal_,
    reinterpret_cast<char*>(&right_sweep_servo_) -
    reinterpret_cast<char*>(&turn_signal_) + sizeof(right_sweep_servo_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.VehicleBCM)
}

void VehicleBCM::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&turn_signal_, 0, reinterpret_cast<char*>(&right_sweep_servo_) -
    reinterpret_cast<char*>(&turn_signal_) + sizeof(right_sweep_servo_));
}

VehicleBCM::~VehicleBCM() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.VehicleBCM)
  SharedDtor();
}

void VehicleBCM::SharedDtor() {
}

void VehicleBCM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleBCM::descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleBCM& VehicleBCM::default_instance() {
  protobuf_chassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleBCM* VehicleBCM::New(::google::protobuf::Arena* arena) const {
  VehicleBCM* n = new VehicleBCM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleBCM::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.VehicleBCM)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&turn_signal_, 0, reinterpret_cast<char*>(&vacuum_) -
      reinterpret_cast<char*>(&turn_signal_) + sizeof(vacuum_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&spray_, 0, reinterpret_cast<char*>(&right_sweep_servo_) -
      reinterpret_cast<char*>(&spray_) + sizeof(right_sweep_servo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleBCM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.VehicleBCM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.NavMsg.VehicleBCM.TurnSignal turn_signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::VehicleBCM_TurnSignal_IsValid(value)) {
            set_turn_signal(static_cast< ::COWA::NavMsg::VehicleBCM_TurnSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_high_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_low_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool emergency_light = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_emergency_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wiper = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_wiper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sweep = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_sweep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sweep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vacuum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_vacuum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vacuum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spray = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_spray();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spray_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float left_sweep_servo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_left_sweep_servo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_sweep_servo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float right_sweep_servo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_right_sweep_servo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_sweep_servo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.VehicleBCM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.VehicleBCM)
  return false;
#undef DO_
}

void VehicleBCM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.VehicleBCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.VehicleBCM.TurnSignal turn_signal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal(), output);
  }

  // optional bool high_beam = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->high_beam(), output);
  }

  // optional bool low_beam = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->low_beam(), output);
  }

  // optional bool horn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->horn(), output);
  }

  // optional bool emergency_light = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->emergency_light(), output);
  }

  // optional bool wiper = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->wiper(), output);
  }

  // optional float sweep = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->sweep(), output);
  }

  // optional float vacuum = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->vacuum(), output);
  }

  // optional float spray = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->spray(), output);
  }

  // optional float left_sweep_servo = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->left_sweep_servo(), output);
  }

  // optional float right_sweep_servo = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->right_sweep_servo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.VehicleBCM)
}

::google::protobuf::uint8* VehicleBCM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.VehicleBCM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.VehicleBCM.TurnSignal turn_signal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_signal(), target);
  }

  // optional bool high_beam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->high_beam(), target);
  }

  // optional bool low_beam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->low_beam(), target);
  }

  // optional bool horn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->horn(), target);
  }

  // optional bool emergency_light = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->emergency_light(), target);
  }

  // optional bool wiper = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->wiper(), target);
  }

  // optional float sweep = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->sweep(), target);
  }

  // optional float vacuum = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->vacuum(), target);
  }

  // optional float spray = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->spray(), target);
  }

  // optional float left_sweep_servo = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->left_sweep_servo(), target);
  }

  // optional float right_sweep_servo = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->right_sweep_servo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.VehicleBCM)
  return target;
}

size_t VehicleBCM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.VehicleBCM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .COWA.NavMsg.VehicleBCM.TurnSignal turn_signal = 1;
    if (has_turn_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
    }

    // optional bool high_beam = 2;
    if (has_high_beam()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 3;
    if (has_low_beam()) {
      total_size += 1 + 1;
    }

    // optional bool horn = 4;
    if (has_horn()) {
      total_size += 1 + 1;
    }

    // optional bool emergency_light = 5;
    if (has_emergency_light()) {
      total_size += 1 + 1;
    }

    // optional bool wiper = 6;
    if (has_wiper()) {
      total_size += 1 + 1;
    }

    // optional float sweep = 10;
    if (has_sweep()) {
      total_size += 1 + 4;
    }

    // optional float vacuum = 11;
    if (has_vacuum()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float spray = 12;
    if (has_spray()) {
      total_size += 1 + 4;
    }

    // optional float left_sweep_servo = 13;
    if (has_left_sweep_servo()) {
      total_size += 1 + 4;
    }

    // optional float right_sweep_servo = 14;
    if (has_right_sweep_servo()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleBCM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.VehicleBCM)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleBCM* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleBCM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.VehicleBCM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.VehicleBCM)
    MergeFrom(*source);
  }
}

void VehicleBCM::MergeFrom(const VehicleBCM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.VehicleBCM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      turn_signal_ = from.turn_signal_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_beam_ = from.low_beam_;
    }
    if (cached_has_bits & 0x00000008u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00000010u) {
      emergency_light_ = from.emergency_light_;
    }
    if (cached_has_bits & 0x00000020u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00000040u) {
      sweep_ = from.sweep_;
    }
    if (cached_has_bits & 0x00000080u) {
      vacuum_ = from.vacuum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      spray_ = from.spray_;
    }
    if (cached_has_bits & 0x00000200u) {
      left_sweep_servo_ = from.left_sweep_servo_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_sweep_servo_ = from.right_sweep_servo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleBCM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.VehicleBCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleBCM::CopyFrom(const VehicleBCM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.VehicleBCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleBCM::IsInitialized() const {
  return true;
}

void VehicleBCM::Swap(VehicleBCM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleBCM::InternalSwap(VehicleBCM* other) {
  std::swap(turn_signal_, other->turn_signal_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(horn_, other->horn_);
  std::swap(emergency_light_, other->emergency_light_);
  std::swap(wiper_, other->wiper_);
  std::swap(sweep_, other->sweep_);
  std::swap(vacuum_, other->vacuum_);
  std::swap(spray_, other->spray_);
  std::swap(left_sweep_servo_, other->left_sweep_servo_);
  std::swap(right_sweep_servo_, other->right_sweep_servo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleBCM::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleBCM

// optional .COWA.NavMsg.VehicleBCM.TurnSignal turn_signal = 1;
bool VehicleBCM::has_turn_signal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleBCM::set_has_turn_signal() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleBCM::clear_has_turn_signal() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleBCM::clear_turn_signal() {
  turn_signal_ = 0;
  clear_has_turn_signal();
}
::COWA::NavMsg::VehicleBCM_TurnSignal VehicleBCM::turn_signal() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.turn_signal)
  return static_cast< ::COWA::NavMsg::VehicleBCM_TurnSignal >(turn_signal_);
}
void VehicleBCM::set_turn_signal(::COWA::NavMsg::VehicleBCM_TurnSignal value) {
  assert(::COWA::NavMsg::VehicleBCM_TurnSignal_IsValid(value));
  set_has_turn_signal();
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.turn_signal)
}

// optional bool high_beam = 2;
bool VehicleBCM::has_high_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleBCM::set_has_high_beam() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleBCM::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleBCM::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
bool VehicleBCM::high_beam() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.high_beam)
  return high_beam_;
}
void VehicleBCM::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.high_beam)
}

// optional bool low_beam = 3;
bool VehicleBCM::has_low_beam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleBCM::set_has_low_beam() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleBCM::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleBCM::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
bool VehicleBCM::low_beam() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.low_beam)
  return low_beam_;
}
void VehicleBCM::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.low_beam)
}

// optional bool horn = 4;
bool VehicleBCM::has_horn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleBCM::set_has_horn() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleBCM::clear_has_horn() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleBCM::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
bool VehicleBCM::horn() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.horn)
  return horn_;
}
void VehicleBCM::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.horn)
}

// optional bool emergency_light = 5;
bool VehicleBCM::has_emergency_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleBCM::set_has_emergency_light() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleBCM::clear_has_emergency_light() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleBCM::clear_emergency_light() {
  emergency_light_ = false;
  clear_has_emergency_light();
}
bool VehicleBCM::emergency_light() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.emergency_light)
  return emergency_light_;
}
void VehicleBCM::set_emergency_light(bool value) {
  set_has_emergency_light();
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.emergency_light)
}

// optional bool wiper = 6;
bool VehicleBCM::has_wiper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleBCM::set_has_wiper() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleBCM::clear_has_wiper() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleBCM::clear_wiper() {
  wiper_ = false;
  clear_has_wiper();
}
bool VehicleBCM::wiper() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.wiper)
  return wiper_;
}
void VehicleBCM::set_wiper(bool value) {
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.wiper)
}

// optional float sweep = 10;
bool VehicleBCM::has_sweep() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleBCM::set_has_sweep() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleBCM::clear_has_sweep() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleBCM::clear_sweep() {
  sweep_ = 0;
  clear_has_sweep();
}
float VehicleBCM::sweep() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.sweep)
  return sweep_;
}
void VehicleBCM::set_sweep(float value) {
  set_has_sweep();
  sweep_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.sweep)
}

// optional float vacuum = 11;
bool VehicleBCM::has_vacuum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleBCM::set_has_vacuum() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleBCM::clear_has_vacuum() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleBCM::clear_vacuum() {
  vacuum_ = 0;
  clear_has_vacuum();
}
float VehicleBCM::vacuum() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.vacuum)
  return vacuum_;
}
void VehicleBCM::set_vacuum(float value) {
  set_has_vacuum();
  vacuum_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.vacuum)
}

// optional float spray = 12;
bool VehicleBCM::has_spray() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleBCM::set_has_spray() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleBCM::clear_has_spray() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleBCM::clear_spray() {
  spray_ = 0;
  clear_has_spray();
}
float VehicleBCM::spray() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.spray)
  return spray_;
}
void VehicleBCM::set_spray(float value) {
  set_has_spray();
  spray_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.spray)
}

// optional float left_sweep_servo = 13;
bool VehicleBCM::has_left_sweep_servo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleBCM::set_has_left_sweep_servo() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleBCM::clear_has_left_sweep_servo() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleBCM::clear_left_sweep_servo() {
  left_sweep_servo_ = 0;
  clear_has_left_sweep_servo();
}
float VehicleBCM::left_sweep_servo() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.left_sweep_servo)
  return left_sweep_servo_;
}
void VehicleBCM::set_left_sweep_servo(float value) {
  set_has_left_sweep_servo();
  left_sweep_servo_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.left_sweep_servo)
}

// optional float right_sweep_servo = 14;
bool VehicleBCM::has_right_sweep_servo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleBCM::set_has_right_sweep_servo() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleBCM::clear_has_right_sweep_servo() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleBCM::clear_right_sweep_servo() {
  right_sweep_servo_ = 0;
  clear_has_right_sweep_servo();
}
float VehicleBCM::right_sweep_servo() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleBCM.right_sweep_servo)
  return right_sweep_servo_;
}
void VehicleBCM::set_right_sweep_servo(float value) {
  set_has_right_sweep_servo();
  right_sweep_servo_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleBCM.right_sweep_servo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSoc::kBatteryFieldNumber;
const int VehicleSoc::kEngineRpmFieldNumber;
const int VehicleSoc::kMileageFieldNumber;
const int VehicleSoc::kSlaFieldNumber;
const int VehicleSoc::kGarbageCapacityFieldNumber;
const int VehicleSoc::kWaterCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSoc::VehicleSoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.VehicleSoc)
}
VehicleSoc::VehicleSoc(const VehicleSoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_, &from.battery_,
    reinterpret_cast<char*>(&water_capacity_) -
    reinterpret_cast<char*>(&battery_) + sizeof(water_capacity_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.VehicleSoc)
}

void VehicleSoc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&battery_, 0, reinterpret_cast<char*>(&water_capacity_) -
    reinterpret_cast<char*>(&battery_) + sizeof(water_capacity_));
}

VehicleSoc::~VehicleSoc() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.VehicleSoc)
  SharedDtor();
}

void VehicleSoc::SharedDtor() {
}

void VehicleSoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSoc::descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleSoc& VehicleSoc::default_instance() {
  protobuf_chassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleSoc* VehicleSoc::New(::google::protobuf::Arena* arena) const {
  VehicleSoc* n = new VehicleSoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSoc::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.VehicleSoc)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&battery_, 0, reinterpret_cast<char*>(&water_capacity_) -
      reinterpret_cast<char*>(&battery_) + sizeof(water_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleSoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.VehicleSoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float battery = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_battery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_rpm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_engine_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mileage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_mileage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sla = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_sla();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sla_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float garbage_capacity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_garbage_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &garbage_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float water_capacity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_water_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &water_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.VehicleSoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.VehicleSoc)
  return false;
#undef DO_
}

void VehicleSoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.VehicleSoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float battery = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->battery(), output);
  }

  // optional float engine_rpm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->engine_rpm(), output);
  }

  // optional float mileage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mileage(), output);
  }

  // optional float sla = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sla(), output);
  }

  // optional float garbage_capacity = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->garbage_capacity(), output);
  }

  // optional float water_capacity = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->water_capacity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.VehicleSoc)
}

::google::protobuf::uint8* VehicleSoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.VehicleSoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float battery = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->battery(), target);
  }

  // optional float engine_rpm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->engine_rpm(), target);
  }

  // optional float mileage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mileage(), target);
  }

  // optional float sla = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sla(), target);
  }

  // optional float garbage_capacity = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->garbage_capacity(), target);
  }

  // optional float water_capacity = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->water_capacity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.VehicleSoc)
  return target;
}

size_t VehicleSoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.VehicleSoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float battery = 1;
    if (has_battery()) {
      total_size += 1 + 4;
    }

    // optional float engine_rpm = 2;
    if (has_engine_rpm()) {
      total_size += 1 + 4;
    }

    // optional float mileage = 3;
    if (has_mileage()) {
      total_size += 1 + 4;
    }

    // optional float sla = 4;
    if (has_sla()) {
      total_size += 1 + 4;
    }

    // optional float garbage_capacity = 10;
    if (has_garbage_capacity()) {
      total_size += 1 + 4;
    }

    // optional float water_capacity = 11;
    if (has_water_capacity()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.VehicleSoc)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.VehicleSoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.VehicleSoc)
    MergeFrom(*source);
  }
}

void VehicleSoc::MergeFrom(const VehicleSoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.VehicleSoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      battery_ = from.battery_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_rpm_ = from.engine_rpm_;
    }
    if (cached_has_bits & 0x00000004u) {
      mileage_ = from.mileage_;
    }
    if (cached_has_bits & 0x00000008u) {
      sla_ = from.sla_;
    }
    if (cached_has_bits & 0x00000010u) {
      garbage_capacity_ = from.garbage_capacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      water_capacity_ = from.water_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleSoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.VehicleSoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSoc::CopyFrom(const VehicleSoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.VehicleSoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSoc::IsInitialized() const {
  return true;
}

void VehicleSoc::Swap(VehicleSoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSoc::InternalSwap(VehicleSoc* other) {
  std::swap(battery_, other->battery_);
  std::swap(engine_rpm_, other->engine_rpm_);
  std::swap(mileage_, other->mileage_);
  std::swap(sla_, other->sla_);
  std::swap(garbage_capacity_, other->garbage_capacity_);
  std::swap(water_capacity_, other->water_capacity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSoc::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSoc

// optional float battery = 1;
bool VehicleSoc::has_battery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleSoc::set_has_battery() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleSoc::clear_has_battery() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleSoc::clear_battery() {
  battery_ = 0;
  clear_has_battery();
}
float VehicleSoc::battery() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleSoc.battery)
  return battery_;
}
void VehicleSoc::set_battery(float value) {
  set_has_battery();
  battery_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleSoc.battery)
}

// optional float engine_rpm = 2;
bool VehicleSoc::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleSoc::set_has_engine_rpm() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleSoc::clear_has_engine_rpm() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleSoc::clear_engine_rpm() {
  engine_rpm_ = 0;
  clear_has_engine_rpm();
}
float VehicleSoc::engine_rpm() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleSoc.engine_rpm)
  return engine_rpm_;
}
void VehicleSoc::set_engine_rpm(float value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleSoc.engine_rpm)
}

// optional float mileage = 3;
bool VehicleSoc::has_mileage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleSoc::set_has_mileage() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleSoc::clear_has_mileage() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleSoc::clear_mileage() {
  mileage_ = 0;
  clear_has_mileage();
}
float VehicleSoc::mileage() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleSoc.mileage)
  return mileage_;
}
void VehicleSoc::set_mileage(float value) {
  set_has_mileage();
  mileage_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleSoc.mileage)
}

// optional float sla = 4;
bool VehicleSoc::has_sla() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleSoc::set_has_sla() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleSoc::clear_has_sla() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleSoc::clear_sla() {
  sla_ = 0;
  clear_has_sla();
}
float VehicleSoc::sla() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleSoc.sla)
  return sla_;
}
void VehicleSoc::set_sla(float value) {
  set_has_sla();
  sla_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleSoc.sla)
}

// optional float garbage_capacity = 10;
bool VehicleSoc::has_garbage_capacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleSoc::set_has_garbage_capacity() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleSoc::clear_has_garbage_capacity() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleSoc::clear_garbage_capacity() {
  garbage_capacity_ = 0;
  clear_has_garbage_capacity();
}
float VehicleSoc::garbage_capacity() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleSoc.garbage_capacity)
  return garbage_capacity_;
}
void VehicleSoc::set_garbage_capacity(float value) {
  set_has_garbage_capacity();
  garbage_capacity_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleSoc.garbage_capacity)
}

// optional float water_capacity = 11;
bool VehicleSoc::has_water_capacity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleSoc::set_has_water_capacity() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleSoc::clear_has_water_capacity() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleSoc::clear_water_capacity() {
  water_capacity_ = 0;
  clear_has_water_capacity();
}
float VehicleSoc::water_capacity() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleSoc.water_capacity)
  return water_capacity_;
}
void VehicleSoc::set_water_capacity(float value) {
  set_has_water_capacity();
  water_capacity_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleSoc.water_capacity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDrive::kDrivingModeFieldNumber;
const int VehicleDrive::kGearFieldNumber;
const int VehicleDrive::kSpeedModeFieldNumber;
const int VehicleDrive::kSpeedFieldNumber;
const int VehicleDrive::kThrottleFieldNumber;
const int VehicleDrive::kSteerFieldNumber;
const int VehicleDrive::kSteerSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDrive::VehicleDrive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.VehicleDrive)
}
VehicleDrive::VehicleDrive(const VehicleDrive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&driving_mode_, &from.driving_mode_,
    reinterpret_cast<char*>(&steer_speed_) -
    reinterpret_cast<char*>(&driving_mode_) + sizeof(steer_speed_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.VehicleDrive)
}

void VehicleDrive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&driving_mode_, 0, reinterpret_cast<char*>(&steer_speed_) -
    reinterpret_cast<char*>(&driving_mode_) + sizeof(steer_speed_));
}

VehicleDrive::~VehicleDrive() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.VehicleDrive)
  SharedDtor();
}

void VehicleDrive::SharedDtor() {
}

void VehicleDrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleDrive::descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleDrive& VehicleDrive::default_instance() {
  protobuf_chassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleDrive* VehicleDrive::New(::google::protobuf::Arena* arena) const {
  VehicleDrive* n = new VehicleDrive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.VehicleDrive)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&driving_mode_, 0, reinterpret_cast<char*>(&steer_speed_) -
      reinterpret_cast<char*>(&driving_mode_) + sizeof(steer_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleDrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.VehicleDrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.NavMsg.VehicleDrive.DrivingMode driving_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::VehicleDrive_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::COWA::NavMsg::VehicleDrive_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleDrive.GearPosition gear = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::VehicleDrive_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::COWA::NavMsg::VehicleDrive_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleDrive.SpeedMode speed_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::VehicleDrive_SpeedMode_IsValid(value)) {
            set_speed_mode(static_cast< ::COWA::NavMsg::VehicleDrive_SpeedMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_throttle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steer_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_steer_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.VehicleDrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.VehicleDrive)
  return false;
#undef DO_
}

void VehicleDrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.VehicleDrive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.VehicleDrive.DrivingMode driving_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->driving_mode(), output);
  }

  // optional .COWA.NavMsg.VehicleDrive.GearPosition gear = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gear(), output);
  }

  // optional .COWA.NavMsg.VehicleDrive.SpeedMode speed_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->speed_mode(), output);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional float throttle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->throttle(), output);
  }

  // optional float steer = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->steer(), output);
  }

  // optional float steer_speed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->steer_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.VehicleDrive)
}

::google::protobuf::uint8* VehicleDrive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.VehicleDrive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.VehicleDrive.DrivingMode driving_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->driving_mode(), target);
  }

  // optional .COWA.NavMsg.VehicleDrive.GearPosition gear = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gear(), target);
  }

  // optional .COWA.NavMsg.VehicleDrive.SpeedMode speed_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->speed_mode(), target);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional float throttle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->throttle(), target);
  }

  // optional float steer = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->steer(), target);
  }

  // optional float steer_speed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->steer_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.VehicleDrive)
  return target;
}

size_t VehicleDrive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.VehicleDrive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .COWA.NavMsg.VehicleDrive.DrivingMode driving_mode = 1;
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .COWA.NavMsg.VehicleDrive.GearPosition gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .COWA.NavMsg.VehicleDrive.SpeedMode speed_mode = 3;
    if (has_speed_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->speed_mode());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float throttle = 5;
    if (has_throttle()) {
      total_size += 1 + 4;
    }

    // optional float steer = 6;
    if (has_steer()) {
      total_size += 1 + 4;
    }

    // optional float steer_speed = 7;
    if (has_steer_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleDrive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.VehicleDrive)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleDrive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleDrive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.VehicleDrive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.VehicleDrive)
    MergeFrom(*source);
  }
}

void VehicleDrive::MergeFrom(const VehicleDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.VehicleDrive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_mode_ = from.speed_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000020u) {
      steer_ = from.steer_;
    }
    if (cached_has_bits & 0x00000040u) {
      steer_speed_ = from.steer_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleDrive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.VehicleDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDrive::CopyFrom(const VehicleDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.VehicleDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDrive::IsInitialized() const {
  return true;
}

void VehicleDrive::Swap(VehicleDrive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDrive::InternalSwap(VehicleDrive* other) {
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(gear_, other->gear_);
  std::swap(speed_mode_, other->speed_mode_);
  std::swap(speed_, other->speed_);
  std::swap(throttle_, other->throttle_);
  std::swap(steer_, other->steer_);
  std::swap(steer_speed_, other->steer_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleDrive::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleDrive

// optional .COWA.NavMsg.VehicleDrive.DrivingMode driving_mode = 1;
bool VehicleDrive::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleDrive::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleDrive::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleDrive::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::COWA::NavMsg::VehicleDrive_DrivingMode VehicleDrive::driving_mode() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.driving_mode)
  return static_cast< ::COWA::NavMsg::VehicleDrive_DrivingMode >(driving_mode_);
}
void VehicleDrive::set_driving_mode(::COWA::NavMsg::VehicleDrive_DrivingMode value) {
  assert(::COWA::NavMsg::VehicleDrive_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.driving_mode)
}

// optional .COWA.NavMsg.VehicleDrive.GearPosition gear = 2;
bool VehicleDrive::has_gear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleDrive::set_has_gear() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleDrive::clear_has_gear() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleDrive::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
::COWA::NavMsg::VehicleDrive_GearPosition VehicleDrive::gear() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.gear)
  return static_cast< ::COWA::NavMsg::VehicleDrive_GearPosition >(gear_);
}
void VehicleDrive::set_gear(::COWA::NavMsg::VehicleDrive_GearPosition value) {
  assert(::COWA::NavMsg::VehicleDrive_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.gear)
}

// optional .COWA.NavMsg.VehicleDrive.SpeedMode speed_mode = 3;
bool VehicleDrive::has_speed_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleDrive::set_has_speed_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleDrive::clear_has_speed_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleDrive::clear_speed_mode() {
  speed_mode_ = 0;
  clear_has_speed_mode();
}
::COWA::NavMsg::VehicleDrive_SpeedMode VehicleDrive::speed_mode() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.speed_mode)
  return static_cast< ::COWA::NavMsg::VehicleDrive_SpeedMode >(speed_mode_);
}
void VehicleDrive::set_speed_mode(::COWA::NavMsg::VehicleDrive_SpeedMode value) {
  assert(::COWA::NavMsg::VehicleDrive_SpeedMode_IsValid(value));
  set_has_speed_mode();
  speed_mode_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.speed_mode)
}

// optional float speed = 4;
bool VehicleDrive::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleDrive::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleDrive::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleDrive::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float VehicleDrive::speed() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.speed)
  return speed_;
}
void VehicleDrive::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.speed)
}

// optional float throttle = 5;
bool VehicleDrive::has_throttle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleDrive::set_has_throttle() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleDrive::clear_has_throttle() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleDrive::clear_throttle() {
  throttle_ = 0;
  clear_has_throttle();
}
float VehicleDrive::throttle() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.throttle)
  return throttle_;
}
void VehicleDrive::set_throttle(float value) {
  set_has_throttle();
  throttle_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.throttle)
}

// optional float steer = 6;
bool VehicleDrive::has_steer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleDrive::set_has_steer() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleDrive::clear_has_steer() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleDrive::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
float VehicleDrive::steer() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.steer)
  return steer_;
}
void VehicleDrive::set_steer(float value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.steer)
}

// optional float steer_speed = 7;
bool VehicleDrive::has_steer_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleDrive::set_has_steer_speed() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleDrive::clear_has_steer_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleDrive::clear_steer_speed() {
  steer_speed_ = 0;
  clear_has_steer_speed();
}
float VehicleDrive::steer_speed() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleDrive.steer_speed)
  return steer_speed_;
}
void VehicleDrive::set_steer_speed(float value) {
  set_has_steer_speed();
  steer_speed_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleDrive.steer_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugField::kFieldFieldNumber;
const int DebugField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugField::DebugField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.DebugField)
}
DebugField::DebugField(const DebugField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field()) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.DebugField)
}

void DebugField::SharedCtor() {
  _cached_size_ = 0;
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

DebugField::~DebugField() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.DebugField)
  SharedDtor();
}

void DebugField::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugField::descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugField& DebugField::default_instance() {
  protobuf_chassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugField* DebugField::New(::google::protobuf::Arena* arena) const {
  DebugField* n = new DebugField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugField::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.DebugField)
  if (has_field()) {
    GOOGLE_DCHECK(!field_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*field_.UnsafeRawStringPointer())->clear();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.DebugField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.DebugField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.DebugField)
  return false;
#undef DO_
}

void DebugField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.DebugField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->field(), output);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.DebugField)
}

::google::protobuf::uint8* DebugField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.DebugField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes field = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->field(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.DebugField)
  return target;
}

size_t DebugField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.DebugField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.DebugField)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.DebugField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.DebugField)
    MergeFrom(*source);
  }
}

void DebugField::MergeFrom(const DebugField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.DebugField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_field();
      field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.DebugField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugField::CopyFrom(const DebugField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.DebugField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugField::IsInitialized() const {
  return true;
}

void DebugField::Swap(DebugField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugField::InternalSwap(DebugField* other) {
  field_.Swap(&other->field_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugField::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugField

// optional bytes field = 1;
bool DebugField::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugField::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugField::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugField::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field();
}
const ::std::string& DebugField::field() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.DebugField.field)
  return field_.GetNoArena();
}
void DebugField::set_field(const ::std::string& value) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.DebugField.field)
}
#if LANG_CXX11
void DebugField::set_field(::std::string&& value) {
  set_has_field();
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.NavMsg.DebugField.field)
}
#endif
void DebugField::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.DebugField.field)
}
void DebugField::set_field(const void* value, size_t size) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.DebugField.field)
}
::std::string* DebugField::mutable_field() {
  set_has_field();
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.DebugField.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DebugField::release_field() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.DebugField.field)
  clear_has_field();
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugField::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    set_has_field();
  } else {
    clear_has_field();
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.DebugField.field)
}

// optional float value = 2;
bool DebugField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugField::clear_value() {
  value_ = 0;
  clear_has_value();
}
float DebugField::value() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.DebugField.value)
  return value_;
}
void DebugField::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.DebugField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInfo::kTimestampFieldNumber;
const int VehicleInfo::kSequenceFieldNumber;
const int VehicleInfo::kDriveFieldNumber;
const int VehicleInfo::kBcmFieldNumber;
const int VehicleInfo::kSocFieldNumber;
const int VehicleInfo::kDebugFieldNumber;
const int VehicleInfo::kWheelSpeedFieldNumber;
const int VehicleInfo::kWheelPositionFieldNumber;
const int VehicleInfo::kTimestampSpeedFieldNumber;
const int VehicleInfo::kTimestampSteerFieldNumber;
const int VehicleInfo::kErrorFieldNumber;
const int VehicleInfo::kLatencyMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInfo::VehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      debug_(from.debug_),
      wheel_speed_(from.wheel_speed_),
      wheel_position_(from.wheel_position_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive()) {
    drive_ = new ::COWA::NavMsg::VehicleDrive(*from.drive_);
  } else {
    drive_ = NULL;
  }
  if (from.has_bcm()) {
    bcm_ = new ::COWA::NavMsg::VehicleBCM(*from.bcm_);
  } else {
    bcm_ = NULL;
  }
  if (from.has_soc()) {
    soc_ = new ::COWA::NavMsg::VehicleSoc(*from.soc_);
  } else {
    soc_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&timestamp_steer_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(timestamp_steer_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&drive_, 0, reinterpret_cast<char*>(&timestamp_steer_) -
    reinterpret_cast<char*>(&drive_) + sizeof(timestamp_steer_));
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_;
  }
  if (this != internal_default_instance()) {
    delete bcm_;
  }
  if (this != internal_default_instance()) {
    delete soc_;
  }
}

void VehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInfo::descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInfo& VehicleInfo::default_instance() {
  protobuf_chassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleInfo* VehicleInfo::New(::google::protobuf::Arena* arena) const {
  VehicleInfo* n = new VehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.VehicleInfo)
  debug_.Clear();
  wheel_speed_.Clear();
  wheel_position_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_drive()) {
      GOOGLE_DCHECK(drive_ != NULL);
      drive_->::COWA::NavMsg::VehicleDrive::Clear();
    }
    if (has_bcm()) {
      GOOGLE_DCHECK(bcm_ != NULL);
      bcm_->::COWA::NavMsg::VehicleBCM::Clear();
    }
    if (has_soc()) {
      GOOGLE_DCHECK(soc_ != NULL);
      soc_->::COWA::NavMsg::VehicleSoc::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  }
  timestamp_steer_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.VehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleDrive drive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleBCM bcm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bcm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleSoc soc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.DebugField debug = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float wheel_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85u, input, this->mutable_wheel_speed())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_wheel_speed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float wheel_position = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93u, input, this->mutable_wheel_position())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_wheel_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.DrivingError error = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::DrivingError_IsValid(value)) {
            set_error(static_cast< ::COWA::NavMsg::DrivingError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_timestamp_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_steer = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_timestamp_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_latency_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.VehicleInfo)
  return false;
#undef DO_
}

void VehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional .COWA.NavMsg.VehicleDrive drive = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->drive_, output);
  }

  // optional .COWA.NavMsg.VehicleBCM bcm = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bcm_, output);
  }

  // optional .COWA.NavMsg.VehicleSoc soc = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->soc_, output);
  }

  // repeated .COWA.NavMsg.DebugField debug = 6;
  for (unsigned int i = 0, n = this->debug_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->debug(i), output);
  }

  // repeated float wheel_speed = 10;
  for (int i = 0, n = this->wheel_speed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->wheel_speed(i), output);
  }

  // repeated float wheel_position = 11;
  for (int i = 0, n = this->wheel_position_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->wheel_position(i), output);
  }

  // optional .COWA.NavMsg.DrivingError error = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->error(), output);
  }

  // optional uint64 timestamp_speed = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->timestamp_speed(), output);
  }

  // optional uint64 timestamp_steer = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->timestamp_steer(), output);
  }

  // optional int32 latency_ms = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->latency_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.VehicleInfo)
}

::google::protobuf::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional .COWA.NavMsg.VehicleDrive drive = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->drive_, deterministic, target);
  }

  // optional .COWA.NavMsg.VehicleBCM bcm = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bcm_, deterministic, target);
  }

  // optional .COWA.NavMsg.VehicleSoc soc = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->soc_, deterministic, target);
  }

  // repeated .COWA.NavMsg.DebugField debug = 6;
  for (unsigned int i = 0, n = this->debug_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->debug(i), deterministic, target);
  }

  // repeated float wheel_speed = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(10, this->wheel_speed_, target);

  // repeated float wheel_position = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(11, this->wheel_position_, target);

  // optional .COWA.NavMsg.DrivingError error = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->error(), target);
  }

  // optional uint64 timestamp_speed = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->timestamp_speed(), target);
  }

  // optional uint64 timestamp_steer = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->timestamp_steer(), target);
  }

  // optional int32 latency_ms = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->latency_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.VehicleInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.DebugField debug = 6;
  {
    unsigned int count = this->debug_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug(i));
    }
  }

  // repeated float wheel_speed = 10;
  {
    unsigned int count = this->wheel_speed_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wheel_speed_size());
    total_size += data_size;
  }

  // repeated float wheel_position = 11;
  {
    unsigned int count = this->wheel_position_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wheel_position_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .COWA.NavMsg.VehicleDrive drive = 3;
    if (has_drive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->drive_);
    }

    // optional .COWA.NavMsg.VehicleBCM bcm = 4;
    if (has_bcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bcm_);
    }

    // optional .COWA.NavMsg.VehicleSoc soc = 5;
    if (has_soc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->soc_);
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional .COWA.NavMsg.DrivingError error = 12;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint64 timestamp_speed = 13;
    if (has_timestamp_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_speed());
    }

    // optional int32 latency_ms = 15;
    if (has_latency_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  // optional uint64 timestamp_steer = 14;
  if (has_timestamp_steer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_steer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.VehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debug_.MergeFrom(from.debug_);
  wheel_speed_.MergeFrom(from.wheel_speed_);
  wheel_position_.MergeFrom(from.wheel_position_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_drive()->::COWA::NavMsg::VehicleDrive::MergeFrom(from.drive());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bcm()->::COWA::NavMsg::VehicleBCM::MergeFrom(from.bcm());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_soc()->::COWA::NavMsg::VehicleSoc::MergeFrom(from.soc());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_speed_ = from.timestamp_speed_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp_steer(from.timestamp_steer());
  }
}

void VehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::Swap(VehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInfo::InternalSwap(VehicleInfo* other) {
  debug_.InternalSwap(&other->debug_);
  wheel_speed_.InternalSwap(&other->wheel_speed_);
  wheel_position_.InternalSwap(&other->wheel_position_);
  std::swap(drive_, other->drive_);
  std::swap(bcm_, other->bcm_);
  std::swap(soc_, other->soc_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequence_, other->sequence_);
  std::swap(error_, other->error_);
  std::swap(timestamp_speed_, other->timestamp_speed_);
  std::swap(latency_ms_, other->latency_ms_);
  std::swap(timestamp_steer_, other->timestamp_steer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInfo::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleInfo

// optional uint64 timestamp = 1;
bool VehicleInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 VehicleInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.timestamp)
  return timestamp_;
}
void VehicleInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.timestamp)
}

// optional uint32 sequence = 2;
bool VehicleInfo::has_sequence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleInfo::set_has_sequence() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleInfo::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleInfo::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 VehicleInfo::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.sequence)
  return sequence_;
}
void VehicleInfo::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.sequence)
}

// optional .COWA.NavMsg.VehicleDrive drive = 3;
bool VehicleInfo::has_drive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleInfo::set_has_drive() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleInfo::clear_has_drive() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleInfo::clear_drive() {
  if (drive_ != NULL) drive_->::COWA::NavMsg::VehicleDrive::Clear();
  clear_has_drive();
}
const ::COWA::NavMsg::VehicleDrive& VehicleInfo::drive() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.drive)
  return drive_ != NULL ? *drive_
                         : *::COWA::NavMsg::VehicleDrive::internal_default_instance();
}
::COWA::NavMsg::VehicleDrive* VehicleInfo::mutable_drive() {
  set_has_drive();
  if (drive_ == NULL) {
    drive_ = new ::COWA::NavMsg::VehicleDrive;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.VehicleInfo.drive)
  return drive_;
}
::COWA::NavMsg::VehicleDrive* VehicleInfo::release_drive() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.VehicleInfo.drive)
  clear_has_drive();
  ::COWA::NavMsg::VehicleDrive* temp = drive_;
  drive_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_drive(::COWA::NavMsg::VehicleDrive* drive) {
  delete drive_;
  drive_ = drive;
  if (drive) {
    set_has_drive();
  } else {
    clear_has_drive();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.VehicleInfo.drive)
}

// optional .COWA.NavMsg.VehicleBCM bcm = 4;
bool VehicleInfo::has_bcm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleInfo::set_has_bcm() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleInfo::clear_has_bcm() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleInfo::clear_bcm() {
  if (bcm_ != NULL) bcm_->::COWA::NavMsg::VehicleBCM::Clear();
  clear_has_bcm();
}
const ::COWA::NavMsg::VehicleBCM& VehicleInfo::bcm() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.bcm)
  return bcm_ != NULL ? *bcm_
                         : *::COWA::NavMsg::VehicleBCM::internal_default_instance();
}
::COWA::NavMsg::VehicleBCM* VehicleInfo::mutable_bcm() {
  set_has_bcm();
  if (bcm_ == NULL) {
    bcm_ = new ::COWA::NavMsg::VehicleBCM;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.VehicleInfo.bcm)
  return bcm_;
}
::COWA::NavMsg::VehicleBCM* VehicleInfo::release_bcm() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.VehicleInfo.bcm)
  clear_has_bcm();
  ::COWA::NavMsg::VehicleBCM* temp = bcm_;
  bcm_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_bcm(::COWA::NavMsg::VehicleBCM* bcm) {
  delete bcm_;
  bcm_ = bcm;
  if (bcm) {
    set_has_bcm();
  } else {
    clear_has_bcm();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.VehicleInfo.bcm)
}

// optional .COWA.NavMsg.VehicleSoc soc = 5;
bool VehicleInfo::has_soc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleInfo::set_has_soc() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleInfo::clear_has_soc() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleInfo::clear_soc() {
  if (soc_ != NULL) soc_->::COWA::NavMsg::VehicleSoc::Clear();
  clear_has_soc();
}
const ::COWA::NavMsg::VehicleSoc& VehicleInfo::soc() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.soc)
  return soc_ != NULL ? *soc_
                         : *::COWA::NavMsg::VehicleSoc::internal_default_instance();
}
::COWA::NavMsg::VehicleSoc* VehicleInfo::mutable_soc() {
  set_has_soc();
  if (soc_ == NULL) {
    soc_ = new ::COWA::NavMsg::VehicleSoc;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.VehicleInfo.soc)
  return soc_;
}
::COWA::NavMsg::VehicleSoc* VehicleInfo::release_soc() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.VehicleInfo.soc)
  clear_has_soc();
  ::COWA::NavMsg::VehicleSoc* temp = soc_;
  soc_ = NULL;
  return temp;
}
void VehicleInfo::set_allocated_soc(::COWA::NavMsg::VehicleSoc* soc) {
  delete soc_;
  soc_ = soc;
  if (soc) {
    set_has_soc();
  } else {
    clear_has_soc();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.VehicleInfo.soc)
}

// repeated .COWA.NavMsg.DebugField debug = 6;
int VehicleInfo::debug_size() const {
  return debug_.size();
}
void VehicleInfo::clear_debug() {
  debug_.Clear();
}
const ::COWA::NavMsg::DebugField& VehicleInfo::debug(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.debug)
  return debug_.Get(index);
}
::COWA::NavMsg::DebugField* VehicleInfo::mutable_debug(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.VehicleInfo.debug)
  return debug_.Mutable(index);
}
::COWA::NavMsg::DebugField* VehicleInfo::add_debug() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.VehicleInfo.debug)
  return debug_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::DebugField >*
VehicleInfo::mutable_debug() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.VehicleInfo.debug)
  return &debug_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::DebugField >&
VehicleInfo::debug() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.VehicleInfo.debug)
  return debug_;
}

// repeated float wheel_speed = 10;
int VehicleInfo::wheel_speed_size() const {
  return wheel_speed_.size();
}
void VehicleInfo::clear_wheel_speed() {
  wheel_speed_.Clear();
}
float VehicleInfo::wheel_speed(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.wheel_speed)
  return wheel_speed_.Get(index);
}
void VehicleInfo::set_wheel_speed(int index, float value) {
  wheel_speed_.Set(index, value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.wheel_speed)
}
void VehicleInfo::add_wheel_speed(float value) {
  wheel_speed_.Add(value);
  // @@protoc_insertion_point(field_add:COWA.NavMsg.VehicleInfo.wheel_speed)
}
const ::google::protobuf::RepeatedField< float >&
VehicleInfo::wheel_speed() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.VehicleInfo.wheel_speed)
  return wheel_speed_;
}
::google::protobuf::RepeatedField< float >*
VehicleInfo::mutable_wheel_speed() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.VehicleInfo.wheel_speed)
  return &wheel_speed_;
}

// repeated float wheel_position = 11;
int VehicleInfo::wheel_position_size() const {
  return wheel_position_.size();
}
void VehicleInfo::clear_wheel_position() {
  wheel_position_.Clear();
}
float VehicleInfo::wheel_position(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.wheel_position)
  return wheel_position_.Get(index);
}
void VehicleInfo::set_wheel_position(int index, float value) {
  wheel_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.wheel_position)
}
void VehicleInfo::add_wheel_position(float value) {
  wheel_position_.Add(value);
  // @@protoc_insertion_point(field_add:COWA.NavMsg.VehicleInfo.wheel_position)
}
const ::google::protobuf::RepeatedField< float >&
VehicleInfo::wheel_position() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.VehicleInfo.wheel_position)
  return wheel_position_;
}
::google::protobuf::RepeatedField< float >*
VehicleInfo::mutable_wheel_position() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.VehicleInfo.wheel_position)
  return &wheel_position_;
}

// optional uint64 timestamp_speed = 13;
bool VehicleInfo::has_timestamp_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleInfo::set_has_timestamp_speed() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleInfo::clear_has_timestamp_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleInfo::clear_timestamp_speed() {
  timestamp_speed_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_speed();
}
::google::protobuf::uint64 VehicleInfo::timestamp_speed() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.timestamp_speed)
  return timestamp_speed_;
}
void VehicleInfo::set_timestamp_speed(::google::protobuf::uint64 value) {
  set_has_timestamp_speed();
  timestamp_speed_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.timestamp_speed)
}

// optional uint64 timestamp_steer = 14;
bool VehicleInfo::has_timestamp_steer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleInfo::set_has_timestamp_steer() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleInfo::clear_has_timestamp_steer() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleInfo::clear_timestamp_steer() {
  timestamp_steer_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_steer();
}
::google::protobuf::uint64 VehicleInfo::timestamp_steer() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.timestamp_steer)
  return timestamp_steer_;
}
void VehicleInfo::set_timestamp_steer(::google::protobuf::uint64 value) {
  set_has_timestamp_steer();
  timestamp_steer_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.timestamp_steer)
}

// optional .COWA.NavMsg.DrivingError error = 12;
bool VehicleInfo::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleInfo::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleInfo::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleInfo::clear_error() {
  error_ = 0;
  clear_has_error();
}
::COWA::NavMsg::DrivingError VehicleInfo::error() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.error)
  return static_cast< ::COWA::NavMsg::DrivingError >(error_);
}
void VehicleInfo::set_error(::COWA::NavMsg::DrivingError value) {
  assert(::COWA::NavMsg::DrivingError_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.error)
}

// optional int32 latency_ms = 15;
bool VehicleInfo::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleInfo::set_has_latency_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleInfo::clear_has_latency_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleInfo::clear_latency_ms() {
  latency_ms_ = 0;
  clear_has_latency_ms();
}
::google::protobuf::int32 VehicleInfo::latency_ms() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleInfo.latency_ms)
  return latency_ms_;
}
void VehicleInfo::set_latency_ms(::google::protobuf::int32 value) {
  set_has_latency_ms();
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleInfo.latency_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleCommond::kTimestampFieldNumber;
const int VehicleCommond::kSequenceFieldNumber;
const int VehicleCommond::kDriveFieldNumber;
const int VehicleCommond::kBcmFieldNumber;
const int VehicleCommond::kLatencyMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleCommond::VehicleCommond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.VehicleCommond)
}
VehicleCommond::VehicleCommond(const VehicleCommond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive()) {
    drive_ = new ::COWA::NavMsg::VehicleDrive(*from.drive_);
  } else {
    drive_ = NULL;
  }
  if (from.has_bcm()) {
    bcm_ = new ::COWA::NavMsg::VehicleBCM(*from.bcm_);
  } else {
    bcm_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.VehicleCommond)
}

void VehicleCommond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&drive_, 0, reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&drive_) + sizeof(latency_ms_));
}

VehicleCommond::~VehicleCommond() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.VehicleCommond)
  SharedDtor();
}

void VehicleCommond::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_;
  }
  if (this != internal_default_instance()) {
    delete bcm_;
  }
}

void VehicleCommond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleCommond::descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleCommond& VehicleCommond::default_instance() {
  protobuf_chassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleCommond* VehicleCommond::New(::google::protobuf::Arena* arena) const {
  VehicleCommond* n = new VehicleCommond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleCommond::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.VehicleCommond)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_drive()) {
      GOOGLE_DCHECK(drive_ != NULL);
      drive_->::COWA::NavMsg::VehicleDrive::Clear();
    }
    if (has_bcm()) {
      GOOGLE_DCHECK(bcm_ != NULL);
      bcm_->::COWA::NavMsg::VehicleBCM::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleCommond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.VehicleCommond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleDrive drive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleBCM bcm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bcm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_latency_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.VehicleCommond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.VehicleCommond)
  return false;
#undef DO_
}

void VehicleCommond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.VehicleCommond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional .COWA.NavMsg.VehicleDrive drive = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->drive_, output);
  }

  // optional .COWA.NavMsg.VehicleBCM bcm = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bcm_, output);
  }

  // optional int32 latency_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->latency_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.VehicleCommond)
}

::google::protobuf::uint8* VehicleCommond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.VehicleCommond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional .COWA.NavMsg.VehicleDrive drive = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->drive_, deterministic, target);
  }

  // optional .COWA.NavMsg.VehicleBCM bcm = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bcm_, deterministic, target);
  }

  // optional int32 latency_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->latency_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.VehicleCommond)
  return target;
}

size_t VehicleCommond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.VehicleCommond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .COWA.NavMsg.VehicleDrive drive = 3;
    if (has_drive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->drive_);
    }

    // optional .COWA.NavMsg.VehicleBCM bcm = 4;
    if (has_bcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bcm_);
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional int32 latency_ms = 5;
    if (has_latency_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleCommond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.VehicleCommond)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleCommond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleCommond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.VehicleCommond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.VehicleCommond)
    MergeFrom(*source);
  }
}

void VehicleCommond::MergeFrom(const VehicleCommond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.VehicleCommond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_drive()->::COWA::NavMsg::VehicleDrive::MergeFrom(from.drive());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bcm()->::COWA::NavMsg::VehicleBCM::MergeFrom(from.bcm());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleCommond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.VehicleCommond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleCommond::CopyFrom(const VehicleCommond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.VehicleCommond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCommond::IsInitialized() const {
  return true;
}

void VehicleCommond::Swap(VehicleCommond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleCommond::InternalSwap(VehicleCommond* other) {
  std::swap(drive_, other->drive_);
  std::swap(bcm_, other->bcm_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequence_, other->sequence_);
  std::swap(latency_ms_, other->latency_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleCommond::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleCommond

// optional uint64 timestamp = 1;
bool VehicleCommond::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleCommond::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleCommond::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleCommond::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 VehicleCommond::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleCommond.timestamp)
  return timestamp_;
}
void VehicleCommond::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleCommond.timestamp)
}

// optional uint32 sequence = 2;
bool VehicleCommond::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleCommond::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleCommond::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleCommond::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 VehicleCommond::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleCommond.sequence)
  return sequence_;
}
void VehicleCommond::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleCommond.sequence)
}

// optional .COWA.NavMsg.VehicleDrive drive = 3;
bool VehicleCommond::has_drive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleCommond::set_has_drive() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleCommond::clear_has_drive() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleCommond::clear_drive() {
  if (drive_ != NULL) drive_->::COWA::NavMsg::VehicleDrive::Clear();
  clear_has_drive();
}
const ::COWA::NavMsg::VehicleDrive& VehicleCommond::drive() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleCommond.drive)
  return drive_ != NULL ? *drive_
                         : *::COWA::NavMsg::VehicleDrive::internal_default_instance();
}
::COWA::NavMsg::VehicleDrive* VehicleCommond::mutable_drive() {
  set_has_drive();
  if (drive_ == NULL) {
    drive_ = new ::COWA::NavMsg::VehicleDrive;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.VehicleCommond.drive)
  return drive_;
}
::COWA::NavMsg::VehicleDrive* VehicleCommond::release_drive() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.VehicleCommond.drive)
  clear_has_drive();
  ::COWA::NavMsg::VehicleDrive* temp = drive_;
  drive_ = NULL;
  return temp;
}
void VehicleCommond::set_allocated_drive(::COWA::NavMsg::VehicleDrive* drive) {
  delete drive_;
  drive_ = drive;
  if (drive) {
    set_has_drive();
  } else {
    clear_has_drive();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.VehicleCommond.drive)
}

// optional .COWA.NavMsg.VehicleBCM bcm = 4;
bool VehicleCommond::has_bcm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleCommond::set_has_bcm() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleCommond::clear_has_bcm() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleCommond::clear_bcm() {
  if (bcm_ != NULL) bcm_->::COWA::NavMsg::VehicleBCM::Clear();
  clear_has_bcm();
}
const ::COWA::NavMsg::VehicleBCM& VehicleCommond::bcm() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleCommond.bcm)
  return bcm_ != NULL ? *bcm_
                         : *::COWA::NavMsg::VehicleBCM::internal_default_instance();
}
::COWA::NavMsg::VehicleBCM* VehicleCommond::mutable_bcm() {
  set_has_bcm();
  if (bcm_ == NULL) {
    bcm_ = new ::COWA::NavMsg::VehicleBCM;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.VehicleCommond.bcm)
  return bcm_;
}
::COWA::NavMsg::VehicleBCM* VehicleCommond::release_bcm() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.VehicleCommond.bcm)
  clear_has_bcm();
  ::COWA::NavMsg::VehicleBCM* temp = bcm_;
  bcm_ = NULL;
  return temp;
}
void VehicleCommond::set_allocated_bcm(::COWA::NavMsg::VehicleBCM* bcm) {
  delete bcm_;
  bcm_ = bcm;
  if (bcm) {
    set_has_bcm();
  } else {
    clear_has_bcm();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.VehicleCommond.bcm)
}

// optional int32 latency_ms = 5;
bool VehicleCommond::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleCommond::set_has_latency_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleCommond::clear_has_latency_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleCommond::clear_latency_ms() {
  latency_ms_ = 0;
  clear_has_latency_ms();
}
::google::protobuf::int32 VehicleCommond::latency_ms() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.VehicleCommond.latency_ms)
  return latency_ms_;
}
void VehicleCommond::set_latency_ms(::google::protobuf::int32 value) {
  set_has_latency_ms();
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.VehicleCommond.latency_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NavMsg
}  // namespace COWA

// @@protoc_insertion_point(global_scope)
