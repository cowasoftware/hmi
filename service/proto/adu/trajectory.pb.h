// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#ifndef PROTOBUF_trajectory_2eproto__INCLUDED
#define PROTOBUF_trajectory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace COWA {
namespace NavMsg {
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace NavMsg
}  // namespace COWA

namespace COWA {
namespace NavMsg {

namespace protobuf_trajectory_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_trajectory_2eproto

enum Trajectory_Action {
  Trajectory_Action_NONE = 0,
  Trajectory_Action_TURN_LEFT = 1,
  Trajectory_Action_TURN_RIGHT = 2,
  Trajectory_Action_CHANGE_LANE_LEFT = 3,
  Trajectory_Action_CHANGE_LANE_RIGHT = 4,
  Trajectory_Action_U_TURN = 5,
  Trajectory_Action_STOP_BLOCKED = 10,
  Trajectory_Action_STOP_BLOCKED_PEDESTRIAN = 11,
  Trajectory_Action_STOP_BLOCKED_VEHICLE = 12,
  Trajectory_Action_STOP_BLOCKED_NO_MOTOR_VEHICLE = 13,
  Trajectory_Action_STOP_BLOCKED_UNKNOWN = 14,
  Trajectory_Action_STOP_EMERGENCY = 15,
  Trajectory_Action_STOP_TRFFICLIGHT = 16,
  Trajectory_Action_STOP_WAIT = 17,
  Trajectory_Action_PULL_OVER = 18,
  Trajectory_Action_PARKING = 19,
  Trajectory_Action_STANDBY = 20,
  Trajectory_Action_MOVE_START = 21,
  Trajectory_Action_MOVE_ACCELERATE = 22,
  Trajectory_Action_MOVE_DECELERATE = 23,
  Trajectory_Action_OVERTACK_LEFT = 31,
  Trajectory_Action_OVERTACK_RIGHT = 32,
  Trajectory_Action_AVOID_LEFT = 33,
  Trajectory_Action_AVOID_RIGHT = 34,
  Trajectory_Action_MANUAL = 41,
  Trajectory_Action_AUTO_DRIVE = 42,
  Trajectory_Action_SWEEP_ON = 44,
  Trajectory_Action_VACUUM_ON = 45,
  Trajectory_Action_SPRAY_ON = 46,
  Trajectory_Action_LOOK_LEFT = 101,
  Trajectory_Action_LOOK_RIGHT = 102,
  Trajectory_Action_LOOK_BACK_LEFT = 103,
  Trajectory_Action_LOOK_BACK_RIGHT = 104,
  Trajectory_Action_LOOK_BACKWARD = 105
};
bool Trajectory_Action_IsValid(int value);
const Trajectory_Action Trajectory_Action_Action_MIN = Trajectory_Action_NONE;
const Trajectory_Action Trajectory_Action_Action_MAX = Trajectory_Action_LOOK_BACKWARD;
const int Trajectory_Action_Action_ARRAYSIZE = Trajectory_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Trajectory_Action_descriptor();
inline const ::std::string& Trajectory_Action_Name(Trajectory_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Trajectory_Action_descriptor(), value);
}
inline bool Trajectory_Action_Parse(
    const ::std::string& name, Trajectory_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Trajectory_Action>(
    Trajectory_Action_descriptor(), name, value);
}
// ===================================================================

class TrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:COWA.NavMsg.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPoint& default_instance();

  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TrajectoryPoint* other);

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  TrajectoryPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional float theta = 4;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  float theta() const;
  void set_theta(float value);

  // optional float kappa = 5;
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 5;
  float kappa() const;
  void set_kappa(float value);

  // optional float dkappa = 6;
  bool has_dkappa() const;
  void clear_dkappa();
  static const int kDkappaFieldNumber = 6;
  float dkappa() const;
  void set_dkappa(float value);

  // optional float ddkappa = 7;
  bool has_ddkappa() const;
  void clear_ddkappa();
  static const int kDdkappaFieldNumber = 7;
  float ddkappa() const;
  void set_ddkappa(float value);

  // optional float s = 8;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 8;
  float s() const;
  void set_s(float value);

  // optional float v = 9;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 9;
  float v() const;
  void set_v(float value);

  // optional float a = 10;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 10;
  float a() const;
  void set_a(float value);

  // optional float da = 11;
  bool has_da() const;
  void clear_da();
  static const int kDaFieldNumber = 11;
  float da() const;
  void set_da(float value);

  // optional float relative_time = 12;
  bool has_relative_time() const;
  void clear_relative_time();
  static const int kRelativeTimeFieldNumber = 12;
  float relative_time() const;
  void set_relative_time(float value);

  // optional float left_distance = 13;
  bool has_left_distance() const;
  void clear_left_distance();
  static const int kLeftDistanceFieldNumber = 13;
  float left_distance() const;
  void set_left_distance(float value);

  // optional float right_distance = 14;
  bool has_right_distance() const;
  void clear_right_distance();
  static const int kRightDistanceFieldNumber = 14;
  float right_distance() const;
  void set_right_distance(float value);

  // optional uint32 lane_hash = 15;
  bool has_lane_hash() const;
  void clear_lane_hash();
  static const int kLaneHashFieldNumber = 15;
  ::google::protobuf::uint32 lane_hash() const;
  void set_lane_hash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:COWA.NavMsg.TrajectoryPoint)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_theta();
  void clear_has_theta();
  void set_has_kappa();
  void clear_has_kappa();
  void set_has_dkappa();
  void clear_has_dkappa();
  void set_has_ddkappa();
  void clear_has_ddkappa();
  void set_has_s();
  void clear_has_s();
  void set_has_v();
  void clear_has_v();
  void set_has_a();
  void clear_has_a();
  void set_has_da();
  void clear_has_da();
  void set_has_relative_time();
  void clear_has_relative_time();
  void set_has_left_distance();
  void clear_has_left_distance();
  void set_has_right_distance();
  void clear_has_right_distance();
  void set_has_lane_hash();
  void clear_has_lane_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  float theta_;
  float kappa_;
  float dkappa_;
  float ddkappa_;
  float s_;
  float v_;
  float a_;
  float da_;
  float relative_time_;
  float left_distance_;
  float right_distance_;
  ::google::protobuf::uint32 lane_hash_;
  friend struct protobuf_trajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:COWA.NavMsg.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Trajectory* other);

  // implements Message ----------------------------------------------

  inline Trajectory* New() const PROTOBUF_FINAL { return New(NULL); }

  Trajectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Trajectory_Action Action;
  static const Action NONE =
    Trajectory_Action_NONE;
  static const Action TURN_LEFT =
    Trajectory_Action_TURN_LEFT;
  static const Action TURN_RIGHT =
    Trajectory_Action_TURN_RIGHT;
  static const Action CHANGE_LANE_LEFT =
    Trajectory_Action_CHANGE_LANE_LEFT;
  static const Action CHANGE_LANE_RIGHT =
    Trajectory_Action_CHANGE_LANE_RIGHT;
  static const Action U_TURN =
    Trajectory_Action_U_TURN;
  static const Action STOP_BLOCKED =
    Trajectory_Action_STOP_BLOCKED;
  static const Action STOP_BLOCKED_PEDESTRIAN =
    Trajectory_Action_STOP_BLOCKED_PEDESTRIAN;
  static const Action STOP_BLOCKED_VEHICLE =
    Trajectory_Action_STOP_BLOCKED_VEHICLE;
  static const Action STOP_BLOCKED_NO_MOTOR_VEHICLE =
    Trajectory_Action_STOP_BLOCKED_NO_MOTOR_VEHICLE;
  static const Action STOP_BLOCKED_UNKNOWN =
    Trajectory_Action_STOP_BLOCKED_UNKNOWN;
  static const Action STOP_EMERGENCY =
    Trajectory_Action_STOP_EMERGENCY;
  static const Action STOP_TRFFICLIGHT =
    Trajectory_Action_STOP_TRFFICLIGHT;
  static const Action STOP_WAIT =
    Trajectory_Action_STOP_WAIT;
  static const Action PULL_OVER =
    Trajectory_Action_PULL_OVER;
  static const Action PARKING =
    Trajectory_Action_PARKING;
  static const Action STANDBY =
    Trajectory_Action_STANDBY;
  static const Action MOVE_START =
    Trajectory_Action_MOVE_START;
  static const Action MOVE_ACCELERATE =
    Trajectory_Action_MOVE_ACCELERATE;
  static const Action MOVE_DECELERATE =
    Trajectory_Action_MOVE_DECELERATE;
  static const Action OVERTACK_LEFT =
    Trajectory_Action_OVERTACK_LEFT;
  static const Action OVERTACK_RIGHT =
    Trajectory_Action_OVERTACK_RIGHT;
  static const Action AVOID_LEFT =
    Trajectory_Action_AVOID_LEFT;
  static const Action AVOID_RIGHT =
    Trajectory_Action_AVOID_RIGHT;
  static const Action MANUAL =
    Trajectory_Action_MANUAL;
  static const Action AUTO_DRIVE =
    Trajectory_Action_AUTO_DRIVE;
  static const Action SWEEP_ON =
    Trajectory_Action_SWEEP_ON;
  static const Action VACUUM_ON =
    Trajectory_Action_VACUUM_ON;
  static const Action SPRAY_ON =
    Trajectory_Action_SPRAY_ON;
  static const Action LOOK_LEFT =
    Trajectory_Action_LOOK_LEFT;
  static const Action LOOK_RIGHT =
    Trajectory_Action_LOOK_RIGHT;
  static const Action LOOK_BACK_LEFT =
    Trajectory_Action_LOOK_BACK_LEFT;
  static const Action LOOK_BACK_RIGHT =
    Trajectory_Action_LOOK_BACK_RIGHT;
  static const Action LOOK_BACKWARD =
    Trajectory_Action_LOOK_BACKWARD;
  static inline bool Action_IsValid(int value) {
    return Trajectory_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Trajectory_Action_Action_MIN;
  static const Action Action_MAX =
    Trajectory_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Trajectory_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Trajectory_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Trajectory_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Trajectory_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .COWA.NavMsg.Trajectory.Action action = 2;
  int action_size() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::COWA::NavMsg::Trajectory_Action action(int index) const;
  void set_action(int index, ::COWA::NavMsg::Trajectory_Action value);
  void add_action(::COWA::NavMsg::Trajectory_Action value);
  const ::google::protobuf::RepeatedField<int>& action() const;
  ::google::protobuf::RepeatedField<int>* mutable_action();

  // repeated .COWA.NavMsg.TrajectoryPoint points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::COWA::NavMsg::TrajectoryPoint& points(int index) const;
  ::COWA::NavMsg::TrajectoryPoint* mutable_points(int index);
  ::COWA::NavMsg::TrajectoryPoint* add_points();
  ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >&
      points() const;

  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional int32 latency_ms = 5;
  bool has_latency_ms() const;
  void clear_latency_ms();
  static const int kLatencyMsFieldNumber = 5;
  ::google::protobuf::int32 latency_ms() const;
  void set_latency_ms(::google::protobuf::int32 value);

  // optional uint32 sequence = 6;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 6;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:COWA.NavMsg.Trajectory)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_latency_ms();
  void clear_has_latency_ms();
  void set_has_sequence();
  void clear_has_sequence();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> action_;
  ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint > points_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 latency_ms_;
  ::google::protobuf::uint32 sequence_;
  friend struct protobuf_trajectory_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPoint

// optional double x = 1;
inline bool TrajectoryPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double TrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.x)
  return x_;
}
inline void TrajectoryPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.x)
}

// optional double y = 2;
inline bool TrajectoryPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double TrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.y)
  return y_;
}
inline void TrajectoryPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.y)
}

// optional double z = 3;
inline bool TrajectoryPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double TrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.z)
  return z_;
}
inline void TrajectoryPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.z)
}

// optional float theta = 4;
inline bool TrajectoryPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline float TrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.theta)
  return theta_;
}
inline void TrajectoryPoint::set_theta(float value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.theta)
}

// optional float kappa = 5;
inline bool TrajectoryPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline float TrajectoryPoint::kappa() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.kappa)
  return kappa_;
}
inline void TrajectoryPoint::set_kappa(float value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.kappa)
}

// optional float dkappa = 6;
inline bool TrajectoryPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPoint::set_has_dkappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryPoint::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryPoint::clear_dkappa() {
  dkappa_ = 0;
  clear_has_dkappa();
}
inline float TrajectoryPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.dkappa)
  return dkappa_;
}
inline void TrajectoryPoint::set_dkappa(float value) {
  set_has_dkappa();
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.dkappa)
}

// optional float ddkappa = 7;
inline bool TrajectoryPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryPoint::set_has_ddkappa() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryPoint::clear_has_ddkappa() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryPoint::clear_ddkappa() {
  ddkappa_ = 0;
  clear_has_ddkappa();
}
inline float TrajectoryPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.ddkappa)
  return ddkappa_;
}
inline void TrajectoryPoint::set_ddkappa(float value) {
  set_has_ddkappa();
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.ddkappa)
}

// optional float s = 8;
inline bool TrajectoryPoint::has_s() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrajectoryPoint::set_has_s() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrajectoryPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrajectoryPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline float TrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.s)
  return s_;
}
inline void TrajectoryPoint::set_s(float value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.s)
}

// optional float v = 9;
inline bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrajectoryPoint::set_has_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrajectoryPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline float TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.v)
  return v_;
}
inline void TrajectoryPoint::set_v(float value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.v)
}

// optional float a = 10;
inline bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrajectoryPoint::set_has_a() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrajectoryPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.a)
  return a_;
}
inline void TrajectoryPoint::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.a)
}

// optional float da = 11;
inline bool TrajectoryPoint::has_da() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrajectoryPoint::set_has_da() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrajectoryPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrajectoryPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
inline float TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.da)
  return da_;
}
inline void TrajectoryPoint::set_da(float value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.da)
}

// optional float relative_time = 12;
inline bool TrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
inline float TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.relative_time)
  return relative_time_;
}
inline void TrajectoryPoint::set_relative_time(float value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.relative_time)
}

// optional float left_distance = 13;
inline bool TrajectoryPoint::has_left_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrajectoryPoint::set_has_left_distance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrajectoryPoint::clear_has_left_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrajectoryPoint::clear_left_distance() {
  left_distance_ = 0;
  clear_has_left_distance();
}
inline float TrajectoryPoint::left_distance() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.left_distance)
  return left_distance_;
}
inline void TrajectoryPoint::set_left_distance(float value) {
  set_has_left_distance();
  left_distance_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.left_distance)
}

// optional float right_distance = 14;
inline bool TrajectoryPoint::has_right_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrajectoryPoint::set_has_right_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrajectoryPoint::clear_has_right_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrajectoryPoint::clear_right_distance() {
  right_distance_ = 0;
  clear_has_right_distance();
}
inline float TrajectoryPoint::right_distance() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.right_distance)
  return right_distance_;
}
inline void TrajectoryPoint::set_right_distance(float value) {
  set_has_right_distance();
  right_distance_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.right_distance)
}

// optional uint32 lane_hash = 15;
inline bool TrajectoryPoint::has_lane_hash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrajectoryPoint::set_has_lane_hash() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrajectoryPoint::clear_has_lane_hash() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrajectoryPoint::clear_lane_hash() {
  lane_hash_ = 0u;
  clear_has_lane_hash();
}
inline ::google::protobuf::uint32 TrajectoryPoint::lane_hash() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrajectoryPoint.lane_hash)
  return lane_hash_;
}
inline void TrajectoryPoint::set_lane_hash(::google::protobuf::uint32 value) {
  set_has_lane_hash();
  lane_hash_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrajectoryPoint.lane_hash)
}

// -------------------------------------------------------------------

// Trajectory

// optional uint64 timestamp = 1;
inline bool Trajectory::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Trajectory::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.timestamp)
  return timestamp_;
}
inline void Trajectory::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.timestamp)
}

// repeated .COWA.NavMsg.Trajectory.Action action = 2;
inline int Trajectory::action_size() const {
  return action_.size();
}
inline void Trajectory::clear_action() {
  action_.Clear();
}
inline ::COWA::NavMsg::Trajectory_Action Trajectory::action(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.action)
  return static_cast< ::COWA::NavMsg::Trajectory_Action >(action_.Get(index));
}
inline void Trajectory::set_action(int index, ::COWA::NavMsg::Trajectory_Action value) {
  assert(::COWA::NavMsg::Trajectory_Action_IsValid(value));
  action_.Set(index, value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.action)
}
inline void Trajectory::add_action(::COWA::NavMsg::Trajectory_Action value) {
  assert(::COWA::NavMsg::Trajectory_Action_IsValid(value));
  action_.Add(value);
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Trajectory.action)
}
inline const ::google::protobuf::RepeatedField<int>&
Trajectory::action() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Trajectory.action)
  return action_;
}
inline ::google::protobuf::RepeatedField<int>*
Trajectory::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Trajectory.action)
  return &action_;
}

// repeated .COWA.NavMsg.TrajectoryPoint points = 3;
inline int Trajectory::points_size() const {
  return points_.size();
}
inline void Trajectory::clear_points() {
  points_.Clear();
}
inline const ::COWA::NavMsg::TrajectoryPoint& Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.points)
  return points_.Get(index);
}
inline ::COWA::NavMsg::TrajectoryPoint* Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.Trajectory.points)
  return points_.Mutable(index);
}
inline ::COWA::NavMsg::TrajectoryPoint* Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.Trajectory.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >*
Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.Trajectory.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrajectoryPoint >&
Trajectory::points() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.Trajectory.points)
  return points_;
}

// optional int32 latency_ms = 5;
inline bool Trajectory::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trajectory::set_has_latency_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trajectory::clear_has_latency_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trajectory::clear_latency_ms() {
  latency_ms_ = 0;
  clear_has_latency_ms();
}
inline ::google::protobuf::int32 Trajectory::latency_ms() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.latency_ms)
  return latency_ms_;
}
inline void Trajectory::set_latency_ms(::google::protobuf::int32 value) {
  set_has_latency_ms();
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.latency_ms)
}

// optional uint32 sequence = 6;
inline bool Trajectory::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Trajectory::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Trajectory::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Trajectory::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Trajectory::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.Trajectory.sequence)
  return sequence_;
}
inline void Trajectory::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.Trajectory.sequence)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NavMsg
}  // namespace COWA

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::COWA::NavMsg::Trajectory_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::COWA::NavMsg::Trajectory_Action>() {
  return ::COWA::NavMsg::Trajectory_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trajectory_2eproto__INCLUDED
