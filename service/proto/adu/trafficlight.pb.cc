// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trafficlight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace COWA {
namespace NavMsg {
class TrafficLightBBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightBBox> {
} _TrafficLightBBox_default_instance_;
class TrafficLightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight> {
} _TrafficLight_default_instance_;
class TrafficLightDetectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDetection> {
} _TrafficLightDetection_default_instance_;
class TrafficLight2_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight2_Item> {
} _TrafficLight2_Item_default_instance_;
class TrafficLight2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight2> {
} _TrafficLight2_default_instance_;

namespace protobuf_trafficlight_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, x1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, y1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, x2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, y2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBBox, is_wait_),
  0,
  1,
  2,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, blink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, remaining_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, center_),
  2,
  0,
  6,
  4,
  3,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, roi_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, vehicle_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, signal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, latency_ms_),
  2,
  3,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2_Item, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2_Item, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2_Item, remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2_Item, blink_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, crossroad_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight2, detected_),
  1,
  2,
  ~0u,
  0,
  3,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(TrafficLightBBox)},
  { 17, 29, sizeof(TrafficLight)},
  { 36, 49, sizeof(TrafficLightDetection)},
  { 57, 66, sizeof(TrafficLight2_Item)},
  { 70, 81, sizeof(TrafficLight2)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightBBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight2_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight2_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trafficlight.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _TrafficLightBBox_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TrafficLight_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TrafficLightDetection_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TrafficLight2_Item_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TrafficLight2_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::COWA::NavMsg::protobuf_pose_2eproto::InitDefaults();
  _TrafficLightBBox_default_instance_.DefaultConstruct();
  _TrafficLight_default_instance_.DefaultConstruct();
  _TrafficLightDetection_default_instance_.DefaultConstruct();
  _TrafficLight2_Item_default_instance_.DefaultConstruct();
  _TrafficLight2_default_instance_.DefaultConstruct();
  _TrafficLight_default_instance_.get_mutable()->center_ = const_cast< ::COWA::NavMsg::PoseStamped*>(
      ::COWA::NavMsg::PoseStamped::internal_default_instance());
  _TrafficLightDetection_default_instance_.get_mutable()->vehicle_pose_ = const_cast< ::COWA::NavMsg::PoseStamped*>(
      ::COWA::NavMsg::PoseStamped::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022trafficlight.proto\022\013COWA.NavMsg\032\npose."
      "proto\"i\n\020TrafficLightBBox\022\n\n\002x1\030\001 \001(\005\022\n\n"
      "\002y1\030\002 \001(\005\022\n\n\002x2\030\003 \001(\005\022\n\n\002y2\030\004 \001(\005\022\r\n\005dep"
      "th\030\006 \001(\005\022\026\n\007is_wait\030\005 \001(\010:\005false\"\224\002\n\014Tra"
      "fficLight\022.\n\005color\030\001 \001(\0162\037.COWA.NavMsg.T"
      "rafficLight.Color\022\n\n\002id\030\002 \001(\014\022\025\n\nconfide"
      "nce\030\003 \001(\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005b"
      "link\030\005 \001(\010\022\026\n\016remaining_time\030\006 \001(\001\022(\n\006ce"
      "nter\030\007 \001(\0132\030.COWA.NavMsg.PoseStamped\"I\n\005"
      "Color\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022"
      "\t\n\005GREEN\020\003\022\t\n\005BLACK\020\004\022\010\n\004WAIT\020\005\"\215\002\n\025Traf"
      "ficLightDetection\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010"
      "sequence\030\002 \001(\r\0220\n\rtraffic_light\030\003 \003(\0132\031."
      "COWA.NavMsg.TrafficLight\022\021\n\tcamera_id\030\004 "
      "\001(\014\0223\n\014roi_detected\030\005 \003(\0132\035.COWA.NavMsg."
      "TrafficLightBBox\022.\n\014vehicle_pose\030\006 \001(\0132\030"
      ".COWA.NavMsg.PoseStamped\022\021\n\tsignal_id\030\007 "
      "\003(\014\022\022\n\nlatency_ms\030\010 \001(\005\"\270\003\n\rTrafficLight"
      "2\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010sequence\030\002 \001(\r\022/"
      "\n\006lights\030\003 \003(\0132\037.COWA.NavMsg.TrafficLigh"
      "t2.Item\022\024\n\014crossroad_id\030\004 \001(\t\022\013\n\003yaw\030\005 \001"
      "(\002\022/\n\010detected\030\006 \003(\0132\035.COWA.NavMsg.Traff"
      "icLightBBox\032\214\001\n\004Item\0221\n\003dir\030\001 \001(\0162$.COWA"
      ".NavMsg.TrafficLight2.Direction\022/\n\005state"
      "\030\002 \001(\0162 .COWA.NavMsg.TrafficLight2.State"
      "\022\021\n\tremaining\030\003 \001(\002\022\r\n\005blink\030\004 \001(\010\"4\n\005St"
      "ate\022\t\n\005GREEN\020\001\022\007\n\003RED\020\002\022\n\n\006YELLOW\020\003\022\013\n\007U"
      "NKNOWN\020\004\"8\n\tDirection\022\013\n\007FORWARD\020\001\022\010\n\004LE"
      "FT\020\002\022\t\n\005RIGHT\020\003\022\t\n\005UTURN\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trafficlight.proto", &protobuf_RegisterTypes);
  ::COWA::NavMsg::protobuf_pose_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_trafficlight_2eproto

const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_enum_descriptors[0];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::UNKNOWN;
const TrafficLight_Color TrafficLight::RED;
const TrafficLight_Color TrafficLight::YELLOW;
const TrafficLight_Color TrafficLight::GREEN;
const TrafficLight_Color TrafficLight::BLACK;
const TrafficLight_Color TrafficLight::WAIT;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight2_State_descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_enum_descriptors[1];
}
bool TrafficLight2_State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight2_State TrafficLight2::GREEN;
const TrafficLight2_State TrafficLight2::RED;
const TrafficLight2_State TrafficLight2::YELLOW;
const TrafficLight2_State TrafficLight2::UNKNOWN;
const TrafficLight2_State TrafficLight2::State_MIN;
const TrafficLight2_State TrafficLight2::State_MAX;
const int TrafficLight2::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight2_Direction_descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_enum_descriptors[2];
}
bool TrafficLight2_Direction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight2_Direction TrafficLight2::FORWARD;
const TrafficLight2_Direction TrafficLight2::LEFT;
const TrafficLight2_Direction TrafficLight2::RIGHT;
const TrafficLight2_Direction TrafficLight2::UTURN;
const TrafficLight2_Direction TrafficLight2::Direction_MIN;
const TrafficLight2_Direction TrafficLight2::Direction_MAX;
const int TrafficLight2::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightBBox::kX1FieldNumber;
const int TrafficLightBBox::kY1FieldNumber;
const int TrafficLightBBox::kX2FieldNumber;
const int TrafficLightBBox::kY2FieldNumber;
const int TrafficLightBBox::kDepthFieldNumber;
const int TrafficLightBBox::kIsWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightBBox::TrafficLightBBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trafficlight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.TrafficLightBBox)
}
TrafficLightBBox::TrafficLightBBox(const TrafficLightBBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&x1_) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.TrafficLightBBox)
}

void TrafficLightBBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x1_, 0, reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&x1_) + sizeof(depth_));
}

TrafficLightBBox::~TrafficLightBBox() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.TrafficLightBBox)
  SharedDtor();
}

void TrafficLightBBox::SharedDtor() {
}

void TrafficLightBBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightBBox::descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightBBox& TrafficLightBBox::default_instance() {
  protobuf_trafficlight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightBBox* TrafficLightBBox::New(::google::protobuf::Arena* arena) const {
  TrafficLightBBox* n = new TrafficLightBBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.TrafficLightBBox)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&x1_, 0, reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&x1_) + sizeof(depth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightBBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.TrafficLightBBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_x2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_y2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wait = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_wait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.TrafficLightBBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.TrafficLightBBox)
  return false;
#undef DO_
}

void TrafficLightBBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.TrafficLightBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }

  // optional int32 y1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }

  // optional int32 x2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }

  // optional int32 y2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }

  // optional bool is_wait = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_wait(), output);
  }

  // optional int32 depth = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.TrafficLightBBox)
}

::google::protobuf::uint8* TrafficLightBBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.TrafficLightBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x1(), target);
  }

  // optional int32 y1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y1(), target);
  }

  // optional int32 x2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x2(), target);
  }

  // optional int32 y2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y2(), target);
  }

  // optional bool is_wait = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_wait(), target);
  }

  // optional int32 depth = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.TrafficLightBBox)
  return target;
}

size_t TrafficLightBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.TrafficLightBBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 x1 = 1;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }

    // optional int32 y1 = 2;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }

    // optional int32 x2 = 3;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x2());
    }

    // optional int32 y2 = 4;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y2());
    }

    // optional bool is_wait = 5 [default = false];
    if (has_is_wait()) {
      total_size += 1 + 1;
    }

    // optional int32 depth = 6;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightBBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.TrafficLightBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightBBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightBBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.TrafficLightBBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.TrafficLightBBox)
    MergeFrom(*source);
  }
}

void TrafficLightBBox::MergeFrom(const TrafficLightBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.TrafficLightBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      x1_ = from.x1_;
    }
    if (cached_has_bits & 0x00000002u) {
      y1_ = from.y1_;
    }
    if (cached_has_bits & 0x00000004u) {
      x2_ = from.x2_;
    }
    if (cached_has_bits & 0x00000008u) {
      y2_ = from.y2_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wait_ = from.is_wait_;
    }
    if (cached_has_bits & 0x00000020u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightBBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.TrafficLightBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightBBox::CopyFrom(const TrafficLightBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.TrafficLightBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightBBox::IsInitialized() const {
  return true;
}

void TrafficLightBBox::Swap(TrafficLightBBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightBBox::InternalSwap(TrafficLightBBox* other) {
  std::swap(x1_, other->x1_);
  std::swap(y1_, other->y1_);
  std::swap(x2_, other->x2_);
  std::swap(y2_, other->y2_);
  std::swap(is_wait_, other->is_wait_);
  std::swap(depth_, other->depth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightBBox::GetMetadata() const {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightBBox

// optional int32 x1 = 1;
bool TrafficLightBBox::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightBBox::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightBBox::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightBBox::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
::google::protobuf::int32 TrafficLightBBox::x1() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightBBox.x1)
  return x1_;
}
void TrafficLightBBox::set_x1(::google::protobuf::int32 value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightBBox.x1)
}

// optional int32 y1 = 2;
bool TrafficLightBBox::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightBBox::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightBBox::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightBBox::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
::google::protobuf::int32 TrafficLightBBox::y1() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightBBox.y1)
  return y1_;
}
void TrafficLightBBox::set_y1(::google::protobuf::int32 value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightBBox.y1)
}

// optional int32 x2 = 3;
bool TrafficLightBBox::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightBBox::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightBBox::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightBBox::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
::google::protobuf::int32 TrafficLightBBox::x2() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightBBox.x2)
  return x2_;
}
void TrafficLightBBox::set_x2(::google::protobuf::int32 value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightBBox.x2)
}

// optional int32 y2 = 4;
bool TrafficLightBBox::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightBBox::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightBBox::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightBBox::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
::google::protobuf::int32 TrafficLightBBox::y2() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightBBox.y2)
  return y2_;
}
void TrafficLightBBox::set_y2(::google::protobuf::int32 value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightBBox.y2)
}

// optional int32 depth = 6;
bool TrafficLightBBox::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLightBBox::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLightBBox::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLightBBox::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
::google::protobuf::int32 TrafficLightBBox::depth() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightBBox.depth)
  return depth_;
}
void TrafficLightBBox::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightBBox.depth)
}

// optional bool is_wait = 5 [default = false];
bool TrafficLightBBox::has_is_wait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightBBox::set_has_is_wait() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightBBox::clear_has_is_wait() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightBBox::clear_is_wait() {
  is_wait_ = false;
  clear_has_is_wait();
}
bool TrafficLightBBox::is_wait() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightBBox.is_wait)
  return is_wait_;
}
void TrafficLightBBox::set_is_wait(bool value) {
  set_has_is_wait();
  is_wait_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightBBox.is_wait)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kConfidenceFieldNumber;
const int TrafficLight::kTrackingTimeFieldNumber;
const int TrafficLight::kBlinkFieldNumber;
const int TrafficLight::kRemainingTimeFieldNumber;
const int TrafficLight::kCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trafficlight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_center()) {
    center_ = new ::COWA::NavMsg::PoseStamped(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.TrafficLight)
}

void TrafficLight::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, reinterpret_cast<char*>(&remaining_time_) -
    reinterpret_cast<char*>(&center_) + sizeof(remaining_time_));
  confidence_ = 1;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete center_;
  }
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  protobuf_trafficlight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.TrafficLight)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_center()) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->::COWA::NavMsg::PoseStamped::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&color_, 0, reinterpret_cast<char*>(&remaining_time_) -
      reinterpret_cast<char*>(&color_) + sizeof(remaining_time_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.NavMsg.TrafficLight.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::COWA::NavMsg::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_blink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double remaining_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_remaining_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remaining_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.PoseStamped center = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional bytes id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blink(), output);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->remaining_time(), output);
  }

  // optional .COWA.NavMsg.PoseStamped center = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->center_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional bytes id = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->remaining_time(), target);
  }

  // optional .COWA.NavMsg.PoseStamped center = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->center_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional .COWA.NavMsg.PoseStamped center = 7;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->center_);
    }

    // optional .COWA.NavMsg.TrafficLight.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool blink = 5;
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (has_remaining_time()) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_center()->::COWA::NavMsg::PoseStamped::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000010u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      remaining_time_ = from.remaining_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  id_.Swap(&other->id_);
  std::swap(center_, other->center_);
  std::swap(color_, other->color_);
  std::swap(blink_, other->blink_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(remaining_time_, other->remaining_time_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// optional .COWA.NavMsg.TrafficLight.Color color = 1;
bool TrafficLight::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight::clear_color() {
  color_ = 0;
  clear_has_color();
}
::COWA::NavMsg::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.color)
  return static_cast< ::COWA::NavMsg::TrafficLight_Color >(color_);
}
void TrafficLight::set_color(::COWA::NavMsg::TrafficLight_Color value) {
  assert(::COWA::NavMsg::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight.color)
}

// optional bytes id = 2;
bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.id)
  return id_.GetNoArena();
}
void TrafficLight::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight.id)
}
#if LANG_CXX11
void TrafficLight::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.NavMsg.TrafficLight.id)
}
#endif
void TrafficLight::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.TrafficLight.id)
}
void TrafficLight::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.TrafficLight.id)
}
::std::string* TrafficLight::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.TrafficLight.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.TrafficLight.id)
}

// optional double confidence = 3 [default = 1];
bool TrafficLight::has_confidence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrafficLight::set_has_confidence() {
  _has_bits_[0] |= 0x00000040u;
}
void TrafficLight::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrafficLight::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
double TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.confidence)
  return confidence_;
}
void TrafficLight::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight.confidence)
}

// optional double tracking_time = 4;
bool TrafficLight::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLight::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLight::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.tracking_time)
  return tracking_time_;
}
void TrafficLight::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight.tracking_time)
}

// optional bool blink = 5;
bool TrafficLight::has_blink() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLight::set_has_blink() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLight::clear_has_blink() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLight::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
bool TrafficLight::blink() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.blink)
  return blink_;
}
void TrafficLight::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight.blink)
}

// optional double remaining_time = 6;
bool TrafficLight::has_remaining_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLight::set_has_remaining_time() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLight::clear_has_remaining_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLight::clear_remaining_time() {
  remaining_time_ = 0;
  clear_has_remaining_time();
}
double TrafficLight::remaining_time() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.remaining_time)
  return remaining_time_;
}
void TrafficLight::set_remaining_time(double value) {
  set_has_remaining_time();
  remaining_time_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight.remaining_time)
}

// optional .COWA.NavMsg.PoseStamped center = 7;
bool TrafficLight::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight::clear_center() {
  if (center_ != NULL) center_->::COWA::NavMsg::PoseStamped::Clear();
  clear_has_center();
}
const ::COWA::NavMsg::PoseStamped& TrafficLight::center() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight.center)
  return center_ != NULL ? *center_
                         : *::COWA::NavMsg::PoseStamped::internal_default_instance();
}
::COWA::NavMsg::PoseStamped* TrafficLight::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    center_ = new ::COWA::NavMsg::PoseStamped;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLight.center)
  return center_;
}
::COWA::NavMsg::PoseStamped* TrafficLight::release_center() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.TrafficLight.center)
  clear_has_center();
  ::COWA::NavMsg::PoseStamped* temp = center_;
  center_ = NULL;
  return temp;
}
void TrafficLight::set_allocated_center(::COWA::NavMsg::PoseStamped* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.TrafficLight.center)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetection::kTimestampFieldNumber;
const int TrafficLightDetection::kSequenceFieldNumber;
const int TrafficLightDetection::kTrafficLightFieldNumber;
const int TrafficLightDetection::kCameraIdFieldNumber;
const int TrafficLightDetection::kRoiDetectedFieldNumber;
const int TrafficLightDetection::kVehiclePoseFieldNumber;
const int TrafficLightDetection::kSignalIdFieldNumber;
const int TrafficLightDetection::kLatencyMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetection::TrafficLightDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trafficlight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.TrafficLightDetection)
}
TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      traffic_light_(from.traffic_light_),
      roi_detected_(from.roi_detected_),
      signal_id_(from.signal_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_id()) {
    camera_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_id_);
  }
  if (from.has_vehicle_pose()) {
    vehicle_pose_ = new ::COWA::NavMsg::PoseStamped(*from.vehicle_pose_);
  } else {
    vehicle_pose_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
  _cached_size_ = 0;
  camera_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vehicle_pose_, 0, reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&vehicle_pose_) + sizeof(latency_ms_));
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  camera_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete vehicle_pose_;
  }
}

void TrafficLightDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDetection::descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDetection& TrafficLightDetection::default_instance() {
  protobuf_trafficlight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightDetection* TrafficLightDetection::New(::google::protobuf::Arena* arena) const {
  TrafficLightDetection* n = new TrafficLightDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.TrafficLightDetection)
  traffic_light_.Clear();
  roi_detected_.Clear();
  signal_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_camera_id()) {
      GOOGLE_DCHECK(!camera_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*camera_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_vehicle_pose()) {
      GOOGLE_DCHECK(vehicle_pose_ != NULL);
      vehicle_pose_->::COWA::NavMsg::PoseStamped::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(latency_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.TrafficLightDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.TrafficLight traffic_light = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes camera_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_camera_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.TrafficLightBBox roi_detected = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roi_detected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.PoseStamped vehicle_pose = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes signal_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_signal_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_latency_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.TrafficLightDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.TrafficLightDetection)
  return false;
#undef DO_
}

void TrafficLightDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // repeated .COWA.NavMsg.TrafficLight traffic_light = 3;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->traffic_light(i), output);
  }

  // optional bytes camera_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->camera_id(), output);
  }

  // repeated .COWA.NavMsg.TrafficLightBBox roi_detected = 5;
  for (unsigned int i = 0, n = this->roi_detected_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roi_detected(i), output);
  }

  // optional .COWA.NavMsg.PoseStamped vehicle_pose = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vehicle_pose_, output);
  }

  // repeated bytes signal_id = 7;
  for (int i = 0, n = this->signal_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->signal_id(i), output);
  }

  // optional int32 latency_ms = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->latency_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.TrafficLightDetection)
}

::google::protobuf::uint8* TrafficLightDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // repeated .COWA.NavMsg.TrafficLight traffic_light = 3;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->traffic_light(i), deterministic, target);
  }

  // optional bytes camera_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->camera_id(), target);
  }

  // repeated .COWA.NavMsg.TrafficLightBBox roi_detected = 5;
  for (unsigned int i = 0, n = this->roi_detected_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->roi_detected(i), deterministic, target);
  }

  // optional .COWA.NavMsg.PoseStamped vehicle_pose = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->vehicle_pose_, deterministic, target);
  }

  // repeated bytes signal_id = 7;
  for (int i = 0, n = this->signal_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->signal_id(i), target);
  }

  // optional int32 latency_ms = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->latency_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.TrafficLightDetection)
  return target;
}

size_t TrafficLightDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.TrafficLightDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.TrafficLight traffic_light = 3;
  {
    unsigned int count = this->traffic_light_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_light(i));
    }
  }

  // repeated .COWA.NavMsg.TrafficLightBBox roi_detected = 5;
  {
    unsigned int count = this->roi_detected_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi_detected(i));
    }
  }

  // repeated bytes signal_id = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signal_id_size());
  for (int i = 0, n = this->signal_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->signal_id(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes camera_id = 4;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->camera_id());
    }

    // optional .COWA.NavMsg.PoseStamped vehicle_pose = 6;
    if (has_vehicle_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_pose_);
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional int32 latency_ms = 8;
    if (has_latency_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.TrafficLightDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  roi_detected_.MergeFrom(from.roi_detected_);
  signal_id_.MergeFrom(from.signal_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_camera_id();
      camera_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vehicle_pose()->::COWA::NavMsg::PoseStamped::MergeFrom(from.vehicle_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {
  return true;
}

void TrafficLightDetection::Swap(TrafficLightDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  traffic_light_.InternalSwap(&other->traffic_light_);
  roi_detected_.InternalSwap(&other->roi_detected_);
  signal_id_.InternalSwap(&other->signal_id_);
  camera_id_.Swap(&other->camera_id_);
  std::swap(vehicle_pose_, other->vehicle_pose_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequence_, other->sequence_);
  std::swap(latency_ms_, other->latency_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDetection::GetMetadata() const {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDetection

// optional uint64 timestamp = 1;
bool TrafficLightDetection::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightDetection::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightDetection::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightDetection::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 TrafficLightDetection::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.timestamp)
  return timestamp_;
}
void TrafficLightDetection::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightDetection.timestamp)
}

// optional uint32 sequence = 2;
bool TrafficLightDetection::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightDetection::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightDetection::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightDetection::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 TrafficLightDetection::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.sequence)
  return sequence_;
}
void TrafficLightDetection::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightDetection.sequence)
}

// repeated .COWA.NavMsg.TrafficLight traffic_light = 3;
int TrafficLightDetection::traffic_light_size() const {
  return traffic_light_.size();
}
void TrafficLightDetection::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::COWA::NavMsg::TrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.traffic_light)
  return traffic_light_.Get(index);
}
::COWA::NavMsg::TrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLightDetection.traffic_light)
  return traffic_light_.Mutable(index);
}
::COWA::NavMsg::TrafficLight* TrafficLightDetection::add_traffic_light() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.TrafficLightDetection.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.TrafficLightDetection.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.TrafficLightDetection.traffic_light)
  return traffic_light_;
}

// optional bytes camera_id = 4;
bool TrafficLightDetection::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightDetection::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightDetection::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightDetection::clear_camera_id() {
  camera_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_id();
}
const ::std::string& TrafficLightDetection::camera_id() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.camera_id)
  return camera_id_.GetNoArena();
}
void TrafficLightDetection::set_camera_id(const ::std::string& value) {
  set_has_camera_id();
  camera_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightDetection.camera_id)
}
#if LANG_CXX11
void TrafficLightDetection::set_camera_id(::std::string&& value) {
  set_has_camera_id();
  camera_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.NavMsg.TrafficLightDetection.camera_id)
}
#endif
void TrafficLightDetection::set_camera_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_camera_id();
  camera_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.TrafficLightDetection.camera_id)
}
void TrafficLightDetection::set_camera_id(const void* value, size_t size) {
  set_has_camera_id();
  camera_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.TrafficLightDetection.camera_id)
}
::std::string* TrafficLightDetection::mutable_camera_id() {
  set_has_camera_id();
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLightDetection.camera_id)
  return camera_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLightDetection::release_camera_id() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.TrafficLightDetection.camera_id)
  clear_has_camera_id();
  return camera_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLightDetection::set_allocated_camera_id(::std::string* camera_id) {
  if (camera_id != NULL) {
    set_has_camera_id();
  } else {
    clear_has_camera_id();
  }
  camera_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_id);
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.TrafficLightDetection.camera_id)
}

// repeated .COWA.NavMsg.TrafficLightBBox roi_detected = 5;
int TrafficLightDetection::roi_detected_size() const {
  return roi_detected_.size();
}
void TrafficLightDetection::clear_roi_detected() {
  roi_detected_.Clear();
}
const ::COWA::NavMsg::TrafficLightBBox& TrafficLightDetection::roi_detected(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.roi_detected)
  return roi_detected_.Get(index);
}
::COWA::NavMsg::TrafficLightBBox* TrafficLightDetection::mutable_roi_detected(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLightDetection.roi_detected)
  return roi_detected_.Mutable(index);
}
::COWA::NavMsg::TrafficLightBBox* TrafficLightDetection::add_roi_detected() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.TrafficLightDetection.roi_detected)
  return roi_detected_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLightBBox >*
TrafficLightDetection::mutable_roi_detected() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.TrafficLightDetection.roi_detected)
  return &roi_detected_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLightBBox >&
TrafficLightDetection::roi_detected() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.TrafficLightDetection.roi_detected)
  return roi_detected_;
}

// optional .COWA.NavMsg.PoseStamped vehicle_pose = 6;
bool TrafficLightDetection::has_vehicle_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightDetection::set_has_vehicle_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightDetection::clear_has_vehicle_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightDetection::clear_vehicle_pose() {
  if (vehicle_pose_ != NULL) vehicle_pose_->::COWA::NavMsg::PoseStamped::Clear();
  clear_has_vehicle_pose();
}
const ::COWA::NavMsg::PoseStamped& TrafficLightDetection::vehicle_pose() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.vehicle_pose)
  return vehicle_pose_ != NULL ? *vehicle_pose_
                         : *::COWA::NavMsg::PoseStamped::internal_default_instance();
}
::COWA::NavMsg::PoseStamped* TrafficLightDetection::mutable_vehicle_pose() {
  set_has_vehicle_pose();
  if (vehicle_pose_ == NULL) {
    vehicle_pose_ = new ::COWA::NavMsg::PoseStamped;
  }
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLightDetection.vehicle_pose)
  return vehicle_pose_;
}
::COWA::NavMsg::PoseStamped* TrafficLightDetection::release_vehicle_pose() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.TrafficLightDetection.vehicle_pose)
  clear_has_vehicle_pose();
  ::COWA::NavMsg::PoseStamped* temp = vehicle_pose_;
  vehicle_pose_ = NULL;
  return temp;
}
void TrafficLightDetection::set_allocated_vehicle_pose(::COWA::NavMsg::PoseStamped* vehicle_pose) {
  delete vehicle_pose_;
  vehicle_pose_ = vehicle_pose;
  if (vehicle_pose) {
    set_has_vehicle_pose();
  } else {
    clear_has_vehicle_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.TrafficLightDetection.vehicle_pose)
}

// repeated bytes signal_id = 7;
int TrafficLightDetection::signal_id_size() const {
  return signal_id_.size();
}
void TrafficLightDetection::clear_signal_id() {
  signal_id_.Clear();
}
const ::std::string& TrafficLightDetection::signal_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.signal_id)
  return signal_id_.Get(index);
}
::std::string* TrafficLightDetection::mutable_signal_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLightDetection.signal_id)
  return signal_id_.Mutable(index);
}
void TrafficLightDetection::set_signal_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightDetection.signal_id)
  signal_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TrafficLightDetection::set_signal_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightDetection.signal_id)
  signal_id_.Mutable(index)->assign(std::move(value));
}
#endif
void TrafficLightDetection::set_signal_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  signal_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.TrafficLightDetection.signal_id)
}
void TrafficLightDetection::set_signal_id(int index, const void* value, size_t size) {
  signal_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.TrafficLightDetection.signal_id)
}
::std::string* TrafficLightDetection::add_signal_id() {
  // @@protoc_insertion_point(field_add_mutable:COWA.NavMsg.TrafficLightDetection.signal_id)
  return signal_id_.Add();
}
void TrafficLightDetection::add_signal_id(const ::std::string& value) {
  signal_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:COWA.NavMsg.TrafficLightDetection.signal_id)
}
#if LANG_CXX11
void TrafficLightDetection::add_signal_id(::std::string&& value) {
  signal_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:COWA.NavMsg.TrafficLightDetection.signal_id)
}
#endif
void TrafficLightDetection::add_signal_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  signal_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:COWA.NavMsg.TrafficLightDetection.signal_id)
}
void TrafficLightDetection::add_signal_id(const void* value, size_t size) {
  signal_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:COWA.NavMsg.TrafficLightDetection.signal_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficLightDetection::signal_id() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.TrafficLightDetection.signal_id)
  return signal_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficLightDetection::mutable_signal_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.TrafficLightDetection.signal_id)
  return &signal_id_;
}

// optional int32 latency_ms = 8;
bool TrafficLightDetection::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightDetection::set_has_latency_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightDetection::clear_has_latency_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightDetection::clear_latency_ms() {
  latency_ms_ = 0;
  clear_has_latency_ms();
}
::google::protobuf::int32 TrafficLightDetection::latency_ms() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLightDetection.latency_ms)
  return latency_ms_;
}
void TrafficLightDetection::set_latency_ms(::google::protobuf::int32 value) {
  set_has_latency_ms();
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLightDetection.latency_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight2_Item::kDirFieldNumber;
const int TrafficLight2_Item::kStateFieldNumber;
const int TrafficLight2_Item::kRemainingFieldNumber;
const int TrafficLight2_Item::kBlinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight2_Item::TrafficLight2_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trafficlight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.TrafficLight2.Item)
}
TrafficLight2_Item::TrafficLight2_Item(const TrafficLight2_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remaining_, &from.remaining_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&remaining_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.TrafficLight2.Item)
}

void TrafficLight2_Item::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&remaining_, 0, reinterpret_cast<char*>(&blink_) -
    reinterpret_cast<char*>(&remaining_) + sizeof(blink_));
  dir_ = 1;
  state_ = 1;
}

TrafficLight2_Item::~TrafficLight2_Item() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.TrafficLight2.Item)
  SharedDtor();
}

void TrafficLight2_Item::SharedDtor() {
}

void TrafficLight2_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight2_Item::descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight2_Item& TrafficLight2_Item::default_instance() {
  protobuf_trafficlight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight2_Item* TrafficLight2_Item::New(::google::protobuf::Arena* arena) const {
  TrafficLight2_Item* n = new TrafficLight2_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight2_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.TrafficLight2.Item)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&remaining_, 0, reinterpret_cast<char*>(&blink_) -
      reinterpret_cast<char*>(&remaining_) + sizeof(blink_));
    dir_ = 1;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLight2_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.TrafficLight2.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.NavMsg.TrafficLight2.Direction dir = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::TrafficLight2_Direction_IsValid(value)) {
            set_dir(static_cast< ::COWA::NavMsg::TrafficLight2_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.TrafficLight2.State state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::NavMsg::TrafficLight2_State_IsValid(value)) {
            set_state(static_cast< ::COWA::NavMsg::TrafficLight2_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float remaining = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blink = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_blink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.TrafficLight2.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.TrafficLight2.Item)
  return false;
#undef DO_
}

void TrafficLight2_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.TrafficLight2.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.TrafficLight2.Direction dir = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dir(), output);
  }

  // optional .COWA.NavMsg.TrafficLight2.State state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional float remaining = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->remaining(), output);
  }

  // optional bool blink = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blink(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.TrafficLight2.Item)
}

::google::protobuf::uint8* TrafficLight2_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.TrafficLight2.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.NavMsg.TrafficLight2.Direction dir = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dir(), target);
  }

  // optional .COWA.NavMsg.TrafficLight2.State state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional float remaining = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->remaining(), target);
  }

  // optional bool blink = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blink(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.TrafficLight2.Item)
  return target;
}

size_t TrafficLight2_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.TrafficLight2.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float remaining = 3;
    if (has_remaining()) {
      total_size += 1 + 4;
    }

    // optional bool blink = 4;
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional .COWA.NavMsg.TrafficLight2.Direction dir = 1;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional .COWA.NavMsg.TrafficLight2.State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight2_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.TrafficLight2.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight2_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight2_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.TrafficLight2.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.TrafficLight2.Item)
    MergeFrom(*source);
  }
}

void TrafficLight2_Item::MergeFrom(const TrafficLight2_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.TrafficLight2.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      remaining_ = from.remaining_;
    }
    if (cached_has_bits & 0x00000002u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000004u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight2_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.TrafficLight2.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight2_Item::CopyFrom(const TrafficLight2_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.TrafficLight2.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight2_Item::IsInitialized() const {
  return true;
}

void TrafficLight2_Item::Swap(TrafficLight2_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight2_Item::InternalSwap(TrafficLight2_Item* other) {
  std::swap(remaining_, other->remaining_);
  std::swap(blink_, other->blink_);
  std::swap(dir_, other->dir_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight2_Item::GetMetadata() const {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight2_Item

// optional .COWA.NavMsg.TrafficLight2.Direction dir = 1;
bool TrafficLight2_Item::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight2_Item::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight2_Item::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight2_Item::clear_dir() {
  dir_ = 1;
  clear_has_dir();
}
::COWA::NavMsg::TrafficLight2_Direction TrafficLight2_Item::dir() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.Item.dir)
  return static_cast< ::COWA::NavMsg::TrafficLight2_Direction >(dir_);
}
void TrafficLight2_Item::set_dir(::COWA::NavMsg::TrafficLight2_Direction value) {
  assert(::COWA::NavMsg::TrafficLight2_Direction_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.Item.dir)
}

// optional .COWA.NavMsg.TrafficLight2.State state = 2;
bool TrafficLight2_Item::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLight2_Item::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLight2_Item::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLight2_Item::clear_state() {
  state_ = 1;
  clear_has_state();
}
::COWA::NavMsg::TrafficLight2_State TrafficLight2_Item::state() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.Item.state)
  return static_cast< ::COWA::NavMsg::TrafficLight2_State >(state_);
}
void TrafficLight2_Item::set_state(::COWA::NavMsg::TrafficLight2_State value) {
  assert(::COWA::NavMsg::TrafficLight2_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.Item.state)
}

// optional float remaining = 3;
bool TrafficLight2_Item::has_remaining() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight2_Item::set_has_remaining() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight2_Item::clear_has_remaining() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight2_Item::clear_remaining() {
  remaining_ = 0;
  clear_has_remaining();
}
float TrafficLight2_Item::remaining() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.Item.remaining)
  return remaining_;
}
void TrafficLight2_Item::set_remaining(float value) {
  set_has_remaining();
  remaining_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.Item.remaining)
}

// optional bool blink = 4;
bool TrafficLight2_Item::has_blink() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight2_Item::set_has_blink() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight2_Item::clear_has_blink() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight2_Item::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
bool TrafficLight2_Item::blink() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.Item.blink)
  return blink_;
}
void TrafficLight2_Item::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.Item.blink)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight2::kTimestampFieldNumber;
const int TrafficLight2::kSequenceFieldNumber;
const int TrafficLight2::kLightsFieldNumber;
const int TrafficLight2::kCrossroadIdFieldNumber;
const int TrafficLight2::kYawFieldNumber;
const int TrafficLight2::kDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight2::TrafficLight2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trafficlight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.NavMsg.TrafficLight2)
}
TrafficLight2::TrafficLight2(const TrafficLight2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lights_(from.lights_),
      detected_(from.detected_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crossroad_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_crossroad_id()) {
    crossroad_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crossroad_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:COWA.NavMsg.TrafficLight2)
}

void TrafficLight2::SharedCtor() {
  _cached_size_ = 0;
  crossroad_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(yaw_));
}

TrafficLight2::~TrafficLight2() {
  // @@protoc_insertion_point(destructor:COWA.NavMsg.TrafficLight2)
  SharedDtor();
}

void TrafficLight2::SharedDtor() {
  crossroad_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight2::descriptor() {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight2& TrafficLight2::default_instance() {
  protobuf_trafficlight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight2* TrafficLight2::New(::google::protobuf::Arena* arena) const {
  TrafficLight2* n = new TrafficLight2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight2::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.NavMsg.TrafficLight2)
  lights_.Clear();
  detected_.Clear();
  if (has_crossroad_id()) {
    GOOGLE_DCHECK(!crossroad_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*crossroad_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLight2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.NavMsg.TrafficLight2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.TrafficLight2.Item lights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string crossroad_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crossroad_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crossroad_id().data(), this->crossroad_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "COWA.NavMsg.TrafficLight2.crossroad_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.NavMsg.TrafficLightBBox detected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.NavMsg.TrafficLight2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.NavMsg.TrafficLight2)
  return false;
#undef DO_
}

void TrafficLight2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.NavMsg.TrafficLight2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // repeated .COWA.NavMsg.TrafficLight2.Item lights = 3;
  for (unsigned int i = 0, n = this->lights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lights(i), output);
  }

  // optional string crossroad_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crossroad_id().data(), this->crossroad_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.NavMsg.TrafficLight2.crossroad_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->crossroad_id(), output);
  }

  // optional float yaw = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaw(), output);
  }

  // repeated .COWA.NavMsg.TrafficLightBBox detected = 6;
  for (unsigned int i = 0, n = this->detected_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->detected(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.NavMsg.TrafficLight2)
}

::google::protobuf::uint8* TrafficLight2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.NavMsg.TrafficLight2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // repeated .COWA.NavMsg.TrafficLight2.Item lights = 3;
  for (unsigned int i = 0, n = this->lights_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->lights(i), deterministic, target);
  }

  // optional string crossroad_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crossroad_id().data(), this->crossroad_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.NavMsg.TrafficLight2.crossroad_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->crossroad_id(), target);
  }

  // optional float yaw = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yaw(), target);
  }

  // repeated .COWA.NavMsg.TrafficLightBBox detected = 6;
  for (unsigned int i = 0, n = this->detected_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->detected(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.NavMsg.TrafficLight2)
  return target;
}

size_t TrafficLight2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.NavMsg.TrafficLight2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.NavMsg.TrafficLight2.Item lights = 3;
  {
    unsigned int count = this->lights_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lights(i));
    }
  }

  // repeated .COWA.NavMsg.TrafficLightBBox detected = 6;
  {
    unsigned int count = this->detected_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detected(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string crossroad_id = 4;
    if (has_crossroad_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crossroad_id());
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional float yaw = 5;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.NavMsg.TrafficLight2)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.NavMsg.TrafficLight2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.NavMsg.TrafficLight2)
    MergeFrom(*source);
  }
}

void TrafficLight2::MergeFrom(const TrafficLight2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.NavMsg.TrafficLight2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_.MergeFrom(from.lights_);
  detected_.MergeFrom(from.detected_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_crossroad_id();
      crossroad_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crossroad_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.NavMsg.TrafficLight2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight2::CopyFrom(const TrafficLight2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.NavMsg.TrafficLight2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight2::IsInitialized() const {
  return true;
}

void TrafficLight2::Swap(TrafficLight2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight2::InternalSwap(TrafficLight2* other) {
  lights_.InternalSwap(&other->lights_);
  detected_.InternalSwap(&other->detected_);
  crossroad_id_.Swap(&other->crossroad_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequence_, other->sequence_);
  std::swap(yaw_, other->yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight2::GetMetadata() const {
  protobuf_trafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight2

// optional uint64 timestamp = 1;
bool TrafficLight2::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight2::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight2::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight2::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 TrafficLight2::timestamp() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.timestamp)
  return timestamp_;
}
void TrafficLight2::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.timestamp)
}

// optional uint32 sequence = 2;
bool TrafficLight2::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight2::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight2::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight2::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 TrafficLight2::sequence() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.sequence)
  return sequence_;
}
void TrafficLight2::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.sequence)
}

// repeated .COWA.NavMsg.TrafficLight2.Item lights = 3;
int TrafficLight2::lights_size() const {
  return lights_.size();
}
void TrafficLight2::clear_lights() {
  lights_.Clear();
}
const ::COWA::NavMsg::TrafficLight2_Item& TrafficLight2::lights(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.lights)
  return lights_.Get(index);
}
::COWA::NavMsg::TrafficLight2_Item* TrafficLight2::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLight2.lights)
  return lights_.Mutable(index);
}
::COWA::NavMsg::TrafficLight2_Item* TrafficLight2::add_lights() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.TrafficLight2.lights)
  return lights_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLight2_Item >*
TrafficLight2::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.TrafficLight2.lights)
  return &lights_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLight2_Item >&
TrafficLight2::lights() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.TrafficLight2.lights)
  return lights_;
}

// optional string crossroad_id = 4;
bool TrafficLight2::has_crossroad_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight2::set_has_crossroad_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight2::clear_has_crossroad_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight2::clear_crossroad_id() {
  crossroad_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crossroad_id();
}
const ::std::string& TrafficLight2::crossroad_id() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.crossroad_id)
  return crossroad_id_.GetNoArena();
}
void TrafficLight2::set_crossroad_id(const ::std::string& value) {
  set_has_crossroad_id();
  crossroad_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.crossroad_id)
}
#if LANG_CXX11
void TrafficLight2::set_crossroad_id(::std::string&& value) {
  set_has_crossroad_id();
  crossroad_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.NavMsg.TrafficLight2.crossroad_id)
}
#endif
void TrafficLight2::set_crossroad_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crossroad_id();
  crossroad_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.NavMsg.TrafficLight2.crossroad_id)
}
void TrafficLight2::set_crossroad_id(const char* value, size_t size) {
  set_has_crossroad_id();
  crossroad_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.NavMsg.TrafficLight2.crossroad_id)
}
::std::string* TrafficLight2::mutable_crossroad_id() {
  set_has_crossroad_id();
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLight2.crossroad_id)
  return crossroad_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLight2::release_crossroad_id() {
  // @@protoc_insertion_point(field_release:COWA.NavMsg.TrafficLight2.crossroad_id)
  clear_has_crossroad_id();
  return crossroad_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLight2::set_allocated_crossroad_id(::std::string* crossroad_id) {
  if (crossroad_id != NULL) {
    set_has_crossroad_id();
  } else {
    clear_has_crossroad_id();
  }
  crossroad_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crossroad_id);
  // @@protoc_insertion_point(field_set_allocated:COWA.NavMsg.TrafficLight2.crossroad_id)
}

// optional float yaw = 5;
bool TrafficLight2::has_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLight2::set_has_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLight2::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLight2::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
float TrafficLight2::yaw() const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.yaw)
  return yaw_;
}
void TrafficLight2::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:COWA.NavMsg.TrafficLight2.yaw)
}

// repeated .COWA.NavMsg.TrafficLightBBox detected = 6;
int TrafficLight2::detected_size() const {
  return detected_.size();
}
void TrafficLight2::clear_detected() {
  detected_.Clear();
}
const ::COWA::NavMsg::TrafficLightBBox& TrafficLight2::detected(int index) const {
  // @@protoc_insertion_point(field_get:COWA.NavMsg.TrafficLight2.detected)
  return detected_.Get(index);
}
::COWA::NavMsg::TrafficLightBBox* TrafficLight2::mutable_detected(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.NavMsg.TrafficLight2.detected)
  return detected_.Mutable(index);
}
::COWA::NavMsg::TrafficLightBBox* TrafficLight2::add_detected() {
  // @@protoc_insertion_point(field_add:COWA.NavMsg.TrafficLight2.detected)
  return detected_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLightBBox >*
TrafficLight2::mutable_detected() {
  // @@protoc_insertion_point(field_mutable_list:COWA.NavMsg.TrafficLight2.detected)
  return &detected_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::NavMsg::TrafficLightBBox >&
TrafficLight2::detected() const {
  // @@protoc_insertion_point(field_list:COWA.NavMsg.TrafficLight2.detected)
  return detected_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NavMsg
}  // namespace COWA

// @@protoc_insertion_point(global_scope)
