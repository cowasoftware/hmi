// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_base_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hmi_base_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hmi {
class IDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ID> {
} _ID_default_instance_;
class LaneInfoTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneInfoType> {
} _LaneInfoType_default_instance_;
class BaseInfoDataTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseInfoDataType> {
} _BaseInfoDataType_default_instance_;

namespace protobuf_hmi_5fbase_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ID, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, crossroad_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, crosswalk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneInfoType, signal_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, pose_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, trajectory_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, obstacles_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, trafficlight2_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, vehicle_drive_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfoDataType, lane_info_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ID)},
  { 7, 17, sizeof(LaneInfoType)},
  { 22, 34, sizeof(BaseInfoDataType)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneInfoType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseInfoDataType_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hmi_base_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _ID_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LaneInfoType_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BaseInfoDataType_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::COWA::NavMsg::protobuf_pose_2eproto::InitDefaults();
  ::COWA::NavMsg::protobuf_obstacle_2eproto::InitDefaults();
  ::COWA::NavMsg::protobuf_trafficlight_2eproto::InitDefaults();
  ::COWA::NavMsg::protobuf_trajectory_2eproto::InitDefaults();
  ::COWA::NavMsg::protobuf_chassis_2eproto::InitDefaults();
  _ID_default_instance_.DefaultConstruct();
  _LaneInfoType_default_instance_.DefaultConstruct();
  _BaseInfoDataType_default_instance_.DefaultConstruct();
  _BaseInfoDataType_default_instance_.get_mutable()->pose_info_ = const_cast< ::COWA::NavMsg::PoseStamped*>(
      ::COWA::NavMsg::PoseStamped::internal_default_instance());
  _BaseInfoDataType_default_instance_.get_mutable()->trajectory_info_ = const_cast< ::COWA::NavMsg::Trajectory*>(
      ::COWA::NavMsg::Trajectory::internal_default_instance());
  _BaseInfoDataType_default_instance_.get_mutable()->obstacles_info_ = const_cast< ::COWA::NavMsg::Obstacles*>(
      ::COWA::NavMsg::Obstacles::internal_default_instance());
  _BaseInfoDataType_default_instance_.get_mutable()->trafficlight2_info_ = const_cast< ::COWA::NavMsg::TrafficLight2*>(
      ::COWA::NavMsg::TrafficLight2::internal_default_instance());
  _BaseInfoDataType_default_instance_.get_mutable()->vehicle_drive_info_ = const_cast< ::COWA::NavMsg::VehicleDrive*>(
      ::COWA::NavMsg::VehicleDrive::internal_default_instance());
  _BaseInfoDataType_default_instance_.get_mutable()->lane_info_ = const_cast< ::hmi::LaneInfoType*>(
      ::hmi::LaneInfoType::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023hmi_base_info.proto\022\003hmi\032\npose.proto\032\016"
      "obstacle.proto\032\022trafficlight.proto\032\020traj"
      "ectory.proto\032\rchassis.proto\"\020\n\002ID\022\n\n\002id\030"
      "\001 \002(\t\"\234\001\n\014LaneInfoType\022\030\n\007lane_id\030\001 \003(\0132"
      "\007.hmi.ID\022\030\n\007road_id\030\002 \003(\0132\007.hmi.ID\022\035\n\014cr"
      "ossroad_id\030\003 \003(\0132\007.hmi.ID\022\035\n\014crosswalk_i"
      "d\030\004 \003(\0132\007.hmi.ID\022\032\n\tsignal_id\030\005 \003(\0132\007.hm"
      "i.ID\"\313\002\n\020BaseInfoDataType\022\023\n\013sequence_id"
      "\030\001 \002(\004\022+\n\tpose_info\030\002 \001(\0132\030.COWA.NavMsg."
      "PoseStamped\0220\n\017trajectory_info\030\003 \001(\0132\027.C"
      "OWA.NavMsg.Trajectory\022.\n\016obstacles_info\030"
      "\004 \001(\0132\026.COWA.NavMsg.Obstacles\0226\n\022traffic"
      "light2_info\030\005 \001(\0132\032.COWA.NavMsg.TrafficL"
      "ight2\0225\n\022vehicle_drive_info\030\006 \001(\0132\031.COWA"
      ".NavMsg.VehicleDrive\022$\n\tlane_info\030\007 \001(\0132"
      "\021.hmi.LaneInfoType"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmi_base_info.proto", &protobuf_RegisterTypes);
  ::COWA::NavMsg::protobuf_pose_2eproto::AddDescriptors();
  ::COWA::NavMsg::protobuf_obstacle_2eproto::AddDescriptors();
  ::COWA::NavMsg::protobuf_trafficlight_2eproto::AddDescriptors();
  ::COWA::NavMsg::protobuf_trajectory_2eproto::AddDescriptors();
  ::COWA::NavMsg::protobuf_chassis_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_hmi_5fbase_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ID::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ID::ID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hmi_5fbase_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmi.ID)
}
ID::ID(const ID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:hmi.ID)
}

void ID::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ID::~ID() {
  // @@protoc_insertion_point(destructor:hmi.ID)
  SharedDtor();
}

void ID::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ID::descriptor() {
  protobuf_hmi_5fbase_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hmi_5fbase_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ID& ID::default_instance() {
  protobuf_hmi_5fbase_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ID* ID::New(::google::protobuf::Arena* arena) const {
  ID* n = new ID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ID::Clear() {
// @@protoc_insertion_point(message_clear_start:hmi.ID)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmi.ID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hmi.ID.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmi.ID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmi.ID)
  return false;
#undef DO_
}

void ID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmi.ID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hmi.ID.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmi.ID)
}

::google::protobuf::uint8* ID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmi.ID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hmi.ID.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmi.ID)
  return target;
}

size_t ID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hmi.ID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmi.ID)
  GOOGLE_DCHECK_NE(&from, this);
  const ID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmi.ID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmi.ID)
    MergeFrom(*source);
  }
}

void ID::MergeFrom(const ID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmi.ID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void ID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmi.ID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ID::CopyFrom(const ID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmi.ID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ID::Swap(ID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ID::InternalSwap(ID* other) {
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ID::GetMetadata() const {
  protobuf_hmi_5fbase_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hmi_5fbase_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ID

// required string id = 1;
bool ID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ID::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ID::id() const {
  // @@protoc_insertion_point(field_get:hmi.ID.id)
  return id_.GetNoArena();
}
void ID::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hmi.ID.id)
}
#if LANG_CXX11
void ID::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hmi.ID.id)
}
#endif
void ID::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hmi.ID.id)
}
void ID::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hmi.ID.id)
}
::std::string* ID::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:hmi.ID.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ID::release_id() {
  // @@protoc_insertion_point(field_release:hmi.ID.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ID::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hmi.ID.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneInfoType::kLaneIdFieldNumber;
const int LaneInfoType::kRoadIdFieldNumber;
const int LaneInfoType::kCrossroadIdFieldNumber;
const int LaneInfoType::kCrosswalkIdFieldNumber;
const int LaneInfoType::kSignalIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneInfoType::LaneInfoType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hmi_5fbase_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmi.LaneInfoType)
}
LaneInfoType::LaneInfoType(const LaneInfoType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_id_(from.lane_id_),
      road_id_(from.road_id_),
      crossroad_id_(from.crossroad_id_),
      crosswalk_id_(from.crosswalk_id_),
      signal_id_(from.signal_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hmi.LaneInfoType)
}

void LaneInfoType::SharedCtor() {
  _cached_size_ = 0;
}

LaneInfoType::~LaneInfoType() {
  // @@protoc_insertion_point(destructor:hmi.LaneInfoType)
  SharedDtor();
}

void LaneInfoType::SharedDtor() {
}

void LaneInfoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneInfoType::descriptor() {
  protobuf_hmi_5fbase_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hmi_5fbase_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneInfoType& LaneInfoType::default_instance() {
  protobuf_hmi_5fbase_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneInfoType* LaneInfoType::New(::google::protobuf::Arena* arena) const {
  LaneInfoType* n = new LaneInfoType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneInfoType::Clear() {
// @@protoc_insertion_point(message_clear_start:hmi.LaneInfoType)
  lane_id_.Clear();
  road_id_.Clear();
  crossroad_id_.Clear();
  crosswalk_id_.Clear();
  signal_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmi.LaneInfoType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hmi.ID lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hmi.ID road_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hmi.ID crossroad_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crossroad_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hmi.ID crosswalk_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosswalk_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hmi.ID signal_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmi.LaneInfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmi.LaneInfoType)
  return false;
#undef DO_
}

void LaneInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmi.LaneInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hmi.ID lane_id = 1;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_id(i), output);
  }

  // repeated .hmi.ID road_id = 2;
  for (unsigned int i = 0, n = this->road_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road_id(i), output);
  }

  // repeated .hmi.ID crossroad_id = 3;
  for (unsigned int i = 0, n = this->crossroad_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->crossroad_id(i), output);
  }

  // repeated .hmi.ID crosswalk_id = 4;
  for (unsigned int i = 0, n = this->crosswalk_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->crosswalk_id(i), output);
  }

  // repeated .hmi.ID signal_id = 5;
  for (unsigned int i = 0, n = this->signal_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signal_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmi.LaneInfoType)
}

::google::protobuf::uint8* LaneInfoType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmi.LaneInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hmi.ID lane_id = 1;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lane_id(i), deterministic, target);
  }

  // repeated .hmi.ID road_id = 2;
  for (unsigned int i = 0, n = this->road_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->road_id(i), deterministic, target);
  }

  // repeated .hmi.ID crossroad_id = 3;
  for (unsigned int i = 0, n = this->crossroad_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->crossroad_id(i), deterministic, target);
  }

  // repeated .hmi.ID crosswalk_id = 4;
  for (unsigned int i = 0, n = this->crosswalk_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->crosswalk_id(i), deterministic, target);
  }

  // repeated .hmi.ID signal_id = 5;
  for (unsigned int i = 0, n = this->signal_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->signal_id(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmi.LaneInfoType)
  return target;
}

size_t LaneInfoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hmi.LaneInfoType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .hmi.ID lane_id = 1;
  {
    unsigned int count = this->lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  // repeated .hmi.ID road_id = 2;
  {
    unsigned int count = this->road_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road_id(i));
    }
  }

  // repeated .hmi.ID crossroad_id = 3;
  {
    unsigned int count = this->crossroad_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossroad_id(i));
    }
  }

  // repeated .hmi.ID crosswalk_id = 4;
  {
    unsigned int count = this->crosswalk_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crosswalk_id(i));
    }
  }

  // repeated .hmi.ID signal_id = 5;
  {
    unsigned int count = this->signal_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_id(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneInfoType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmi.LaneInfoType)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneInfoType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneInfoType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmi.LaneInfoType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmi.LaneInfoType)
    MergeFrom(*source);
  }
}

void LaneInfoType::MergeFrom(const LaneInfoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmi.LaneInfoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  road_id_.MergeFrom(from.road_id_);
  crossroad_id_.MergeFrom(from.crossroad_id_);
  crosswalk_id_.MergeFrom(from.crosswalk_id_);
  signal_id_.MergeFrom(from.signal_id_);
}

void LaneInfoType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmi.LaneInfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneInfoType::CopyFrom(const LaneInfoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmi.LaneInfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneInfoType::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->lane_id())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->road_id())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crossroad_id())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crosswalk_id())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signal_id())) return false;
  return true;
}

void LaneInfoType::Swap(LaneInfoType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneInfoType::InternalSwap(LaneInfoType* other) {
  lane_id_.InternalSwap(&other->lane_id_);
  road_id_.InternalSwap(&other->road_id_);
  crossroad_id_.InternalSwap(&other->crossroad_id_);
  crosswalk_id_.InternalSwap(&other->crosswalk_id_);
  signal_id_.InternalSwap(&other->signal_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneInfoType::GetMetadata() const {
  protobuf_hmi_5fbase_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hmi_5fbase_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneInfoType

// repeated .hmi.ID lane_id = 1;
int LaneInfoType::lane_id_size() const {
  return lane_id_.size();
}
void LaneInfoType::clear_lane_id() {
  lane_id_.Clear();
}
const ::hmi::ID& LaneInfoType::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:hmi.LaneInfoType.lane_id)
  return lane_id_.Get(index);
}
::hmi::ID* LaneInfoType::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:hmi.LaneInfoType.lane_id)
  return lane_id_.Mutable(index);
}
::hmi::ID* LaneInfoType::add_lane_id() {
  // @@protoc_insertion_point(field_add:hmi.LaneInfoType.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::hmi::ID >*
LaneInfoType::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:hmi.LaneInfoType.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::hmi::ID >&
LaneInfoType::lane_id() const {
  // @@protoc_insertion_point(field_list:hmi.LaneInfoType.lane_id)
  return lane_id_;
}

// repeated .hmi.ID road_id = 2;
int LaneInfoType::road_id_size() const {
  return road_id_.size();
}
void LaneInfoType::clear_road_id() {
  road_id_.Clear();
}
const ::hmi::ID& LaneInfoType::road_id(int index) const {
  // @@protoc_insertion_point(field_get:hmi.LaneInfoType.road_id)
  return road_id_.Get(index);
}
::hmi::ID* LaneInfoType::mutable_road_id(int index) {
  // @@protoc_insertion_point(field_mutable:hmi.LaneInfoType.road_id)
  return road_id_.Mutable(index);
}
::hmi::ID* LaneInfoType::add_road_id() {
  // @@protoc_insertion_point(field_add:hmi.LaneInfoType.road_id)
  return road_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::hmi::ID >*
LaneInfoType::mutable_road_id() {
  // @@protoc_insertion_point(field_mutable_list:hmi.LaneInfoType.road_id)
  return &road_id_;
}
const ::google::protobuf::RepeatedPtrField< ::hmi::ID >&
LaneInfoType::road_id() const {
  // @@protoc_insertion_point(field_list:hmi.LaneInfoType.road_id)
  return road_id_;
}

// repeated .hmi.ID crossroad_id = 3;
int LaneInfoType::crossroad_id_size() const {
  return crossroad_id_.size();
}
void LaneInfoType::clear_crossroad_id() {
  crossroad_id_.Clear();
}
const ::hmi::ID& LaneInfoType::crossroad_id(int index) const {
  // @@protoc_insertion_point(field_get:hmi.LaneInfoType.crossroad_id)
  return crossroad_id_.Get(index);
}
::hmi::ID* LaneInfoType::mutable_crossroad_id(int index) {
  // @@protoc_insertion_point(field_mutable:hmi.LaneInfoType.crossroad_id)
  return crossroad_id_.Mutable(index);
}
::hmi::ID* LaneInfoType::add_crossroad_id() {
  // @@protoc_insertion_point(field_add:hmi.LaneInfoType.crossroad_id)
  return crossroad_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::hmi::ID >*
LaneInfoType::mutable_crossroad_id() {
  // @@protoc_insertion_point(field_mutable_list:hmi.LaneInfoType.crossroad_id)
  return &crossroad_id_;
}
const ::google::protobuf::RepeatedPtrField< ::hmi::ID >&
LaneInfoType::crossroad_id() const {
  // @@protoc_insertion_point(field_list:hmi.LaneInfoType.crossroad_id)
  return crossroad_id_;
}

// repeated .hmi.ID crosswalk_id = 4;
int LaneInfoType::crosswalk_id_size() const {
  return crosswalk_id_.size();
}
void LaneInfoType::clear_crosswalk_id() {
  crosswalk_id_.Clear();
}
const ::hmi::ID& LaneInfoType::crosswalk_id(int index) const {
  // @@protoc_insertion_point(field_get:hmi.LaneInfoType.crosswalk_id)
  return crosswalk_id_.Get(index);
}
::hmi::ID* LaneInfoType::mutable_crosswalk_id(int index) {
  // @@protoc_insertion_point(field_mutable:hmi.LaneInfoType.crosswalk_id)
  return crosswalk_id_.Mutable(index);
}
::hmi::ID* LaneInfoType::add_crosswalk_id() {
  // @@protoc_insertion_point(field_add:hmi.LaneInfoType.crosswalk_id)
  return crosswalk_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::hmi::ID >*
LaneInfoType::mutable_crosswalk_id() {
  // @@protoc_insertion_point(field_mutable_list:hmi.LaneInfoType.crosswalk_id)
  return &crosswalk_id_;
}
const ::google::protobuf::RepeatedPtrField< ::hmi::ID >&
LaneInfoType::crosswalk_id() const {
  // @@protoc_insertion_point(field_list:hmi.LaneInfoType.crosswalk_id)
  return crosswalk_id_;
}

// repeated .hmi.ID signal_id = 5;
int LaneInfoType::signal_id_size() const {
  return signal_id_.size();
}
void LaneInfoType::clear_signal_id() {
  signal_id_.Clear();
}
const ::hmi::ID& LaneInfoType::signal_id(int index) const {
  // @@protoc_insertion_point(field_get:hmi.LaneInfoType.signal_id)
  return signal_id_.Get(index);
}
::hmi::ID* LaneInfoType::mutable_signal_id(int index) {
  // @@protoc_insertion_point(field_mutable:hmi.LaneInfoType.signal_id)
  return signal_id_.Mutable(index);
}
::hmi::ID* LaneInfoType::add_signal_id() {
  // @@protoc_insertion_point(field_add:hmi.LaneInfoType.signal_id)
  return signal_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::hmi::ID >*
LaneInfoType::mutable_signal_id() {
  // @@protoc_insertion_point(field_mutable_list:hmi.LaneInfoType.signal_id)
  return &signal_id_;
}
const ::google::protobuf::RepeatedPtrField< ::hmi::ID >&
LaneInfoType::signal_id() const {
  // @@protoc_insertion_point(field_list:hmi.LaneInfoType.signal_id)
  return signal_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseInfoDataType::kSequenceIdFieldNumber;
const int BaseInfoDataType::kPoseInfoFieldNumber;
const int BaseInfoDataType::kTrajectoryInfoFieldNumber;
const int BaseInfoDataType::kObstaclesInfoFieldNumber;
const int BaseInfoDataType::kTrafficlight2InfoFieldNumber;
const int BaseInfoDataType::kVehicleDriveInfoFieldNumber;
const int BaseInfoDataType::kLaneInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseInfoDataType::BaseInfoDataType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hmi_5fbase_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmi.BaseInfoDataType)
}
BaseInfoDataType::BaseInfoDataType(const BaseInfoDataType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose_info()) {
    pose_info_ = new ::COWA::NavMsg::PoseStamped(*from.pose_info_);
  } else {
    pose_info_ = NULL;
  }
  if (from.has_trajectory_info()) {
    trajectory_info_ = new ::COWA::NavMsg::Trajectory(*from.trajectory_info_);
  } else {
    trajectory_info_ = NULL;
  }
  if (from.has_obstacles_info()) {
    obstacles_info_ = new ::COWA::NavMsg::Obstacles(*from.obstacles_info_);
  } else {
    obstacles_info_ = NULL;
  }
  if (from.has_trafficlight2_info()) {
    trafficlight2_info_ = new ::COWA::NavMsg::TrafficLight2(*from.trafficlight2_info_);
  } else {
    trafficlight2_info_ = NULL;
  }
  if (from.has_vehicle_drive_info()) {
    vehicle_drive_info_ = new ::COWA::NavMsg::VehicleDrive(*from.vehicle_drive_info_);
  } else {
    vehicle_drive_info_ = NULL;
  }
  if (from.has_lane_info()) {
    lane_info_ = new ::hmi::LaneInfoType(*from.lane_info_);
  } else {
    lane_info_ = NULL;
  }
  sequence_id_ = from.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:hmi.BaseInfoDataType)
}

void BaseInfoDataType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_info_, 0, reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&pose_info_) + sizeof(sequence_id_));
}

BaseInfoDataType::~BaseInfoDataType() {
  // @@protoc_insertion_point(destructor:hmi.BaseInfoDataType)
  SharedDtor();
}

void BaseInfoDataType::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pose_info_;
  }
  if (this != internal_default_instance()) {
    delete trajectory_info_;
  }
  if (this != internal_default_instance()) {
    delete obstacles_info_;
  }
  if (this != internal_default_instance()) {
    delete trafficlight2_info_;
  }
  if (this != internal_default_instance()) {
    delete vehicle_drive_info_;
  }
  if (this != internal_default_instance()) {
    delete lane_info_;
  }
}

void BaseInfoDataType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseInfoDataType::descriptor() {
  protobuf_hmi_5fbase_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hmi_5fbase_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseInfoDataType& BaseInfoDataType::default_instance() {
  protobuf_hmi_5fbase_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseInfoDataType* BaseInfoDataType::New(::google::protobuf::Arena* arena) const {
  BaseInfoDataType* n = new BaseInfoDataType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseInfoDataType::Clear() {
// @@protoc_insertion_point(message_clear_start:hmi.BaseInfoDataType)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_pose_info()) {
      GOOGLE_DCHECK(pose_info_ != NULL);
      pose_info_->::COWA::NavMsg::PoseStamped::Clear();
    }
    if (has_trajectory_info()) {
      GOOGLE_DCHECK(trajectory_info_ != NULL);
      trajectory_info_->::COWA::NavMsg::Trajectory::Clear();
    }
    if (has_obstacles_info()) {
      GOOGLE_DCHECK(obstacles_info_ != NULL);
      obstacles_info_->::COWA::NavMsg::Obstacles::Clear();
    }
    if (has_trafficlight2_info()) {
      GOOGLE_DCHECK(trafficlight2_info_ != NULL);
      trafficlight2_info_->::COWA::NavMsg::TrafficLight2::Clear();
    }
    if (has_vehicle_drive_info()) {
      GOOGLE_DCHECK(vehicle_drive_info_ != NULL);
      vehicle_drive_info_->::COWA::NavMsg::VehicleDrive::Clear();
    }
    if (has_lane_info()) {
      GOOGLE_DCHECK(lane_info_ != NULL);
      lane_info_->::hmi::LaneInfoType::Clear();
    }
  }
  sequence_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseInfoDataType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmi.BaseInfoDataType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.PoseStamped pose_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Trajectory trajectory_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.Obstacles obstacles_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obstacles_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.TrafficLight2 trafficlight2_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trafficlight2_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.NavMsg.VehicleDrive vehicle_drive_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_drive_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hmi.LaneInfoType lane_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmi.BaseInfoDataType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmi.BaseInfoDataType)
  return false;
#undef DO_
}

void BaseInfoDataType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmi.BaseInfoDataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sequence_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_id(), output);
  }

  // optional .COWA.NavMsg.PoseStamped pose_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_info_, output);
  }

  // optional .COWA.NavMsg.Trajectory trajectory_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trajectory_info_, output);
  }

  // optional .COWA.NavMsg.Obstacles obstacles_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->obstacles_info_, output);
  }

  // optional .COWA.NavMsg.TrafficLight2 trafficlight2_info = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->trafficlight2_info_, output);
  }

  // optional .COWA.NavMsg.VehicleDrive vehicle_drive_info = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vehicle_drive_info_, output);
  }

  // optional .hmi.LaneInfoType lane_info = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->lane_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmi.BaseInfoDataType)
}

::google::protobuf::uint8* BaseInfoDataType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmi.BaseInfoDataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sequence_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_id(), target);
  }

  // optional .COWA.NavMsg.PoseStamped pose_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_info_, deterministic, target);
  }

  // optional .COWA.NavMsg.Trajectory trajectory_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trajectory_info_, deterministic, target);
  }

  // optional .COWA.NavMsg.Obstacles obstacles_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->obstacles_info_, deterministic, target);
  }

  // optional .COWA.NavMsg.TrafficLight2 trafficlight2_info = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->trafficlight2_info_, deterministic, target);
  }

  // optional .COWA.NavMsg.VehicleDrive vehicle_drive_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->vehicle_drive_info_, deterministic, target);
  }

  // optional .hmi.LaneInfoType lane_info = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->lane_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmi.BaseInfoDataType)
  return target;
}

size_t BaseInfoDataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hmi.BaseInfoDataType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 sequence_id = 1;
  if (has_sequence_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .COWA.NavMsg.PoseStamped pose_info = 2;
    if (has_pose_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_info_);
    }

    // optional .COWA.NavMsg.Trajectory trajectory_info = 3;
    if (has_trajectory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_info_);
    }

    // optional .COWA.NavMsg.Obstacles obstacles_info = 4;
    if (has_obstacles_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obstacles_info_);
    }

    // optional .COWA.NavMsg.TrafficLight2 trafficlight2_info = 5;
    if (has_trafficlight2_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trafficlight2_info_);
    }

    // optional .COWA.NavMsg.VehicleDrive vehicle_drive_info = 6;
    if (has_vehicle_drive_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_drive_info_);
    }

    // optional .hmi.LaneInfoType lane_info = 7;
    if (has_lane_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseInfoDataType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmi.BaseInfoDataType)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseInfoDataType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseInfoDataType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmi.BaseInfoDataType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmi.BaseInfoDataType)
    MergeFrom(*source);
  }
}

void BaseInfoDataType::MergeFrom(const BaseInfoDataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmi.BaseInfoDataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose_info()->::COWA::NavMsg::PoseStamped::MergeFrom(from.pose_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trajectory_info()->::COWA::NavMsg::Trajectory::MergeFrom(from.trajectory_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_obstacles_info()->::COWA::NavMsg::Obstacles::MergeFrom(from.obstacles_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_trafficlight2_info()->::COWA::NavMsg::TrafficLight2::MergeFrom(from.trafficlight2_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_vehicle_drive_info()->::COWA::NavMsg::VehicleDrive::MergeFrom(from.vehicle_drive_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_lane_info()->::hmi::LaneInfoType::MergeFrom(from.lane_info());
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseInfoDataType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmi.BaseInfoDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseInfoDataType::CopyFrom(const BaseInfoDataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmi.BaseInfoDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseInfoDataType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_lane_info()) {
    if (!this->lane_info_->IsInitialized()) return false;
  }
  return true;
}

void BaseInfoDataType::Swap(BaseInfoDataType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseInfoDataType::InternalSwap(BaseInfoDataType* other) {
  std::swap(pose_info_, other->pose_info_);
  std::swap(trajectory_info_, other->trajectory_info_);
  std::swap(obstacles_info_, other->obstacles_info_);
  std::swap(trafficlight2_info_, other->trafficlight2_info_);
  std::swap(vehicle_drive_info_, other->vehicle_drive_info_);
  std::swap(lane_info_, other->lane_info_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseInfoDataType::GetMetadata() const {
  protobuf_hmi_5fbase_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hmi_5fbase_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseInfoDataType

// required uint64 sequence_id = 1;
bool BaseInfoDataType::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BaseInfoDataType::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000040u;
}
void BaseInfoDataType::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void BaseInfoDataType::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_id();
}
::google::protobuf::uint64 BaseInfoDataType::sequence_id() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.sequence_id)
  return sequence_id_;
}
void BaseInfoDataType::set_sequence_id(::google::protobuf::uint64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:hmi.BaseInfoDataType.sequence_id)
}

// optional .COWA.NavMsg.PoseStamped pose_info = 2;
bool BaseInfoDataType::has_pose_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseInfoDataType::set_has_pose_info() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseInfoDataType::clear_has_pose_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseInfoDataType::clear_pose_info() {
  if (pose_info_ != NULL) pose_info_->::COWA::NavMsg::PoseStamped::Clear();
  clear_has_pose_info();
}
const ::COWA::NavMsg::PoseStamped& BaseInfoDataType::pose_info() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.pose_info)
  return pose_info_ != NULL ? *pose_info_
                         : *::COWA::NavMsg::PoseStamped::internal_default_instance();
}
::COWA::NavMsg::PoseStamped* BaseInfoDataType::mutable_pose_info() {
  set_has_pose_info();
  if (pose_info_ == NULL) {
    pose_info_ = new ::COWA::NavMsg::PoseStamped;
  }
  // @@protoc_insertion_point(field_mutable:hmi.BaseInfoDataType.pose_info)
  return pose_info_;
}
::COWA::NavMsg::PoseStamped* BaseInfoDataType::release_pose_info() {
  // @@protoc_insertion_point(field_release:hmi.BaseInfoDataType.pose_info)
  clear_has_pose_info();
  ::COWA::NavMsg::PoseStamped* temp = pose_info_;
  pose_info_ = NULL;
  return temp;
}
void BaseInfoDataType::set_allocated_pose_info(::COWA::NavMsg::PoseStamped* pose_info) {
  delete pose_info_;
  pose_info_ = pose_info;
  if (pose_info) {
    set_has_pose_info();
  } else {
    clear_has_pose_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmi.BaseInfoDataType.pose_info)
}

// optional .COWA.NavMsg.Trajectory trajectory_info = 3;
bool BaseInfoDataType::has_trajectory_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseInfoDataType::set_has_trajectory_info() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseInfoDataType::clear_has_trajectory_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseInfoDataType::clear_trajectory_info() {
  if (trajectory_info_ != NULL) trajectory_info_->::COWA::NavMsg::Trajectory::Clear();
  clear_has_trajectory_info();
}
const ::COWA::NavMsg::Trajectory& BaseInfoDataType::trajectory_info() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.trajectory_info)
  return trajectory_info_ != NULL ? *trajectory_info_
                         : *::COWA::NavMsg::Trajectory::internal_default_instance();
}
::COWA::NavMsg::Trajectory* BaseInfoDataType::mutable_trajectory_info() {
  set_has_trajectory_info();
  if (trajectory_info_ == NULL) {
    trajectory_info_ = new ::COWA::NavMsg::Trajectory;
  }
  // @@protoc_insertion_point(field_mutable:hmi.BaseInfoDataType.trajectory_info)
  return trajectory_info_;
}
::COWA::NavMsg::Trajectory* BaseInfoDataType::release_trajectory_info() {
  // @@protoc_insertion_point(field_release:hmi.BaseInfoDataType.trajectory_info)
  clear_has_trajectory_info();
  ::COWA::NavMsg::Trajectory* temp = trajectory_info_;
  trajectory_info_ = NULL;
  return temp;
}
void BaseInfoDataType::set_allocated_trajectory_info(::COWA::NavMsg::Trajectory* trajectory_info) {
  delete trajectory_info_;
  trajectory_info_ = trajectory_info;
  if (trajectory_info) {
    set_has_trajectory_info();
  } else {
    clear_has_trajectory_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmi.BaseInfoDataType.trajectory_info)
}

// optional .COWA.NavMsg.Obstacles obstacles_info = 4;
bool BaseInfoDataType::has_obstacles_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BaseInfoDataType::set_has_obstacles_info() {
  _has_bits_[0] |= 0x00000004u;
}
void BaseInfoDataType::clear_has_obstacles_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void BaseInfoDataType::clear_obstacles_info() {
  if (obstacles_info_ != NULL) obstacles_info_->::COWA::NavMsg::Obstacles::Clear();
  clear_has_obstacles_info();
}
const ::COWA::NavMsg::Obstacles& BaseInfoDataType::obstacles_info() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.obstacles_info)
  return obstacles_info_ != NULL ? *obstacles_info_
                         : *::COWA::NavMsg::Obstacles::internal_default_instance();
}
::COWA::NavMsg::Obstacles* BaseInfoDataType::mutable_obstacles_info() {
  set_has_obstacles_info();
  if (obstacles_info_ == NULL) {
    obstacles_info_ = new ::COWA::NavMsg::Obstacles;
  }
  // @@protoc_insertion_point(field_mutable:hmi.BaseInfoDataType.obstacles_info)
  return obstacles_info_;
}
::COWA::NavMsg::Obstacles* BaseInfoDataType::release_obstacles_info() {
  // @@protoc_insertion_point(field_release:hmi.BaseInfoDataType.obstacles_info)
  clear_has_obstacles_info();
  ::COWA::NavMsg::Obstacles* temp = obstacles_info_;
  obstacles_info_ = NULL;
  return temp;
}
void BaseInfoDataType::set_allocated_obstacles_info(::COWA::NavMsg::Obstacles* obstacles_info) {
  delete obstacles_info_;
  obstacles_info_ = obstacles_info;
  if (obstacles_info) {
    set_has_obstacles_info();
  } else {
    clear_has_obstacles_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmi.BaseInfoDataType.obstacles_info)
}

// optional .COWA.NavMsg.TrafficLight2 trafficlight2_info = 5;
bool BaseInfoDataType::has_trafficlight2_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BaseInfoDataType::set_has_trafficlight2_info() {
  _has_bits_[0] |= 0x00000008u;
}
void BaseInfoDataType::clear_has_trafficlight2_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void BaseInfoDataType::clear_trafficlight2_info() {
  if (trafficlight2_info_ != NULL) trafficlight2_info_->::COWA::NavMsg::TrafficLight2::Clear();
  clear_has_trafficlight2_info();
}
const ::COWA::NavMsg::TrafficLight2& BaseInfoDataType::trafficlight2_info() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.trafficlight2_info)
  return trafficlight2_info_ != NULL ? *trafficlight2_info_
                         : *::COWA::NavMsg::TrafficLight2::internal_default_instance();
}
::COWA::NavMsg::TrafficLight2* BaseInfoDataType::mutable_trafficlight2_info() {
  set_has_trafficlight2_info();
  if (trafficlight2_info_ == NULL) {
    trafficlight2_info_ = new ::COWA::NavMsg::TrafficLight2;
  }
  // @@protoc_insertion_point(field_mutable:hmi.BaseInfoDataType.trafficlight2_info)
  return trafficlight2_info_;
}
::COWA::NavMsg::TrafficLight2* BaseInfoDataType::release_trafficlight2_info() {
  // @@protoc_insertion_point(field_release:hmi.BaseInfoDataType.trafficlight2_info)
  clear_has_trafficlight2_info();
  ::COWA::NavMsg::TrafficLight2* temp = trafficlight2_info_;
  trafficlight2_info_ = NULL;
  return temp;
}
void BaseInfoDataType::set_allocated_trafficlight2_info(::COWA::NavMsg::TrafficLight2* trafficlight2_info) {
  delete trafficlight2_info_;
  trafficlight2_info_ = trafficlight2_info;
  if (trafficlight2_info) {
    set_has_trafficlight2_info();
  } else {
    clear_has_trafficlight2_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmi.BaseInfoDataType.trafficlight2_info)
}

// optional .COWA.NavMsg.VehicleDrive vehicle_drive_info = 6;
bool BaseInfoDataType::has_vehicle_drive_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BaseInfoDataType::set_has_vehicle_drive_info() {
  _has_bits_[0] |= 0x00000010u;
}
void BaseInfoDataType::clear_has_vehicle_drive_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void BaseInfoDataType::clear_vehicle_drive_info() {
  if (vehicle_drive_info_ != NULL) vehicle_drive_info_->::COWA::NavMsg::VehicleDrive::Clear();
  clear_has_vehicle_drive_info();
}
const ::COWA::NavMsg::VehicleDrive& BaseInfoDataType::vehicle_drive_info() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.vehicle_drive_info)
  return vehicle_drive_info_ != NULL ? *vehicle_drive_info_
                         : *::COWA::NavMsg::VehicleDrive::internal_default_instance();
}
::COWA::NavMsg::VehicleDrive* BaseInfoDataType::mutable_vehicle_drive_info() {
  set_has_vehicle_drive_info();
  if (vehicle_drive_info_ == NULL) {
    vehicle_drive_info_ = new ::COWA::NavMsg::VehicleDrive;
  }
  // @@protoc_insertion_point(field_mutable:hmi.BaseInfoDataType.vehicle_drive_info)
  return vehicle_drive_info_;
}
::COWA::NavMsg::VehicleDrive* BaseInfoDataType::release_vehicle_drive_info() {
  // @@protoc_insertion_point(field_release:hmi.BaseInfoDataType.vehicle_drive_info)
  clear_has_vehicle_drive_info();
  ::COWA::NavMsg::VehicleDrive* temp = vehicle_drive_info_;
  vehicle_drive_info_ = NULL;
  return temp;
}
void BaseInfoDataType::set_allocated_vehicle_drive_info(::COWA::NavMsg::VehicleDrive* vehicle_drive_info) {
  delete vehicle_drive_info_;
  vehicle_drive_info_ = vehicle_drive_info;
  if (vehicle_drive_info) {
    set_has_vehicle_drive_info();
  } else {
    clear_has_vehicle_drive_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmi.BaseInfoDataType.vehicle_drive_info)
}

// optional .hmi.LaneInfoType lane_info = 7;
bool BaseInfoDataType::has_lane_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BaseInfoDataType::set_has_lane_info() {
  _has_bits_[0] |= 0x00000020u;
}
void BaseInfoDataType::clear_has_lane_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void BaseInfoDataType::clear_lane_info() {
  if (lane_info_ != NULL) lane_info_->::hmi::LaneInfoType::Clear();
  clear_has_lane_info();
}
const ::hmi::LaneInfoType& BaseInfoDataType::lane_info() const {
  // @@protoc_insertion_point(field_get:hmi.BaseInfoDataType.lane_info)
  return lane_info_ != NULL ? *lane_info_
                         : *::hmi::LaneInfoType::internal_default_instance();
}
::hmi::LaneInfoType* BaseInfoDataType::mutable_lane_info() {
  set_has_lane_info();
  if (lane_info_ == NULL) {
    lane_info_ = new ::hmi::LaneInfoType;
  }
  // @@protoc_insertion_point(field_mutable:hmi.BaseInfoDataType.lane_info)
  return lane_info_;
}
::hmi::LaneInfoType* BaseInfoDataType::release_lane_info() {
  // @@protoc_insertion_point(field_release:hmi.BaseInfoDataType.lane_info)
  clear_has_lane_info();
  ::hmi::LaneInfoType* temp = lane_info_;
  lane_info_ = NULL;
  return temp;
}
void BaseInfoDataType::set_allocated_lane_info(::hmi::LaneInfoType* lane_info) {
  delete lane_info_;
  lane_info_ = lane_info;
  if (lane_info) {
    set_has_lane_info();
  } else {
    clear_has_lane_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmi.BaseInfoDataType.lane_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hmi

// @@protoc_insertion_point(global_scope)
