// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utm_point_cloud.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "utm_point_cloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace utm_point_cloud {
class PointXYZDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointXYZ> {
} _PointXYZ_default_instance_;
class PointCloudDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointCloud> {
} _PointCloud_default_instance_;
class PointCloudCollectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointCloudCollect> {
} _PointCloudCollect_default_instance_;
class PointCloudDataTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointCloudDataType> {
} _PointCloudDataType_default_instance_;

namespace protobuf_utm_5fpoint_5fcloud_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZ, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZ, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZ, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZ, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudCollect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudCollect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudCollect, point_cloud_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudDataType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudDataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudDataType, sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudDataType, point_cloud_collect_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(PointXYZ)},
  { 11, 17, sizeof(PointCloud)},
  { 18, 24, sizeof(PointCloudCollect)},
  { 25, 32, sizeof(PointCloudDataType)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointXYZ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointCloudCollect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointCloudDataType_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "utm_point_cloud.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _PointXYZ_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PointCloud_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PointCloudCollect_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PointCloudDataType_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PointXYZ_default_instance_.DefaultConstruct();
  _PointCloud_default_instance_.DefaultConstruct();
  _PointCloudCollect_default_instance_.DefaultConstruct();
  _PointCloudDataType_default_instance_.DefaultConstruct();
  _PointCloudDataType_default_instance_.get_mutable()->point_cloud_collect_ = const_cast< ::utm_point_cloud::PointCloudCollect*>(
      ::utm_point_cloud::PointCloudCollect::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025utm_point_cloud.proto\022\017utm_point_cloud"
      "\"+\n\010PointXYZ\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030"
      "\003 \002(\001\"6\n\nPointCloud\022(\n\005point\030\001 \003(\0132\031.utm"
      "_point_cloud.PointXYZ\"E\n\021PointCloudColle"
      "ct\0220\n\013point_cloud\030\001 \003(\0132\033.utm_point_clou"
      "d.PointCloud\"j\n\022PointCloudDataType\022\023\n\013se"
      "quence_id\030\001 \002(\004\022\?\n\023point_cloud_collect\030\002"
      " \001(\0132\".utm_point_cloud.PointCloudCollect"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "utm_point_cloud.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_utm_5fpoint_5fcloud_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointXYZ::kXFieldNumber;
const int PointXYZ::kYFieldNumber;
const int PointXYZ::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointXYZ::PointXYZ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:utm_point_cloud.PointXYZ)
}
PointXYZ::PointXYZ(const PointXYZ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:utm_point_cloud.PointXYZ)
}

void PointXYZ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

PointXYZ::~PointXYZ() {
  // @@protoc_insertion_point(destructor:utm_point_cloud.PointXYZ)
  SharedDtor();
}

void PointXYZ::SharedDtor() {
}

void PointXYZ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointXYZ::descriptor() {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointXYZ& PointXYZ::default_instance() {
  protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointXYZ* PointXYZ::New(::google::protobuf::Arena* arena) const {
  PointXYZ* n = new PointXYZ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointXYZ::Clear() {
// @@protoc_insertion_point(message_clear_start:utm_point_cloud.PointXYZ)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointXYZ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:utm_point_cloud.PointXYZ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:utm_point_cloud.PointXYZ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:utm_point_cloud.PointXYZ)
  return false;
#undef DO_
}

void PointXYZ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:utm_point_cloud.PointXYZ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:utm_point_cloud.PointXYZ)
}

::google::protobuf::uint8* PointXYZ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:utm_point_cloud.PointXYZ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:utm_point_cloud.PointXYZ)
  return target;
}

size_t PointXYZ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:utm_point_cloud.PointXYZ)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PointXYZ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:utm_point_cloud.PointXYZ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointXYZ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:utm_point_cloud.PointXYZ)
  GOOGLE_DCHECK_NE(&from, this);
  const PointXYZ* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointXYZ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:utm_point_cloud.PointXYZ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:utm_point_cloud.PointXYZ)
    MergeFrom(*source);
  }
}

void PointXYZ::MergeFrom(const PointXYZ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:utm_point_cloud.PointXYZ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointXYZ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:utm_point_cloud.PointXYZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointXYZ::CopyFrom(const PointXYZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:utm_point_cloud.PointXYZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointXYZ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PointXYZ::Swap(PointXYZ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointXYZ::InternalSwap(PointXYZ* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointXYZ::GetMetadata() const {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointXYZ

// required double x = 1;
bool PointXYZ::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointXYZ::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PointXYZ::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointXYZ::clear_x() {
  x_ = 0;
  clear_has_x();
}
double PointXYZ::x() const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointXYZ.x)
  return x_;
}
void PointXYZ::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:utm_point_cloud.PointXYZ.x)
}

// required double y = 2;
bool PointXYZ::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointXYZ::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PointXYZ::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointXYZ::clear_y() {
  y_ = 0;
  clear_has_y();
}
double PointXYZ::y() const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointXYZ.y)
  return y_;
}
void PointXYZ::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:utm_point_cloud.PointXYZ.y)
}

// required double z = 3;
bool PointXYZ::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointXYZ::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void PointXYZ::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointXYZ::clear_z() {
  z_ = 0;
  clear_has_z();
}
double PointXYZ::z() const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointXYZ.z)
  return z_;
}
void PointXYZ::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:utm_point_cloud.PointXYZ.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:utm_point_cloud.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:utm_point_cloud.PointCloud)
}

void PointCloud::SharedCtor() {
  _cached_size_ = 0;
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:utm_point_cloud.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointCloud& PointCloud::default_instance() {
  protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  PointCloud* n = new PointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:utm_point_cloud.PointCloud)
  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:utm_point_cloud.PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .utm_point_cloud.PointXYZ point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:utm_point_cloud.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:utm_point_cloud.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:utm_point_cloud.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .utm_point_cloud.PointXYZ point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:utm_point_cloud.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:utm_point_cloud.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .utm_point_cloud.PointXYZ point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:utm_point_cloud.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:utm_point_cloud.PointCloud)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .utm_point_cloud.PointXYZ point = 1;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:utm_point_cloud.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:utm_point_cloud.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:utm_point_cloud.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:utm_point_cloud.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:utm_point_cloud.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:utm_point_cloud.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  point_.InternalSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloud

// repeated .utm_point_cloud.PointXYZ point = 1;
int PointCloud::point_size() const {
  return point_.size();
}
void PointCloud::clear_point() {
  point_.Clear();
}
const ::utm_point_cloud::PointXYZ& PointCloud::point(int index) const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointCloud.point)
  return point_.Get(index);
}
::utm_point_cloud::PointXYZ* PointCloud::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:utm_point_cloud.PointCloud.point)
  return point_.Mutable(index);
}
::utm_point_cloud::PointXYZ* PointCloud::add_point() {
  // @@protoc_insertion_point(field_add:utm_point_cloud.PointCloud.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::utm_point_cloud::PointXYZ >*
PointCloud::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:utm_point_cloud.PointCloud.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::utm_point_cloud::PointXYZ >&
PointCloud::point() const {
  // @@protoc_insertion_point(field_list:utm_point_cloud.PointCloud.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloudCollect::kPointCloudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloudCollect::PointCloudCollect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:utm_point_cloud.PointCloudCollect)
}
PointCloudCollect::PointCloudCollect(const PointCloudCollect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_cloud_(from.point_cloud_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:utm_point_cloud.PointCloudCollect)
}

void PointCloudCollect::SharedCtor() {
  _cached_size_ = 0;
}

PointCloudCollect::~PointCloudCollect() {
  // @@protoc_insertion_point(destructor:utm_point_cloud.PointCloudCollect)
  SharedDtor();
}

void PointCloudCollect::SharedDtor() {
}

void PointCloudCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloudCollect::descriptor() {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointCloudCollect& PointCloudCollect::default_instance() {
  protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointCloudCollect* PointCloudCollect::New(::google::protobuf::Arena* arena) const {
  PointCloudCollect* n = new PointCloudCollect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloudCollect::Clear() {
// @@protoc_insertion_point(message_clear_start:utm_point_cloud.PointCloudCollect)
  point_cloud_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointCloudCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:utm_point_cloud.PointCloudCollect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .utm_point_cloud.PointCloud point_cloud = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:utm_point_cloud.PointCloudCollect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:utm_point_cloud.PointCloudCollect)
  return false;
#undef DO_
}

void PointCloudCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:utm_point_cloud.PointCloudCollect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .utm_point_cloud.PointCloud point_cloud = 1;
  for (unsigned int i = 0, n = this->point_cloud_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point_cloud(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:utm_point_cloud.PointCloudCollect)
}

::google::protobuf::uint8* PointCloudCollect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:utm_point_cloud.PointCloudCollect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .utm_point_cloud.PointCloud point_cloud = 1;
  for (unsigned int i = 0, n = this->point_cloud_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point_cloud(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:utm_point_cloud.PointCloudCollect)
  return target;
}

size_t PointCloudCollect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:utm_point_cloud.PointCloudCollect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .utm_point_cloud.PointCloud point_cloud = 1;
  {
    unsigned int count = this->point_cloud_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_cloud(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloudCollect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:utm_point_cloud.PointCloudCollect)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloudCollect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloudCollect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:utm_point_cloud.PointCloudCollect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:utm_point_cloud.PointCloudCollect)
    MergeFrom(*source);
  }
}

void PointCloudCollect::MergeFrom(const PointCloudCollect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:utm_point_cloud.PointCloudCollect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_cloud_.MergeFrom(from.point_cloud_);
}

void PointCloudCollect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:utm_point_cloud.PointCloudCollect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudCollect::CopyFrom(const PointCloudCollect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:utm_point_cloud.PointCloudCollect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudCollect::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->point_cloud())) return false;
  return true;
}

void PointCloudCollect::Swap(PointCloudCollect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloudCollect::InternalSwap(PointCloudCollect* other) {
  point_cloud_.InternalSwap(&other->point_cloud_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloudCollect::GetMetadata() const {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloudCollect

// repeated .utm_point_cloud.PointCloud point_cloud = 1;
int PointCloudCollect::point_cloud_size() const {
  return point_cloud_.size();
}
void PointCloudCollect::clear_point_cloud() {
  point_cloud_.Clear();
}
const ::utm_point_cloud::PointCloud& PointCloudCollect::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointCloudCollect.point_cloud)
  return point_cloud_.Get(index);
}
::utm_point_cloud::PointCloud* PointCloudCollect::mutable_point_cloud(int index) {
  // @@protoc_insertion_point(field_mutable:utm_point_cloud.PointCloudCollect.point_cloud)
  return point_cloud_.Mutable(index);
}
::utm_point_cloud::PointCloud* PointCloudCollect::add_point_cloud() {
  // @@protoc_insertion_point(field_add:utm_point_cloud.PointCloudCollect.point_cloud)
  return point_cloud_.Add();
}
::google::protobuf::RepeatedPtrField< ::utm_point_cloud::PointCloud >*
PointCloudCollect::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:utm_point_cloud.PointCloudCollect.point_cloud)
  return &point_cloud_;
}
const ::google::protobuf::RepeatedPtrField< ::utm_point_cloud::PointCloud >&
PointCloudCollect::point_cloud() const {
  // @@protoc_insertion_point(field_list:utm_point_cloud.PointCloudCollect.point_cloud)
  return point_cloud_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloudDataType::kSequenceIdFieldNumber;
const int PointCloudDataType::kPointCloudCollectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloudDataType::PointCloudDataType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:utm_point_cloud.PointCloudDataType)
}
PointCloudDataType::PointCloudDataType(const PointCloudDataType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point_cloud_collect()) {
    point_cloud_collect_ = new ::utm_point_cloud::PointCloudCollect(*from.point_cloud_collect_);
  } else {
    point_cloud_collect_ = NULL;
  }
  sequence_id_ = from.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:utm_point_cloud.PointCloudDataType)
}

void PointCloudDataType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&point_cloud_collect_, 0, reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&point_cloud_collect_) + sizeof(sequence_id_));
}

PointCloudDataType::~PointCloudDataType() {
  // @@protoc_insertion_point(destructor:utm_point_cloud.PointCloudDataType)
  SharedDtor();
}

void PointCloudDataType::SharedDtor() {
  if (this != internal_default_instance()) {
    delete point_cloud_collect_;
  }
}

void PointCloudDataType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloudDataType::descriptor() {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointCloudDataType& PointCloudDataType::default_instance() {
  protobuf_utm_5fpoint_5fcloud_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointCloudDataType* PointCloudDataType::New(::google::protobuf::Arena* arena) const {
  PointCloudDataType* n = new PointCloudDataType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloudDataType::Clear() {
// @@protoc_insertion_point(message_clear_start:utm_point_cloud.PointCloudDataType)
  if (has_point_cloud_collect()) {
    GOOGLE_DCHECK(point_cloud_collect_ != NULL);
    point_cloud_collect_->::utm_point_cloud::PointCloudCollect::Clear();
  }
  sequence_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointCloudDataType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:utm_point_cloud.PointCloudDataType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .utm_point_cloud.PointCloudCollect point_cloud_collect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point_cloud_collect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:utm_point_cloud.PointCloudDataType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:utm_point_cloud.PointCloudDataType)
  return false;
#undef DO_
}

void PointCloudDataType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:utm_point_cloud.PointCloudDataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sequence_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_id(), output);
  }

  // optional .utm_point_cloud.PointCloudCollect point_cloud_collect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_cloud_collect_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:utm_point_cloud.PointCloudDataType)
}

::google::protobuf::uint8* PointCloudDataType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:utm_point_cloud.PointCloudDataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sequence_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_id(), target);
  }

  // optional .utm_point_cloud.PointCloudCollect point_cloud_collect = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->point_cloud_collect_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:utm_point_cloud.PointCloudDataType)
  return target;
}

size_t PointCloudDataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:utm_point_cloud.PointCloudDataType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 sequence_id = 1;
  if (has_sequence_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }
  // optional .utm_point_cloud.PointCloudCollect point_cloud_collect = 2;
  if (has_point_cloud_collect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_cloud_collect_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloudDataType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:utm_point_cloud.PointCloudDataType)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloudDataType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloudDataType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:utm_point_cloud.PointCloudDataType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:utm_point_cloud.PointCloudDataType)
    MergeFrom(*source);
  }
}

void PointCloudDataType::MergeFrom(const PointCloudDataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:utm_point_cloud.PointCloudDataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_point_cloud_collect()->::utm_point_cloud::PointCloudCollect::MergeFrom(from.point_cloud_collect());
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointCloudDataType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:utm_point_cloud.PointCloudDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudDataType::CopyFrom(const PointCloudDataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:utm_point_cloud.PointCloudDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudDataType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_point_cloud_collect()) {
    if (!this->point_cloud_collect_->IsInitialized()) return false;
  }
  return true;
}

void PointCloudDataType::Swap(PointCloudDataType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloudDataType::InternalSwap(PointCloudDataType* other) {
  std::swap(point_cloud_collect_, other->point_cloud_collect_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloudDataType::GetMetadata() const {
  protobuf_utm_5fpoint_5fcloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_utm_5fpoint_5fcloud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloudDataType

// required uint64 sequence_id = 1;
bool PointCloudDataType::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointCloudDataType::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PointCloudDataType::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointCloudDataType::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_id();
}
::google::protobuf::uint64 PointCloudDataType::sequence_id() const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointCloudDataType.sequence_id)
  return sequence_id_;
}
void PointCloudDataType::set_sequence_id(::google::protobuf::uint64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:utm_point_cloud.PointCloudDataType.sequence_id)
}

// optional .utm_point_cloud.PointCloudCollect point_cloud_collect = 2;
bool PointCloudDataType::has_point_cloud_collect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointCloudDataType::set_has_point_cloud_collect() {
  _has_bits_[0] |= 0x00000001u;
}
void PointCloudDataType::clear_has_point_cloud_collect() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointCloudDataType::clear_point_cloud_collect() {
  if (point_cloud_collect_ != NULL) point_cloud_collect_->::utm_point_cloud::PointCloudCollect::Clear();
  clear_has_point_cloud_collect();
}
const ::utm_point_cloud::PointCloudCollect& PointCloudDataType::point_cloud_collect() const {
  // @@protoc_insertion_point(field_get:utm_point_cloud.PointCloudDataType.point_cloud_collect)
  return point_cloud_collect_ != NULL ? *point_cloud_collect_
                         : *::utm_point_cloud::PointCloudCollect::internal_default_instance();
}
::utm_point_cloud::PointCloudCollect* PointCloudDataType::mutable_point_cloud_collect() {
  set_has_point_cloud_collect();
  if (point_cloud_collect_ == NULL) {
    point_cloud_collect_ = new ::utm_point_cloud::PointCloudCollect;
  }
  // @@protoc_insertion_point(field_mutable:utm_point_cloud.PointCloudDataType.point_cloud_collect)
  return point_cloud_collect_;
}
::utm_point_cloud::PointCloudCollect* PointCloudDataType::release_point_cloud_collect() {
  // @@protoc_insertion_point(field_release:utm_point_cloud.PointCloudDataType.point_cloud_collect)
  clear_has_point_cloud_collect();
  ::utm_point_cloud::PointCloudCollect* temp = point_cloud_collect_;
  point_cloud_collect_ = NULL;
  return temp;
}
void PointCloudDataType::set_allocated_point_cloud_collect(::utm_point_cloud::PointCloudCollect* point_cloud_collect) {
  delete point_cloud_collect_;
  point_cloud_collect_ = point_cloud_collect;
  if (point_cloud_collect) {
    set_has_point_cloud_collect();
  } else {
    clear_has_point_cloud_collect();
  }
  // @@protoc_insertion_point(field_set_allocated:utm_point_cloud.PointCloudDataType.point_cloud_collect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace utm_point_cloud

// @@protoc_insertion_point(global_scope)
