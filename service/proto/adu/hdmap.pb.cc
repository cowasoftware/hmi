// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hdmap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hdmap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace COWA {
namespace MapData {
class LaneStripDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneStrip> {
} _LaneStrip_default_instance_;
class LanePointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LanePoint> {
} _LanePoint_default_instance_;
class LaneCurveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneCurve> {
} _LaneCurve_default_instance_;
class Lane_LaneMarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lane_LaneMark> {
} _Lane_LaneMark_default_instance_;
class LaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lane> {
} _Lane_default_instance_;
class LaneTide_Item_TimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneTide_Item_Time> {
} _LaneTide_Item_Time_default_instance_;
class LaneTide_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneTide_Item> {
} _LaneTide_Item_default_instance_;
class LaneTideDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneTide> {
} _LaneTide_default_instance_;
class RoadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Road> {
} _Road_default_instance_;
class SquareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Square> {
} _Square_default_instance_;
class RampDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ramp> {
} _Ramp_default_instance_;
class CrosswalkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Crosswalk> {
} _Crosswalk_default_instance_;
class RoadmarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Roadmark> {
} _Roadmark_default_instance_;
class ParkingSpaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParkingSpace> {
} _ParkingSpace_default_instance_;
class ObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Object> {
} _Object_default_instance_;
class SubsignalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Subsignal> {
} _Subsignal_default_instance_;
class SignalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signal> {
} _Signal_default_instance_;
class Crossroad_LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Crossroad_Line> {
} _Crossroad_Line_default_instance_;
class CrossroadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Crossroad> {
} _Crossroad_default_instance_;
class LaneChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneChange> {
} _LaneChange_default_instance_;
class HdMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HdMap> {
} _HdMap_default_instance_;

namespace protobuf_hdmap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneStrip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneStrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneStrip, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneStrip, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneStrip, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, height_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, offset_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, offset_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneCurve, strip_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, centroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane_LaneMark, direction_),
  3,
  1,
  0,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, central_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, min_speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, predecessor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, successor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, mark_),
  0,
  6,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item_Time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item_Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item_Time, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item_Time, end_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide_Item, time_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneTide, signal_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, lane_id_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, lane_id_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, boundary_),
  0,
  2,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Square, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Square, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Square, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Square, polygon_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ramp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ramp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ramp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ramp, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ramp, oriention_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crosswalk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crosswalk, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crosswalk, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crosswalk, oriention_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crosswalk, hybrid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roadmark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roadmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roadmark, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roadmark, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roadmark, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, oriention_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, cloud_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subsignal, boundary_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, subsignal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, stop_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, wait_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, wait_signal_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad_Line, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad_Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad_Line, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad_Line, lane_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad_Line, lane_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad_Line, road_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crossroad, type_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneChange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneChange, lane_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneChange, lane_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneChange, boundary_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, lane_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, crossroad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, ramp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, roadmark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, parking_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, overlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, lane_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdMap, tide_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(LaneStrip)},
  { 11, 21, sizeof(LanePoint)},
  { 26, 37, sizeof(LaneCurve)},
  { 43, 53, sizeof(Lane_LaneMark)},
  { 58, 80, sizeof(Lane)},
  { 97, 104, sizeof(LaneTide_Item_Time)},
  { 106, 113, sizeof(LaneTide_Item)},
  { 115, 124, sizeof(LaneTide)},
  { 128, 138, sizeof(Road)},
  { 143, 150, sizeof(Square)},
  { 152, 160, sizeof(Ramp)},
  { 163, 172, sizeof(Crosswalk)},
  { 176, 184, sizeof(Roadmark)},
  { 187, 196, sizeof(ParkingSpace)},
  { 200, 209, sizeof(Object)},
  { 213, 221, sizeof(Subsignal)},
  { 224, 235, sizeof(Signal)},
  { 241, 250, sizeof(Crossroad_Line)},
  { 254, 263, sizeof(Crossroad)},
  { 267, 276, sizeof(LaneChange)},
  { 280, 299, sizeof(HdMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneStrip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LanePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneCurve_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lane_LaneMark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneTide_Item_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneTide_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneTide_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Road_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Square_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ramp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Crosswalk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Roadmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParkingSpace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Subsignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Crossroad_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Crossroad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HdMap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hdmap.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace

void TableStruct::Shutdown() {
  _LaneStrip_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LanePoint_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LaneCurve_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Lane_LaneMark_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Lane_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LaneTide_Item_Time_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _LaneTide_Item_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _LaneTide_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Road_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Square_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Ramp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Crosswalk_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Roadmark_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ParkingSpace_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Object_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Subsignal_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Signal_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Crossroad_Line_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Crossroad_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _LaneChange_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _HdMap_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::COWA::MapData::protobuf_hdmap_5fcommon_2eproto::InitDefaults();
  _LaneStrip_default_instance_.DefaultConstruct();
  _LanePoint_default_instance_.DefaultConstruct();
  _LaneCurve_default_instance_.DefaultConstruct();
  _Lane_LaneMark_default_instance_.DefaultConstruct();
  _Lane_default_instance_.DefaultConstruct();
  _LaneTide_Item_Time_default_instance_.DefaultConstruct();
  _LaneTide_Item_default_instance_.DefaultConstruct();
  _LaneTide_default_instance_.DefaultConstruct();
  _Road_default_instance_.DefaultConstruct();
  _Square_default_instance_.DefaultConstruct();
  _Ramp_default_instance_.DefaultConstruct();
  _Crosswalk_default_instance_.DefaultConstruct();
  _Roadmark_default_instance_.DefaultConstruct();
  _ParkingSpace_default_instance_.DefaultConstruct();
  _Object_default_instance_.DefaultConstruct();
  _Subsignal_default_instance_.DefaultConstruct();
  _Signal_default_instance_.DefaultConstruct();
  _Crossroad_Line_default_instance_.DefaultConstruct();
  _Crossroad_default_instance_.DefaultConstruct();
  _LaneChange_default_instance_.DefaultConstruct();
  _HdMap_default_instance_.DefaultConstruct();
  _LaneCurve_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Lane_LaneMark_default_instance_.get_mutable()->centroid_ = const_cast< ::COWA::MapData::PointENU*>(
      ::COWA::MapData::PointENU::internal_default_instance());
  _Lane_LaneMark_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Lane_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Lane_default_instance_.get_mutable()->central_line_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _LaneTide_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _LaneTide_default_instance_.get_mutable()->a_ = const_cast< ::COWA::MapData::LaneTide_Item*>(
      ::COWA::MapData::LaneTide_Item::internal_default_instance());
  _LaneTide_default_instance_.get_mutable()->b_ = const_cast< ::COWA::MapData::LaneTide_Item*>(
      ::COWA::MapData::LaneTide_Item::internal_default_instance());
  _Road_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Road_default_instance_.get_mutable()->boundary_ = const_cast< ::COWA::MapData::LaneCurve*>(
      ::COWA::MapData::LaneCurve::internal_default_instance());
  _Square_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Square_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Ramp_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Ramp_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Crosswalk_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Crosswalk_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Roadmark_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Roadmark_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _ParkingSpace_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _ParkingSpace_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _ParkingSpace_default_instance_.get_mutable()->boundary_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Object_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Object_default_instance_.get_mutable()->polygon_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Object_default_instance_.get_mutable()->cloud_ = const_cast< ::COWA::MapData::Cloud*>(
      ::COWA::MapData::Cloud::internal_default_instance());
  _Subsignal_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Subsignal_default_instance_.get_mutable()->boundary_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _Signal_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Signal_default_instance_.get_mutable()->wait_signal_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Crossroad_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _Crossroad_default_instance_.get_mutable()->boundary_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _LaneChange_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::Id*>(
      ::COWA::MapData::Id::internal_default_instance());
  _LaneChange_default_instance_.get_mutable()->boundary_ = const_cast< ::COWA::MapData::Polygon*>(
      ::COWA::MapData::Polygon::internal_default_instance());
  _HdMap_default_instance_.get_mutable()->header_ = const_cast< ::COWA::MapData::Header*>(
      ::COWA::MapData::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013hdmap.proto\022\014COWA.MapData\032\022hdmap_commo"
      "n.proto\"c\n\tLaneStrip\022\017\n\007start_s\030\001 \001(\002\022\r\n"
      "\005end_s\030\002 \001(\002\022\016\n\006height\030\003 \001(\002\"&\n\004Type\022\010\n\004"
      "WALL\020\001\022\t\n\005FENCE\020\002\022\t\n\005GREEN\020\003\"\373\001\n\tLanePoi"
      "nt\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022*\n\004t"
      "ype\030\004 \001(\0162\034.COWA.MapData.LanePoint.Type\022"
      "\016\n\006height\030\005 \001(\002\"\220\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\021\n"
      "\rDOTTED_YELLOW\020\001\022\020\n\014DOTTED_WHITE\020\002\022\020\n\014SO"
      "LID_YELLOW\020\003\022\017\n\013SOLID_WHITE\020\004\022\021\n\rDOUBLE_"
      "YELLOW\020\005\022\010\n\004CURB\020\006\022\t\n\005BLANK\020\007\022\013\n\007VIRTUAL"
      "\020\t\"\370\001\n\tLaneCurve\022\034\n\002id\030\002 \001(\0132\020.COWA.MapD"
      "ata.Id\022&\n\005point\030\001 \003(\0132\027.COWA.MapData.Lan"
      "ePoint\022\020\n\010offset_x\030\003 \001(\001\022\020\n\010offset_y\030\004 \001"
      "(\001\022*\n\004type\030\005 \001(\0162\034.COWA.MapData.LaneCurv"
      "e.Type\022&\n\005strip\030\006 \003(\0132\027.COWA.MapData.Lan"
      "eStrip\"-\n\004Type\022\013\n\007REALITY\020\000\022\013\n\007VIRTUAL\020\001"
      "\022\013\n\007CENTRAL\020\002\"\203\013\n\004Lane\022\034\n\002id\030\001 \001(\0132\020.COW"
      "A.MapData.Id\022)\n\004type\030\002 \001(\0162\033.COWA.MapDat"
      "a.Lane.LaneType\022&\n\014central_line\030\003 \001(\0132\020."
      "COWA.MapData.Id\022#\n\tleft_line\030\004 \003(\0132\020.COW"
      "A.MapData.Id\022$\n\nright_line\030\005 \003(\0132\020.COWA."
      "MapData.Id\022\016\n\006length\030\006 \001(\002\022\023\n\013speed_limi"
      "t\030\007 \001(\002\022\027\n\017min_speed_limit\030\020 \001(\002\022(\n\016pred"
      "ecessor_id\030\010 \003(\0132\020.COWA.MapData.Id\022&\n\014su"
      "ccessor_id\030\t \003(\0132\020.COWA.MapData.Id\0227\n\035le"
      "ft_neighbor_forward_lane_id\030\n \003(\0132\020.COWA"
      ".MapData.Id\0228\n\036right_neighbor_forward_la"
      "ne_id\030\013 \003(\0132\020.COWA.MapData.Id\0227\n\035left_ne"
      "ighbor_reverse_lane_id\030\014 \003(\0132\020.COWA.MapD"
      "ata.Id\0228\n\036right_neighbor_reverse_lane_id"
      "\030\r \003(\0132\020.COWA.MapData.Id\0223\n\tdirection\030\016 "
      "\001(\0162 .COWA.MapData.Lane.LaneDirection\022)\n"
      "\004turn\030\017 \001(\0162\033.COWA.MapData.Lane.LaneTurn"
      "\022)\n\004mark\030\021 \003(\0132\033.COWA.MapData.Lane.LaneM"
      "ark\032\274\003\n\010LaneMark\022.\n\004type\030\001 \001(\0162 .COWA.Ma"
      "pData.Lane.LaneMark.Type\022(\n\010centroid\030\002 \001"
      "(\0132\026.COWA.MapData.PointENU\022\014\n\004text\030\003 \001(\t"
      "\022&\n\007polygon\030\004 \001(\0132\025.COWA.MapData.Polygon"
      "\022\021\n\tdirection\030\005 \001(\002\"\214\002\n\004Type\022\010\n\004TEXT\020\000\022\020"
      "\n\014TURN_FORWORD\020\001\022\016\n\nTURN_UTURN\020\002\022\r\n\tTURN"
      "_LEFT\020\003\022\016\n\nTURN_RIGHT\020\004\022\025\n\021TURN_FORWORD_"
      "LEFT\020\005\022\026\n\022TURN_FORWORD_RIGHT\020\006\022\026\n\022TURN_F"
      "ORWORD_UTURN\020\007\022\023\n\017TURN_LEFT_UTURN\020\010\022\023\n\017T"
      "URN_LEFT_RIGHT\020\t\022\027\n\023TURN_UTURN_FORBIDEN\020"
      "\n\022\026\n\022TURN_LEFT_FORBIDEN\020\013\022\027\n\023TURN_RIGHT_"
      "FORBIDEN\020\014\"~\n\010LaneType\022\010\n\004NONE\020\001\022\020\n\014CITY"
      "_DRIVING\020\002\022\n\n\006BIKING\020\003\022\013\n\007PARKING\020\007\022\022\n\016E"
      "MERGENCY_LINE\020\010\022\014\n\010SIDEWALK\020\004\022\017\n\013WAITING"
      "AREA\020\005\022\n\n\006HYBRID\020\006\";\n\rLaneDirection\022\013\n\007F"
      "ORWARD\020\001\022\014\n\010BACKWARD\020\002\022\017\n\013BIDIRECTION\020\003\""
      "B\n\010LaneTurn\022\013\n\007NO_TURN\020\001\022\r\n\tLEFT_TURN\020\002\022"
      "\016\n\nRIGHT_TURN\020\003\022\n\n\006U_TURN\020\004\"\244\002\n\010LaneTide"
      "\022\034\n\002id\030\001 \001(\0132\020.COWA.MapData.Id\022&\n\001a\030\002 \001("
      "\0132\033.COWA.MapData.LaneTide.Item\022&\n\001b\030\003 \001("
      "\0132\033.COWA.MapData.LaneTide.Item\022 \n\006signal"
      "\030\005 \003(\0132\020.COWA.MapData.Id\032\207\001\n\004Item\022!\n\007lan"
      "e_id\030\001 \003(\0132\020.COWA.MapData.Id\022.\n\004time\030\002 \003"
      "(\0132 .COWA.MapData.LaneTide.Item.Time\032,\n\004"
      "Time\022\022\n\nstart_time\030\001 \001(\002\022\020\n\010end_time\030\002 \001"
      "(\002\"\225\002\n\004Road\022\034\n\002id\030\001 \001(\0132\020.COWA.MapData.I"
      "d\022)\n\004type\030\002 \001(\0162\033.COWA.MapData.Road.Road"
      "Type\022#\n\tlane_id_a\030\003 \003(\0132\020.COWA.MapData.I"
      "d\022#\n\tlane_id_b\030\004 \003(\0132\020.COWA.MapData.Id\022)"
      "\n\010boundary\030\005 \001(\0132\027.COWA.MapData.LaneCurv"
      "e\"O\n\010RoadType\022\010\n\004NONE\020\001\022\020\n\014CITY_DRIVING\020"
      "\002\022\013\n\007VIADUCT\020\003\022\016\n\nEXPRESSWAY\020\004\022\n\n\006TUNNEL"
      "\020\005\"N\n\006Square\022\034\n\002id\030\001 \001(\0132\020.COWA.MapData."
      "Id\022&\n\007polygon\030\003 \001(\0132\025.COWA.MapData.Polyg"
      "on\"_\n\004Ramp\022\034\n\002id\030\001 \001(\0132\020.COWA.MapData.Id"
      "\022&\n\007polygon\030\002 \001(\0132\025.COWA.MapData.Polygon"
      "\022\021\n\toriention\030\003 \001(\002\"t\n\tCrosswalk\022\034\n\002id\030\001"
      " \001(\0132\020.COWA.MapData.Id\022&\n\007polygon\030\002 \001(\0132"
      "\025.COWA.MapData.Polygon\022\021\n\toriention\030\003 \001("
      "\002\022\016\n\006hybrid\030\004 \001(\010\"\342\001\n\010Roadmark\022\034\n\002id\030\001 \001"
      "(\0132\020.COWA.MapData.Id\022&\n\007polygon\030\002 \001(\0132\025."
      "COWA.MapData.Polygon\0221\n\004type\030\003 \001(\0162#.COW"
      "A.MapData.Roadmark.RoadmarkType\"]\n\014Roadm"
      "arkType\022\010\n\004NONE\020\001\022\r\n\tSPEEDBUMP\020\002\022\014\n\010STOP"
      "LINE\020\003\022\r\n\tYEILDLINE\020\004\022\010\n\004TEXT\020\006\022\r\n\tCLEAR"
      "AREA\020\007\"\220\001\n\014ParkingSpace\022\034\n\002id\030\001 \001(\0132\020.CO"
      "WA.MapData.Id\022&\n\007polygon\030\002 \001(\0132\025.COWA.Ma"
      "pData.Polygon\022\'\n\010boundary\030\003 \001(\0132\025.COWA.M"
      "apData.Polygon\022\021\n\toriention\030\004 \001(\002\"\331\002\n\006Ob"
      "ject\022\034\n\002id\030\001 \001(\0132\020.COWA.MapData.Id\022\'\n\004ty"
      "pe\030\002 \001(\0162\031.COWA.MapData.Object.Type\022&\n\007p"
      "olygon\030\003 \001(\0132\025.COWA.MapData.Polygon\022\"\n\005c"
      "loud\030\004 \001(\0132\023.COWA.MapData.Cloud\"\273\001\n\004Type"
      "\022\016\n\nTREE_TRUNK\020\001\022\010\n\004POLE\020\002\022\t\n\005PILES\020\003\022\013\n"
      "\007DUSTBIN\020\005\022\t\n\005BLOCK\020\006\022\014\n\010BUILDING\020\007\022\010\n\004C"
      "URB\020\010\022\016\n\nLANE_SOLID\020\t\022\017\n\013LANE_DOTTED\020\n\022\014"
      "\n\010STOPLINE\020\013\022\r\n\tCROSSWALK\020\014\022\t\n\005ARROW\020\r\022\025"
      "\n\021HIGH_REFLECTIVITY\020\016\"\204\002\n\tSubsignal\022\034\n\002i"
      "d\030\001 \001(\0132\020.COWA.MapData.Id\022*\n\004type\030\002 \001(\0162"
      "\034.COWA.MapData.Subsignal.Type\022\'\n\010boundar"
      "y\030\003 \001(\0132\025.COWA.MapData.Polygon\"\203\001\n\004Type\022"
      "\013\n\007UNKNOWN\020\001\022\024\n\020MIX_2_HORIZONTAL\020\002\022\022\n\016MI"
      "X_2_VERTICAL\020\003\022\024\n\020MIX_3_HORIZONTAL\020\004\022\022\n\016"
      "MIX_3_VERTICAL\020\005\022\n\n\006SINGLE\020\006\022\016\n\nLED_SCRE"
      "EN\020\007\"\275\002\n\006Signal\022\034\n\002id\030\001 \001(\0132\020.COWA.MapDa"
      "ta.Id\022\'\n\004type\030\002 \003(\0162\031.COWA.MapData.Signa"
      "l.Type\022*\n\tsubsignal\030\003 \003(\0132\027.COWA.MapData"
      ".Subsignal\022)\n\tstop_line\030\005 \003(\0132\026.COWA.Map"
      "Data.PointENU\022#\n\twait_lane\030\006 \003(\0132\020.COWA."
      "MapData.Id\022%\n\013wait_signal\030\007 \001(\0132\020.COWA.M"
      "apData.Id\"I\n\004Type\022\013\n\007UNKNOWN\020\001\022\n\n\006FOWARD"
      "\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004\022\t\n\005UTURN\020\005\022\010\n\004TI"
      "DE\020\006\"\343\002\n\tCrossroad\022\034\n\002id\030\001 \001(\0132\020.COWA.Ma"
      "pData.Id\022+\n\005group\030\002 \003(\0132\034.COWA.MapData.C"
      "rossroad.Line\022\'\n\010boundary\030\003 \001(\0132\025.COWA.M"
      "apData.Polygon\022*\n\004type\030\004 \001(\0162\034.COWA.MapD"
      "ata.Crossroad.Type\032\220\001\n\004Line\022!\n\007signals\030\001"
      " \003(\0132\020.COWA.MapData.Id\022!\n\007lane_in\030\002 \003(\0132"
      "\020.COWA.MapData.Id\022\"\n\010lane_out\030\003 \003(\0132\020.CO"
      "WA.MapData.Id\022\036\n\004road\030\004 \003(\0132\020.COWA.MapDa"
      "ta.Id\"#\n\004Type\022\t\n\005CROSS\020\001\022\020\n\014INTERSECTION"
      "\020\002\"\232\001\n\nLaneChange\022\034\n\002id\030\001 \001(\0132\020.COWA.Map"
      "Data.Id\022!\n\007lane_in\030\002 \003(\0132\020.COWA.MapData."
      "Id\022\"\n\010lane_out\030\003 \003(\0132\020.COWA.MapData.Id\022\'"
      "\n\010boundary\030\004 \001(\0132\025.COWA.MapData.Polygon\""
      "\277\004\n\005HdMap\022$\n\006header\030\001 \001(\0132\024.COWA.MapData"
      ".Header\022 \n\004road\030\007 \003(\0132\022.COWA.MapData.Roa"
      "d\022+\n\nlane_curve\030\013 \003(\0132\027.COWA.MapData.Lan"
      "eCurve\022 \n\004lane\030\002 \003(\0132\022.COWA.MapData.Lane"
      "\022*\n\tcrosswalk\030\003 \003(\0132\027.COWA.MapData.Cross"
      "walk\022$\n\006signal\030\004 \003(\0132\024.COWA.MapData.Sign"
      "al\022*\n\tcrossroad\030\005 \003(\0132\027.COWA.MapData.Cro"
      "ssroad\022 \n\004ramp\030\006 \003(\0132\022.COWA.MapData.Ramp"
      "\022(\n\010roadmark\030\010 \003(\0132\026.COWA.MapData.Roadma"
      "rk\0221\n\rparking_space\030\t \003(\0132\032.COWA.MapData"
      ".ParkingSpace\022&\n\007overlap\030\n \003(\0132\025.COWA.Ma"
      "pData.Overlap\022%\n\007objects\030\014 \003(\0132\024.COWA.Ma"
      "pData.Object\022-\n\013lane_change\030\r \003(\0132\030.COWA"
      ".MapData.LaneChange\022$\n\004tide\030\016 \003(\0132\026.COWA"
      ".MapData.LaneTide"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hdmap.proto", &protobuf_RegisterTypes);
  ::COWA::MapData::protobuf_hdmap_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_hdmap_2eproto

const ::google::protobuf::EnumDescriptor* LaneStrip_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[0];
}
bool LaneStrip_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneStrip_Type LaneStrip::WALL;
const LaneStrip_Type LaneStrip::FENCE;
const LaneStrip_Type LaneStrip::GREEN;
const LaneStrip_Type LaneStrip::Type_MIN;
const LaneStrip_Type LaneStrip::Type_MAX;
const int LaneStrip::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LanePoint_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[1];
}
bool LanePoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LanePoint_Type LanePoint::UNKNOWN;
const LanePoint_Type LanePoint::DOTTED_YELLOW;
const LanePoint_Type LanePoint::DOTTED_WHITE;
const LanePoint_Type LanePoint::SOLID_YELLOW;
const LanePoint_Type LanePoint::SOLID_WHITE;
const LanePoint_Type LanePoint::DOUBLE_YELLOW;
const LanePoint_Type LanePoint::CURB;
const LanePoint_Type LanePoint::BLANK;
const LanePoint_Type LanePoint::VIRTUAL;
const LanePoint_Type LanePoint::Type_MIN;
const LanePoint_Type LanePoint::Type_MAX;
const int LanePoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneCurve_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[2];
}
bool LaneCurve_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneCurve_Type LaneCurve::REALITY;
const LaneCurve_Type LaneCurve::VIRTUAL;
const LaneCurve_Type LaneCurve::CENTRAL;
const LaneCurve_Type LaneCurve::Type_MIN;
const LaneCurve_Type LaneCurve::Type_MAX;
const int LaneCurve::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneMark_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[3];
}
bool Lane_LaneMark_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneMark_Type Lane_LaneMark::TEXT;
const Lane_LaneMark_Type Lane_LaneMark::TURN_FORWORD;
const Lane_LaneMark_Type Lane_LaneMark::TURN_UTURN;
const Lane_LaneMark_Type Lane_LaneMark::TURN_LEFT;
const Lane_LaneMark_Type Lane_LaneMark::TURN_RIGHT;
const Lane_LaneMark_Type Lane_LaneMark::TURN_FORWORD_LEFT;
const Lane_LaneMark_Type Lane_LaneMark::TURN_FORWORD_RIGHT;
const Lane_LaneMark_Type Lane_LaneMark::TURN_FORWORD_UTURN;
const Lane_LaneMark_Type Lane_LaneMark::TURN_LEFT_UTURN;
const Lane_LaneMark_Type Lane_LaneMark::TURN_LEFT_RIGHT;
const Lane_LaneMark_Type Lane_LaneMark::TURN_UTURN_FORBIDEN;
const Lane_LaneMark_Type Lane_LaneMark::TURN_LEFT_FORBIDEN;
const Lane_LaneMark_Type Lane_LaneMark::TURN_RIGHT_FORBIDEN;
const Lane_LaneMark_Type Lane_LaneMark::Type_MIN;
const Lane_LaneMark_Type Lane_LaneMark::Type_MAX;
const int Lane_LaneMark::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneType_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[4];
}
bool Lane_LaneType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneType Lane::NONE;
const Lane_LaneType Lane::CITY_DRIVING;
const Lane_LaneType Lane::BIKING;
const Lane_LaneType Lane::PARKING;
const Lane_LaneType Lane::EMERGENCY_LINE;
const Lane_LaneType Lane::SIDEWALK;
const Lane_LaneType Lane::WAITINGAREA;
const Lane_LaneType Lane::HYBRID;
const Lane_LaneType Lane::LaneType_MIN;
const Lane_LaneType Lane::LaneType_MAX;
const int Lane::LaneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneDirection_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[5];
}
bool Lane_LaneDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneDirection Lane::FORWARD;
const Lane_LaneDirection Lane::BACKWARD;
const Lane_LaneDirection Lane::BIDIRECTION;
const Lane_LaneDirection Lane::LaneDirection_MIN;
const Lane_LaneDirection Lane::LaneDirection_MAX;
const int Lane::LaneDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[6];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneTurn Lane::NO_TURN;
const Lane_LaneTurn Lane::LEFT_TURN;
const Lane_LaneTurn Lane::RIGHT_TURN;
const Lane_LaneTurn Lane::U_TURN;
const Lane_LaneTurn Lane::LaneTurn_MIN;
const Lane_LaneTurn Lane::LaneTurn_MAX;
const int Lane::LaneTurn_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Road_RoadType_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[7];
}
bool Road_RoadType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Road_RoadType Road::NONE;
const Road_RoadType Road::CITY_DRIVING;
const Road_RoadType Road::VIADUCT;
const Road_RoadType Road::EXPRESSWAY;
const Road_RoadType Road::TUNNEL;
const Road_RoadType Road::RoadType_MIN;
const Road_RoadType Road::RoadType_MAX;
const int Road::RoadType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Roadmark_RoadmarkType_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[8];
}
bool Roadmark_RoadmarkType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Roadmark_RoadmarkType Roadmark::NONE;
const Roadmark_RoadmarkType Roadmark::SPEEDBUMP;
const Roadmark_RoadmarkType Roadmark::STOPLINE;
const Roadmark_RoadmarkType Roadmark::YEILDLINE;
const Roadmark_RoadmarkType Roadmark::TEXT;
const Roadmark_RoadmarkType Roadmark::CLEARAREA;
const Roadmark_RoadmarkType Roadmark::RoadmarkType_MIN;
const Roadmark_RoadmarkType Roadmark::RoadmarkType_MAX;
const int Roadmark::RoadmarkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[9];
}
bool Object_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_Type Object::TREE_TRUNK;
const Object_Type Object::POLE;
const Object_Type Object::PILES;
const Object_Type Object::DUSTBIN;
const Object_Type Object::BLOCK;
const Object_Type Object::BUILDING;
const Object_Type Object::CURB;
const Object_Type Object::LANE_SOLID;
const Object_Type Object::LANE_DOTTED;
const Object_Type Object::STOPLINE;
const Object_Type Object::CROSSWALK;
const Object_Type Object::ARROW;
const Object_Type Object::HIGH_REFLECTIVITY;
const Object_Type Object::Type_MIN;
const Object_Type Object::Type_MAX;
const int Object::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[10];
}
bool Subsignal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Subsignal_Type Subsignal::UNKNOWN;
const Subsignal_Type Subsignal::MIX_2_HORIZONTAL;
const Subsignal_Type Subsignal::MIX_2_VERTICAL;
const Subsignal_Type Subsignal::MIX_3_HORIZONTAL;
const Subsignal_Type Subsignal::MIX_3_VERTICAL;
const Subsignal_Type Subsignal::SINGLE;
const Subsignal_Type Subsignal::LED_SCREEN;
const Subsignal_Type Subsignal::Type_MIN;
const Subsignal_Type Subsignal::Type_MAX;
const int Subsignal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[11];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::UNKNOWN;
const Signal_Type Signal::FOWARD;
const Signal_Type Signal::LEFT;
const Signal_Type Signal::RIGHT;
const Signal_Type Signal::UTURN;
const Signal_Type Signal::TIDE;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Crossroad_Type_descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_enum_descriptors[12];
}
bool Crossroad_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Crossroad_Type Crossroad::CROSS;
const Crossroad_Type Crossroad::INTERSECTION;
const Crossroad_Type Crossroad::Type_MIN;
const Crossroad_Type Crossroad::Type_MAX;
const int Crossroad::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneStrip::kStartSFieldNumber;
const int LaneStrip::kEndSFieldNumber;
const int LaneStrip::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneStrip::LaneStrip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LaneStrip)
}
LaneStrip::LaneStrip(const LaneStrip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_s_, &from.start_s_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LaneStrip)
}

void LaneStrip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_s_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(height_));
}

LaneStrip::~LaneStrip() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LaneStrip)
  SharedDtor();
}

void LaneStrip::SharedDtor() {
}

void LaneStrip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneStrip::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneStrip& LaneStrip::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneStrip* LaneStrip::New(::google::protobuf::Arena* arena) const {
  LaneStrip* n = new LaneStrip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneStrip::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LaneStrip)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&start_s_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&start_s_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneStrip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LaneStrip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float end_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LaneStrip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LaneStrip)
  return false;
#undef DO_
}

void LaneStrip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LaneStrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_s(), output);
  }

  // optional float end_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_s(), output);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LaneStrip)
}

::google::protobuf::uint8* LaneStrip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LaneStrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_s(), target);
  }

  // optional float end_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_s(), target);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LaneStrip)
  return target;
}

size_t LaneStrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LaneStrip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float start_s = 1;
    if (has_start_s()) {
      total_size += 1 + 4;
    }

    // optional float end_s = 2;
    if (has_end_s()) {
      total_size += 1 + 4;
    }

    // optional float height = 3;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneStrip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LaneStrip)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneStrip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneStrip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LaneStrip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LaneStrip)
    MergeFrom(*source);
  }
}

void LaneStrip::MergeFrom(const LaneStrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LaneStrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneStrip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LaneStrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneStrip::CopyFrom(const LaneStrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LaneStrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneStrip::IsInitialized() const {
  return true;
}

void LaneStrip::Swap(LaneStrip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneStrip::InternalSwap(LaneStrip* other) {
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneStrip::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneStrip

// optional float start_s = 1;
bool LaneStrip::has_start_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneStrip::set_has_start_s() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneStrip::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneStrip::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
float LaneStrip::start_s() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneStrip.start_s)
  return start_s_;
}
void LaneStrip::set_start_s(float value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneStrip.start_s)
}

// optional float end_s = 2;
bool LaneStrip::has_end_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneStrip::set_has_end_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneStrip::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneStrip::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
float LaneStrip::end_s() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneStrip.end_s)
  return end_s_;
}
void LaneStrip::set_end_s(float value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneStrip.end_s)
}

// optional float height = 3;
bool LaneStrip::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneStrip::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneStrip::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneStrip::clear_height() {
  height_ = 0;
  clear_has_height();
}
float LaneStrip::height() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneStrip.height)
  return height_;
}
void LaneStrip::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneStrip.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanePoint::kXFieldNumber;
const int LanePoint::kYFieldNumber;
const int LanePoint::kZFieldNumber;
const int LanePoint::kTypeFieldNumber;
const int LanePoint::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanePoint::LanePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LanePoint)
}
LanePoint::LanePoint(const LanePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LanePoint)
}

void LanePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
}

LanePoint::~LanePoint() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LanePoint)
  SharedDtor();
}

void LanePoint::SharedDtor() {
}

void LanePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanePoint::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanePoint& LanePoint::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LanePoint* LanePoint::New(::google::protobuf::Arena* arena) const {
  LanePoint* n = new LanePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LanePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LanePoint)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LanePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LanePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.LanePoint.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::LanePoint_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::LanePoint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LanePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LanePoint)
  return false;
#undef DO_
}

void LanePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional .COWA.MapData.LanePoint.Type type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional float height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LanePoint)
}

::google::protobuf::uint8* LanePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional .COWA.MapData.LanePoint.Type type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional float height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LanePoint)
  return target;
}

size_t LanePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LanePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional .COWA.MapData.LanePoint.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float height = 5;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LanePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LanePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LanePoint)
    MergeFrom(*source);
  }
}

void LanePoint::MergeFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LanePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanePoint::CopyFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePoint::IsInitialized() const {
  return true;
}

void LanePoint::Swap(LanePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanePoint::InternalSwap(LanePoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(type_, other->type_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LanePoint::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LanePoint

// optional float x = 1;
bool LanePoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LanePoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void LanePoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void LanePoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
float LanePoint::x() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LanePoint.x)
  return x_;
}
void LanePoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LanePoint.x)
}

// optional float y = 2;
bool LanePoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LanePoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void LanePoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void LanePoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
float LanePoint::y() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LanePoint.y)
  return y_;
}
void LanePoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LanePoint.y)
}

// optional float z = 3;
bool LanePoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LanePoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void LanePoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void LanePoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
float LanePoint::z() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LanePoint.z)
  return z_;
}
void LanePoint::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LanePoint.z)
}

// optional .COWA.MapData.LanePoint.Type type = 4;
bool LanePoint::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LanePoint::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LanePoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LanePoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
::COWA::MapData::LanePoint_Type LanePoint::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LanePoint.type)
  return static_cast< ::COWA::MapData::LanePoint_Type >(type_);
}
void LanePoint::set_type(::COWA::MapData::LanePoint_Type value) {
  assert(::COWA::MapData::LanePoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LanePoint.type)
}

// optional float height = 5;
bool LanePoint::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LanePoint::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void LanePoint::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void LanePoint::clear_height() {
  height_ = 0;
  clear_has_height();
}
float LanePoint::height() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LanePoint.height)
  return height_;
}
void LanePoint::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LanePoint.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneCurve::kIdFieldNumber;
const int LaneCurve::kPointFieldNumber;
const int LaneCurve::kOffsetXFieldNumber;
const int LaneCurve::kOffsetYFieldNumber;
const int LaneCurve::kTypeFieldNumber;
const int LaneCurve::kStripFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneCurve::LaneCurve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LaneCurve)
}
LaneCurve::LaneCurve(const LaneCurve& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_),
      strip_(from.strip_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&offset_x_, &from.offset_x_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&offset_x_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LaneCurve)
}

void LaneCurve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

LaneCurve::~LaneCurve() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LaneCurve)
  SharedDtor();
}

void LaneCurve::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
}

void LaneCurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneCurve::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneCurve& LaneCurve::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneCurve* LaneCurve::New(::google::protobuf::Arena* arena) const {
  LaneCurve* n = new LaneCurve;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LaneCurve)
  point_.Clear();
  strip_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::COWA::MapData::Id::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&offset_x_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&offset_x_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneCurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LaneCurve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .COWA.MapData.LanePoint point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Id id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double offset_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_offset_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double offset_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_offset_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.LaneCurve.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::LaneCurve_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::LaneCurve_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.LaneStrip strip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LaneCurve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LaneCurve)
  return false;
#undef DO_
}

void LaneCurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LaneCurve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .COWA.MapData.LanePoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // optional double offset_x = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->offset_x(), output);
  }

  // optional double offset_y = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->offset_y(), output);
  }

  // optional .COWA.MapData.LaneCurve.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .COWA.MapData.LaneStrip strip = 6;
  for (unsigned int i = 0, n = this->strip_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->strip(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LaneCurve)
}

::google::protobuf::uint8* LaneCurve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LaneCurve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .COWA.MapData.LanePoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, deterministic, target);
  }

  // optional double offset_x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->offset_x(), target);
  }

  // optional double offset_y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->offset_y(), target);
  }

  // optional .COWA.MapData.LaneCurve.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .COWA.MapData.LaneStrip strip = 6;
  for (unsigned int i = 0, n = this->strip_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->strip(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LaneCurve)
  return target;
}

size_t LaneCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LaneCurve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.LanePoint point = 1;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  // repeated .COWA.MapData.LaneStrip strip = 6;
  {
    unsigned int count = this->strip_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strip(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .COWA.MapData.Id id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional double offset_x = 3;
    if (has_offset_x()) {
      total_size += 1 + 8;
    }

    // optional double offset_y = 4;
    if (has_offset_y()) {
      total_size += 1 + 8;
    }

    // optional .COWA.MapData.LaneCurve.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneCurve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LaneCurve)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneCurve* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneCurve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LaneCurve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LaneCurve)
    MergeFrom(*source);
  }
}

void LaneCurve::MergeFrom(const LaneCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LaneCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  strip_.MergeFrom(from.strip_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_x_ = from.offset_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_y_ = from.offset_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneCurve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LaneCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneCurve::CopyFrom(const LaneCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LaneCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneCurve::IsInitialized() const {
  return true;
}

void LaneCurve::Swap(LaneCurve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneCurve::InternalSwap(LaneCurve* other) {
  point_.InternalSwap(&other->point_);
  strip_.InternalSwap(&other->strip_);
  std::swap(id_, other->id_);
  std::swap(offset_x_, other->offset_x_);
  std::swap(offset_y_, other->offset_y_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneCurve::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneCurve

// optional .COWA.MapData.Id id = 2;
bool LaneCurve::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneCurve::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneCurve::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneCurve::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& LaneCurve::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneCurve.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* LaneCurve::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneCurve.id)
  return id_;
}
::COWA::MapData::Id* LaneCurve::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.LaneCurve.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void LaneCurve::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.LaneCurve.id)
}

// repeated .COWA.MapData.LanePoint point = 1;
int LaneCurve::point_size() const {
  return point_.size();
}
void LaneCurve::clear_point() {
  point_.Clear();
}
const ::COWA::MapData::LanePoint& LaneCurve::point(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneCurve.point)
  return point_.Get(index);
}
::COWA::MapData::LanePoint* LaneCurve::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneCurve.point)
  return point_.Mutable(index);
}
::COWA::MapData::LanePoint* LaneCurve::add_point() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneCurve.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::LanePoint >*
LaneCurve::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneCurve.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::LanePoint >&
LaneCurve::point() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneCurve.point)
  return point_;
}

// optional double offset_x = 3;
bool LaneCurve::has_offset_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneCurve::set_has_offset_x() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneCurve::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneCurve::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
double LaneCurve::offset_x() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneCurve.offset_x)
  return offset_x_;
}
void LaneCurve::set_offset_x(double value) {
  set_has_offset_x();
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneCurve.offset_x)
}

// optional double offset_y = 4;
bool LaneCurve::has_offset_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneCurve::set_has_offset_y() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneCurve::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneCurve::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
double LaneCurve::offset_y() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneCurve.offset_y)
  return offset_y_;
}
void LaneCurve::set_offset_y(double value) {
  set_has_offset_y();
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneCurve.offset_y)
}

// optional .COWA.MapData.LaneCurve.Type type = 5;
bool LaneCurve::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneCurve::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneCurve::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneCurve::clear_type() {
  type_ = 0;
  clear_has_type();
}
::COWA::MapData::LaneCurve_Type LaneCurve::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneCurve.type)
  return static_cast< ::COWA::MapData::LaneCurve_Type >(type_);
}
void LaneCurve::set_type(::COWA::MapData::LaneCurve_Type value) {
  assert(::COWA::MapData::LaneCurve_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneCurve.type)
}

// repeated .COWA.MapData.LaneStrip strip = 6;
int LaneCurve::strip_size() const {
  return strip_.size();
}
void LaneCurve::clear_strip() {
  strip_.Clear();
}
const ::COWA::MapData::LaneStrip& LaneCurve::strip(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneCurve.strip)
  return strip_.Get(index);
}
::COWA::MapData::LaneStrip* LaneCurve::mutable_strip(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneCurve.strip)
  return strip_.Mutable(index);
}
::COWA::MapData::LaneStrip* LaneCurve::add_strip() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneCurve.strip)
  return strip_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneStrip >*
LaneCurve::mutable_strip() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneCurve.strip)
  return &strip_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneStrip >&
LaneCurve::strip() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneCurve.strip)
  return strip_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane_LaneMark::kTypeFieldNumber;
const int Lane_LaneMark::kCentroidFieldNumber;
const int Lane_LaneMark::kTextFieldNumber;
const int Lane_LaneMark::kPolygonFieldNumber;
const int Lane_LaneMark::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane_LaneMark::Lane_LaneMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Lane.LaneMark)
}
Lane_LaneMark::Lane_LaneMark(const Lane_LaneMark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_centroid()) {
    centroid_ = new ::COWA::MapData::PointENU(*from.centroid_);
  } else {
    centroid_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&type_) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Lane.LaneMark)
}

void Lane_LaneMark::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&centroid_, 0, reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&centroid_) + sizeof(direction_));
}

Lane_LaneMark::~Lane_LaneMark() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Lane.LaneMark)
  SharedDtor();
}

void Lane_LaneMark::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete centroid_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Lane_LaneMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane_LaneMark::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane_LaneMark& Lane_LaneMark::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lane_LaneMark* Lane_LaneMark::New(::google::protobuf::Arena* arena) const {
  Lane_LaneMark* n = new Lane_LaneMark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane_LaneMark::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Lane.LaneMark)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_text()) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (has_centroid()) {
      GOOGLE_DCHECK(centroid_ != NULL);
      centroid_->::COWA::MapData::PointENU::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&type_) + sizeof(direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane_LaneMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Lane.LaneMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Lane.LaneMark.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Lane_LaneMark_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Lane_LaneMark_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.PointENU centroid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "COWA.MapData.Lane.LaneMark.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Lane.LaneMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Lane.LaneMark)
  return false;
#undef DO_
}

void Lane_LaneMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Lane.LaneMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Lane.LaneMark.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .COWA.MapData.PointENU centroid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->centroid_, output);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.MapData.Lane.LaneMark.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional .COWA.MapData.Polygon polygon = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->polygon_, output);
  }

  // optional float direction = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Lane.LaneMark)
}

::google::protobuf::uint8* Lane_LaneMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Lane.LaneMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Lane.LaneMark.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .COWA.MapData.PointENU centroid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->centroid_, deterministic, target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.MapData.Lane.LaneMark.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional .COWA.MapData.Polygon polygon = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->polygon_, deterministic, target);
  }

  // optional float direction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Lane.LaneMark)
  return target;
}

size_t Lane_LaneMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Lane.LaneMark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .COWA.MapData.PointENU centroid = 2;
    if (has_centroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->centroid_);
    }

    // optional .COWA.MapData.Polygon polygon = 4;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional .COWA.MapData.Lane.LaneMark.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float direction = 5;
    if (has_direction()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane_LaneMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Lane.LaneMark)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_LaneMark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane_LaneMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Lane.LaneMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Lane.LaneMark)
    MergeFrom(*source);
  }
}

void Lane_LaneMark::MergeFrom(const Lane_LaneMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Lane.LaneMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_centroid()->::COWA::MapData::PointENU::MergeFrom(from.centroid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane_LaneMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Lane.LaneMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_LaneMark::CopyFrom(const Lane_LaneMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Lane.LaneMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_LaneMark::IsInitialized() const {
  return true;
}

void Lane_LaneMark::Swap(Lane_LaneMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane_LaneMark::InternalSwap(Lane_LaneMark* other) {
  text_.Swap(&other->text_);
  std::swap(centroid_, other->centroid_);
  std::swap(polygon_, other->polygon_);
  std::swap(type_, other->type_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane_LaneMark::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane_LaneMark

// optional .COWA.MapData.Lane.LaneMark.Type type = 1;
bool Lane_LaneMark::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Lane_LaneMark::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Lane_LaneMark::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Lane_LaneMark::clear_type() {
  type_ = 0;
  clear_has_type();
}
::COWA::MapData::Lane_LaneMark_Type Lane_LaneMark::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.LaneMark.type)
  return static_cast< ::COWA::MapData::Lane_LaneMark_Type >(type_);
}
void Lane_LaneMark::set_type(::COWA::MapData::Lane_LaneMark_Type value) {
  assert(::COWA::MapData::Lane_LaneMark_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.LaneMark.type)
}

// optional .COWA.MapData.PointENU centroid = 2;
bool Lane_LaneMark::has_centroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lane_LaneMark::set_has_centroid() {
  _has_bits_[0] |= 0x00000002u;
}
void Lane_LaneMark::clear_has_centroid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lane_LaneMark::clear_centroid() {
  if (centroid_ != NULL) centroid_->::COWA::MapData::PointENU::Clear();
  clear_has_centroid();
}
const ::COWA::MapData::PointENU& Lane_LaneMark::centroid() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.LaneMark.centroid)
  return centroid_ != NULL ? *centroid_
                         : *::COWA::MapData::PointENU::internal_default_instance();
}
::COWA::MapData::PointENU* Lane_LaneMark::mutable_centroid() {
  set_has_centroid();
  if (centroid_ == NULL) {
    centroid_ = new ::COWA::MapData::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.LaneMark.centroid)
  return centroid_;
}
::COWA::MapData::PointENU* Lane_LaneMark::release_centroid() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Lane.LaneMark.centroid)
  clear_has_centroid();
  ::COWA::MapData::PointENU* temp = centroid_;
  centroid_ = NULL;
  return temp;
}
void Lane_LaneMark::set_allocated_centroid(::COWA::MapData::PointENU* centroid) {
  delete centroid_;
  centroid_ = centroid;
  if (centroid) {
    set_has_centroid();
  } else {
    clear_has_centroid();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Lane.LaneMark.centroid)
}

// optional string text = 3;
bool Lane_LaneMark::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lane_LaneMark::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Lane_LaneMark::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lane_LaneMark::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Lane_LaneMark::text() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.LaneMark.text)
  return text_.GetNoArena();
}
void Lane_LaneMark::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.LaneMark.text)
}
#if LANG_CXX11
void Lane_LaneMark::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.MapData.Lane.LaneMark.text)
}
#endif
void Lane_LaneMark::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.MapData.Lane.LaneMark.text)
}
void Lane_LaneMark::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.MapData.Lane.LaneMark.text)
}
::std::string* Lane_LaneMark::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.LaneMark.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lane_LaneMark::release_text() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Lane.LaneMark.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lane_LaneMark::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Lane.LaneMark.text)
}

// optional .COWA.MapData.Polygon polygon = 4;
bool Lane_LaneMark::has_polygon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lane_LaneMark::set_has_polygon() {
  _has_bits_[0] |= 0x00000004u;
}
void Lane_LaneMark::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lane_LaneMark::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& Lane_LaneMark::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.LaneMark.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Lane_LaneMark::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.LaneMark.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* Lane_LaneMark::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Lane.LaneMark.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Lane_LaneMark::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Lane.LaneMark.polygon)
}

// optional float direction = 5;
bool Lane_LaneMark::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Lane_LaneMark::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
void Lane_LaneMark::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
void Lane_LaneMark::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
float Lane_LaneMark::direction() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.LaneMark.direction)
  return direction_;
}
void Lane_LaneMark::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.LaneMark.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kTypeFieldNumber;
const int Lane::kCentralLineFieldNumber;
const int Lane::kLeftLineFieldNumber;
const int Lane::kRightLineFieldNumber;
const int Lane::kLengthFieldNumber;
const int Lane::kSpeedLimitFieldNumber;
const int Lane::kMinSpeedLimitFieldNumber;
const int Lane::kPredecessorIdFieldNumber;
const int Lane::kSuccessorIdFieldNumber;
const int Lane::kLeftNeighborForwardLaneIdFieldNumber;
const int Lane::kRightNeighborForwardLaneIdFieldNumber;
const int Lane::kLeftNeighborReverseLaneIdFieldNumber;
const int Lane::kRightNeighborReverseLaneIdFieldNumber;
const int Lane::kDirectionFieldNumber;
const int Lane::kTurnFieldNumber;
const int Lane::kMarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      left_line_(from.left_line_),
      right_line_(from.right_line_),
      predecessor_id_(from.predecessor_id_),
      successor_id_(from.successor_id_),
      left_neighbor_forward_lane_id_(from.left_neighbor_forward_lane_id_),
      right_neighbor_forward_lane_id_(from.right_neighbor_forward_lane_id_),
      left_neighbor_reverse_lane_id_(from.left_neighbor_reverse_lane_id_),
      right_neighbor_reverse_lane_id_(from.right_neighbor_reverse_lane_id_),
      mark_(from.mark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_central_line()) {
    central_line_ = new ::COWA::MapData::Id(*from.central_line_);
  } else {
    central_line_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&length_) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Lane)
}

void Lane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&min_speed_limit_) -
    reinterpret_cast<char*>(&id_) + sizeof(min_speed_limit_));
  turn_ = 1;
  type_ = 1;
  direction_ = 1;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete central_line_;
  }
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Lane)
  left_line_.Clear();
  right_line_.Clear();
  predecessor_id_.Clear();
  successor_id_.Clear();
  left_neighbor_forward_lane_id_.Clear();
  right_neighbor_forward_lane_id_.Clear();
  left_neighbor_reverse_lane_id_.Clear();
  right_neighbor_reverse_lane_id_.Clear();
  mark_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_central_line()) {
      GOOGLE_DCHECK(central_line_ != NULL);
      central_line_->::COWA::MapData::Id::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&min_speed_limit_) -
      reinterpret_cast<char*>(&length_) + sizeof(min_speed_limit_));
    turn_ = 1;
    type_ = 1;
    direction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Lane.LaneType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Lane_LaneType_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Id central_line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_central_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id left_line = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id right_line = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id predecessor_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predecessor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id successor_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_successor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id left_neighbor_forward_lane_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id right_neighbor_forward_lane_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id left_neighbor_reverse_lane_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id right_neighbor_reverse_lane_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Lane.LaneDirection direction = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Lane_LaneDirection_IsValid(value)) {
            set_direction(static_cast< ::COWA::MapData::Lane_LaneDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Lane.LaneTurn turn = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Lane_LaneTurn_IsValid(value)) {
            set_turn(static_cast< ::COWA::MapData::Lane_LaneTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_speed_limit = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_min_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Lane.LaneMark mark = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Lane.LaneType type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .COWA.MapData.Id central_line = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->central_line_, output);
  }

  // repeated .COWA.MapData.Id left_line = 4;
  for (unsigned int i = 0, n = this->left_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->left_line(i), output);
  }

  // repeated .COWA.MapData.Id right_line = 5;
  for (unsigned int i = 0, n = this->right_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->right_line(i), output);
  }

  // optional float length = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->length(), output);
  }

  // optional float speed_limit = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed_limit(), output);
  }

  // repeated .COWA.MapData.Id predecessor_id = 8;
  for (unsigned int i = 0, n = this->predecessor_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->predecessor_id(i), output);
  }

  // repeated .COWA.MapData.Id successor_id = 9;
  for (unsigned int i = 0, n = this->successor_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->successor_id(i), output);
  }

  // repeated .COWA.MapData.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0, n = this->left_neighbor_forward_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->left_neighbor_forward_lane_id(i), output);
  }

  // repeated .COWA.MapData.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0, n = this->right_neighbor_forward_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->right_neighbor_forward_lane_id(i), output);
  }

  // repeated .COWA.MapData.Id left_neighbor_reverse_lane_id = 12;
  for (unsigned int i = 0, n = this->left_neighbor_reverse_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->left_neighbor_reverse_lane_id(i), output);
  }

  // repeated .COWA.MapData.Id right_neighbor_reverse_lane_id = 13;
  for (unsigned int i = 0, n = this->right_neighbor_reverse_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->right_neighbor_reverse_lane_id(i), output);
  }

  // optional .COWA.MapData.Lane.LaneDirection direction = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->direction(), output);
  }

  // optional .COWA.MapData.Lane.LaneTurn turn = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->turn(), output);
  }

  // optional float min_speed_limit = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->min_speed_limit(), output);
  }

  // repeated .COWA.MapData.Lane.LaneMark mark = 17;
  for (unsigned int i = 0, n = this->mark_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->mark(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Lane.LaneType type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .COWA.MapData.Id central_line = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->central_line_, deterministic, target);
  }

  // repeated .COWA.MapData.Id left_line = 4;
  for (unsigned int i = 0, n = this->left_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->left_line(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id right_line = 5;
  for (unsigned int i = 0, n = this->right_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->right_line(i), deterministic, target);
  }

  // optional float length = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->length(), target);
  }

  // optional float speed_limit = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speed_limit(), target);
  }

  // repeated .COWA.MapData.Id predecessor_id = 8;
  for (unsigned int i = 0, n = this->predecessor_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->predecessor_id(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id successor_id = 9;
  for (unsigned int i = 0, n = this->successor_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->successor_id(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0, n = this->left_neighbor_forward_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->left_neighbor_forward_lane_id(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0, n = this->right_neighbor_forward_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->right_neighbor_forward_lane_id(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id left_neighbor_reverse_lane_id = 12;
  for (unsigned int i = 0, n = this->left_neighbor_reverse_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->left_neighbor_reverse_lane_id(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id right_neighbor_reverse_lane_id = 13;
  for (unsigned int i = 0, n = this->right_neighbor_reverse_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->right_neighbor_reverse_lane_id(i), deterministic, target);
  }

  // optional .COWA.MapData.Lane.LaneDirection direction = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->direction(), target);
  }

  // optional .COWA.MapData.Lane.LaneTurn turn = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->turn(), target);
  }

  // optional float min_speed_limit = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->min_speed_limit(), target);
  }

  // repeated .COWA.MapData.Lane.LaneMark mark = 17;
  for (unsigned int i = 0, n = this->mark_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->mark(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Id left_line = 4;
  {
    unsigned int count = this->left_line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_line(i));
    }
  }

  // repeated .COWA.MapData.Id right_line = 5;
  {
    unsigned int count = this->right_line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_line(i));
    }
  }

  // repeated .COWA.MapData.Id predecessor_id = 8;
  {
    unsigned int count = this->predecessor_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predecessor_id(i));
    }
  }

  // repeated .COWA.MapData.Id successor_id = 9;
  {
    unsigned int count = this->successor_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->successor_id(i));
    }
  }

  // repeated .COWA.MapData.Id left_neighbor_forward_lane_id = 10;
  {
    unsigned int count = this->left_neighbor_forward_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_neighbor_forward_lane_id(i));
    }
  }

  // repeated .COWA.MapData.Id right_neighbor_forward_lane_id = 11;
  {
    unsigned int count = this->right_neighbor_forward_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_neighbor_forward_lane_id(i));
    }
  }

  // repeated .COWA.MapData.Id left_neighbor_reverse_lane_id = 12;
  {
    unsigned int count = this->left_neighbor_reverse_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_neighbor_reverse_lane_id(i));
    }
  }

  // repeated .COWA.MapData.Id right_neighbor_reverse_lane_id = 13;
  {
    unsigned int count = this->right_neighbor_reverse_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_neighbor_reverse_lane_id(i));
    }
  }

  // repeated .COWA.MapData.Lane.LaneMark mark = 17;
  {
    unsigned int count = this->mark_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mark(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Id central_line = 3;
    if (has_central_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->central_line_);
    }

    // optional float length = 6;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional float speed_limit = 7;
    if (has_speed_limit()) {
      total_size += 1 + 4;
    }

    // optional float min_speed_limit = 16;
    if (has_min_speed_limit()) {
      total_size += 2 + 4;
    }

    // optional .COWA.MapData.Lane.LaneTurn turn = 15;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn());
    }

    // optional .COWA.MapData.Lane.LaneType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .COWA.MapData.Lane.LaneDirection direction = 14;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_line_.MergeFrom(from.left_line_);
  right_line_.MergeFrom(from.right_line_);
  predecessor_id_.MergeFrom(from.predecessor_id_);
  successor_id_.MergeFrom(from.successor_id_);
  left_neighbor_forward_lane_id_.MergeFrom(from.left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.MergeFrom(from.right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.MergeFrom(from.left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.MergeFrom(from.right_neighbor_reverse_lane_id_);
  mark_.MergeFrom(from.mark_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_central_line()->::COWA::MapData::Id::MergeFrom(from.central_line());
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_speed_limit_ = from.min_speed_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      turn_ = from.turn_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  left_line_.InternalSwap(&other->left_line_);
  right_line_.InternalSwap(&other->right_line_);
  predecessor_id_.InternalSwap(&other->predecessor_id_);
  successor_id_.InternalSwap(&other->successor_id_);
  left_neighbor_forward_lane_id_.InternalSwap(&other->left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.InternalSwap(&other->right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.InternalSwap(&other->left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.InternalSwap(&other->right_neighbor_reverse_lane_id_);
  mark_.InternalSwap(&other->mark_);
  std::swap(id_, other->id_);
  std::swap(central_line_, other->central_line_);
  std::swap(length_, other->length_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(min_speed_limit_, other->min_speed_limit_);
  std::swap(turn_, other->turn_);
  std::swap(type_, other->type_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane

// optional .COWA.MapData.Id id = 1;
bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Lane::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.id)
  return id_;
}
::COWA::MapData::Id* Lane::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Lane.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Lane::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Lane.id)
}

// optional .COWA.MapData.Lane.LaneType type = 2;
bool Lane::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Lane::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void Lane::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void Lane::clear_type() {
  type_ = 1;
  clear_has_type();
}
::COWA::MapData::Lane_LaneType Lane::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.type)
  return static_cast< ::COWA::MapData::Lane_LaneType >(type_);
}
void Lane::set_type(::COWA::MapData::Lane_LaneType value) {
  assert(::COWA::MapData::Lane_LaneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.type)
}

// optional .COWA.MapData.Id central_line = 3;
bool Lane::has_central_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lane::set_has_central_line() {
  _has_bits_[0] |= 0x00000002u;
}
void Lane::clear_has_central_line() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_central_line() {
  if (central_line_ != NULL) central_line_->::COWA::MapData::Id::Clear();
  clear_has_central_line();
}
const ::COWA::MapData::Id& Lane::central_line() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.central_line)
  return central_line_ != NULL ? *central_line_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Lane::mutable_central_line() {
  set_has_central_line();
  if (central_line_ == NULL) {
    central_line_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.central_line)
  return central_line_;
}
::COWA::MapData::Id* Lane::release_central_line() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Lane.central_line)
  clear_has_central_line();
  ::COWA::MapData::Id* temp = central_line_;
  central_line_ = NULL;
  return temp;
}
void Lane::set_allocated_central_line(::COWA::MapData::Id* central_line) {
  delete central_line_;
  central_line_ = central_line;
  if (central_line) {
    set_has_central_line();
  } else {
    clear_has_central_line();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Lane.central_line)
}

// repeated .COWA.MapData.Id left_line = 4;
int Lane::left_line_size() const {
  return left_line_.size();
}
void Lane::clear_left_line() {
  left_line_.Clear();
}
const ::COWA::MapData::Id& Lane::left_line(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.left_line)
  return left_line_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_left_line(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.left_line)
  return left_line_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_left_line() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.left_line)
  return left_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_left_line() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.left_line)
  return &left_line_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::left_line() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.left_line)
  return left_line_;
}

// repeated .COWA.MapData.Id right_line = 5;
int Lane::right_line_size() const {
  return right_line_.size();
}
void Lane::clear_right_line() {
  right_line_.Clear();
}
const ::COWA::MapData::Id& Lane::right_line(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.right_line)
  return right_line_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_right_line(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.right_line)
  return right_line_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_right_line() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.right_line)
  return right_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_right_line() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.right_line)
  return &right_line_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::right_line() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.right_line)
  return right_line_;
}

// optional float length = 6;
bool Lane::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lane::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void Lane::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lane::clear_length() {
  length_ = 0;
  clear_has_length();
}
float Lane::length() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.length)
  return length_;
}
void Lane::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.length)
}

// optional float speed_limit = 7;
bool Lane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Lane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void Lane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void Lane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
float Lane::speed_limit() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.speed_limit)
  return speed_limit_;
}
void Lane::set_speed_limit(float value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.speed_limit)
}

// optional float min_speed_limit = 16;
bool Lane::has_min_speed_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Lane::set_has_min_speed_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void Lane::clear_has_min_speed_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void Lane::clear_min_speed_limit() {
  min_speed_limit_ = 0;
  clear_has_min_speed_limit();
}
float Lane::min_speed_limit() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.min_speed_limit)
  return min_speed_limit_;
}
void Lane::set_min_speed_limit(float value) {
  set_has_min_speed_limit();
  min_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.min_speed_limit)
}

// repeated .COWA.MapData.Id predecessor_id = 8;
int Lane::predecessor_id_size() const {
  return predecessor_id_.size();
}
void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
const ::COWA::MapData::Id& Lane::predecessor_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.predecessor_id)
  return predecessor_id_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_predecessor_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.predecessor_id)
  return predecessor_id_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_predecessor_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.predecessor_id)
  return predecessor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_predecessor_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.predecessor_id)
  return &predecessor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::predecessor_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.predecessor_id)
  return predecessor_id_;
}

// repeated .COWA.MapData.Id successor_id = 9;
int Lane::successor_id_size() const {
  return successor_id_.size();
}
void Lane::clear_successor_id() {
  successor_id_.Clear();
}
const ::COWA::MapData::Id& Lane::successor_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.successor_id)
  return successor_id_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_successor_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.successor_id)
  return successor_id_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_successor_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.successor_id)
  return successor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_successor_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.successor_id)
  return &successor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::successor_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.successor_id)
  return successor_id_;
}

// repeated .COWA.MapData.Id left_neighbor_forward_lane_id = 10;
int Lane::left_neighbor_forward_lane_id_size() const {
  return left_neighbor_forward_lane_id_.size();
}
void Lane::clear_left_neighbor_forward_lane_id() {
  left_neighbor_forward_lane_id_.Clear();
}
const ::COWA::MapData::Id& Lane::left_neighbor_forward_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_left_neighbor_forward_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_left_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_left_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.left_neighbor_forward_lane_id)
  return &left_neighbor_forward_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::left_neighbor_forward_lane_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_;
}

// repeated .COWA.MapData.Id right_neighbor_forward_lane_id = 11;
int Lane::right_neighbor_forward_lane_id_size() const {
  return right_neighbor_forward_lane_id_.size();
}
void Lane::clear_right_neighbor_forward_lane_id() {
  right_neighbor_forward_lane_id_.Clear();
}
const ::COWA::MapData::Id& Lane::right_neighbor_forward_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_right_neighbor_forward_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_right_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_right_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.right_neighbor_forward_lane_id)
  return &right_neighbor_forward_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::right_neighbor_forward_lane_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_;
}

// repeated .COWA.MapData.Id left_neighbor_reverse_lane_id = 12;
int Lane::left_neighbor_reverse_lane_id_size() const {
  return left_neighbor_reverse_lane_id_.size();
}
void Lane::clear_left_neighbor_reverse_lane_id() {
  left_neighbor_reverse_lane_id_.Clear();
}
const ::COWA::MapData::Id& Lane::left_neighbor_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_left_neighbor_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_left_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_left_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.left_neighbor_reverse_lane_id)
  return &left_neighbor_reverse_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::left_neighbor_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_;
}

// repeated .COWA.MapData.Id right_neighbor_reverse_lane_id = 13;
int Lane::right_neighbor_reverse_lane_id_size() const {
  return right_neighbor_reverse_lane_id_.size();
}
void Lane::clear_right_neighbor_reverse_lane_id() {
  right_neighbor_reverse_lane_id_.Clear();
}
const ::COWA::MapData::Id& Lane::right_neighbor_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Get(index);
}
::COWA::MapData::Id* Lane::mutable_right_neighbor_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Mutable(index);
}
::COWA::MapData::Id* Lane::add_right_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Lane::mutable_right_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.right_neighbor_reverse_lane_id)
  return &right_neighbor_reverse_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Lane::right_neighbor_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_;
}

// optional .COWA.MapData.Lane.LaneDirection direction = 14;
bool Lane::has_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Lane::set_has_direction() {
  _has_bits_[0] |= 0x00000080u;
}
void Lane::clear_has_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
void Lane::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
::COWA::MapData::Lane_LaneDirection Lane::direction() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.direction)
  return static_cast< ::COWA::MapData::Lane_LaneDirection >(direction_);
}
void Lane::set_direction(::COWA::MapData::Lane_LaneDirection value) {
  assert(::COWA::MapData::Lane_LaneDirection_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.direction)
}

// optional .COWA.MapData.Lane.LaneTurn turn = 15;
bool Lane::has_turn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Lane::set_has_turn() {
  _has_bits_[0] |= 0x00000020u;
}
void Lane::clear_has_turn() {
  _has_bits_[0] &= ~0x00000020u;
}
void Lane::clear_turn() {
  turn_ = 1;
  clear_has_turn();
}
::COWA::MapData::Lane_LaneTurn Lane::turn() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.turn)
  return static_cast< ::COWA::MapData::Lane_LaneTurn >(turn_);
}
void Lane::set_turn(::COWA::MapData::Lane_LaneTurn value) {
  assert(::COWA::MapData::Lane_LaneTurn_IsValid(value));
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Lane.turn)
}

// repeated .COWA.MapData.Lane.LaneMark mark = 17;
int Lane::mark_size() const {
  return mark_.size();
}
void Lane::clear_mark() {
  mark_.Clear();
}
const ::COWA::MapData::Lane_LaneMark& Lane::mark(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Lane.mark)
  return mark_.Get(index);
}
::COWA::MapData::Lane_LaneMark* Lane::mutable_mark(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Lane.mark)
  return mark_.Mutable(index);
}
::COWA::MapData::Lane_LaneMark* Lane::add_mark() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Lane.mark)
  return mark_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Lane_LaneMark >*
Lane::mutable_mark() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Lane.mark)
  return &mark_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Lane_LaneMark >&
Lane::mark() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Lane.mark)
  return mark_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneTide_Item_Time::kStartTimeFieldNumber;
const int LaneTide_Item_Time::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneTide_Item_Time::LaneTide_Item_Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LaneTide.Item.Time)
}
LaneTide_Item_Time::LaneTide_Item_Time(const LaneTide_Item_Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LaneTide.Item.Time)
}

void LaneTide_Item_Time::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
}

LaneTide_Item_Time::~LaneTide_Item_Time() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LaneTide.Item.Time)
  SharedDtor();
}

void LaneTide_Item_Time::SharedDtor() {
}

void LaneTide_Item_Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneTide_Item_Time::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneTide_Item_Time& LaneTide_Item_Time::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneTide_Item_Time* LaneTide_Item_Time::New(::google::protobuf::Arena* arena) const {
  LaneTide_Item_Time* n = new LaneTide_Item_Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneTide_Item_Time::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LaneTide.Item.Time)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&start_time_, 0, reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneTide_Item_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LaneTide.Item.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LaneTide.Item.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LaneTide.Item.Time)
  return false;
#undef DO_
}

void LaneTide_Item_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LaneTide.Item.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_time(), output);
  }

  // optional float end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LaneTide.Item.Time)
}

::google::protobuf::uint8* LaneTide_Item_Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LaneTide.Item.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_time(), target);
  }

  // optional float end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LaneTide.Item.Time)
  return target;
}

size_t LaneTide_Item_Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LaneTide.Item.Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float start_time = 1;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional float end_time = 2;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneTide_Item_Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LaneTide.Item.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneTide_Item_Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneTide_Item_Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LaneTide.Item.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LaneTide.Item.Time)
    MergeFrom(*source);
  }
}

void LaneTide_Item_Time::MergeFrom(const LaneTide_Item_Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LaneTide.Item.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneTide_Item_Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LaneTide.Item.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneTide_Item_Time::CopyFrom(const LaneTide_Item_Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LaneTide.Item.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTide_Item_Time::IsInitialized() const {
  return true;
}

void LaneTide_Item_Time::Swap(LaneTide_Item_Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneTide_Item_Time::InternalSwap(LaneTide_Item_Time* other) {
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneTide_Item_Time::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneTide_Item_Time

// optional float start_time = 1;
bool LaneTide_Item_Time::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneTide_Item_Time::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneTide_Item_Time::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneTide_Item_Time::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
float LaneTide_Item_Time::start_time() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.Item.Time.start_time)
  return start_time_;
}
void LaneTide_Item_Time::set_start_time(float value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneTide.Item.Time.start_time)
}

// optional float end_time = 2;
bool LaneTide_Item_Time::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneTide_Item_Time::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneTide_Item_Time::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneTide_Item_Time::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
float LaneTide_Item_Time::end_time() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.Item.Time.end_time)
  return end_time_;
}
void LaneTide_Item_Time::set_end_time(float value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.LaneTide.Item.Time.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneTide_Item::kLaneIdFieldNumber;
const int LaneTide_Item::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneTide_Item::LaneTide_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LaneTide.Item)
}
LaneTide_Item::LaneTide_Item(const LaneTide_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_id_(from.lane_id_),
      time_(from.time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LaneTide.Item)
}

void LaneTide_Item::SharedCtor() {
  _cached_size_ = 0;
}

LaneTide_Item::~LaneTide_Item() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LaneTide.Item)
  SharedDtor();
}

void LaneTide_Item::SharedDtor() {
}

void LaneTide_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneTide_Item::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneTide_Item& LaneTide_Item::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneTide_Item* LaneTide_Item::New(::google::protobuf::Arena* arena) const {
  LaneTide_Item* n = new LaneTide_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneTide_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LaneTide.Item)
  lane_id_.Clear();
  time_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneTide_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LaneTide.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .COWA.MapData.Id lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.LaneTide.Item.Time time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LaneTide.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LaneTide.Item)
  return false;
#undef DO_
}

void LaneTide_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LaneTide.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .COWA.MapData.Id lane_id = 1;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_id(i), output);
  }

  // repeated .COWA.MapData.LaneTide.Item.Time time = 2;
  for (unsigned int i = 0, n = this->time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LaneTide.Item)
}

::google::protobuf::uint8* LaneTide_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LaneTide.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .COWA.MapData.Id lane_id = 1;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lane_id(i), deterministic, target);
  }

  // repeated .COWA.MapData.LaneTide.Item.Time time = 2;
  for (unsigned int i = 0, n = this->time_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->time(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LaneTide.Item)
  return target;
}

size_t LaneTide_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LaneTide.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Id lane_id = 1;
  {
    unsigned int count = this->lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  // repeated .COWA.MapData.LaneTide.Item.Time time = 2;
  {
    unsigned int count = this->time_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneTide_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LaneTide.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneTide_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneTide_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LaneTide.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LaneTide.Item)
    MergeFrom(*source);
  }
}

void LaneTide_Item::MergeFrom(const LaneTide_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LaneTide.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  time_.MergeFrom(from.time_);
}

void LaneTide_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LaneTide.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneTide_Item::CopyFrom(const LaneTide_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LaneTide.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTide_Item::IsInitialized() const {
  return true;
}

void LaneTide_Item::Swap(LaneTide_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneTide_Item::InternalSwap(LaneTide_Item* other) {
  lane_id_.InternalSwap(&other->lane_id_);
  time_.InternalSwap(&other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneTide_Item::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneTide_Item

// repeated .COWA.MapData.Id lane_id = 1;
int LaneTide_Item::lane_id_size() const {
  return lane_id_.size();
}
void LaneTide_Item::clear_lane_id() {
  lane_id_.Clear();
}
const ::COWA::MapData::Id& LaneTide_Item::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.Item.lane_id)
  return lane_id_.Get(index);
}
::COWA::MapData::Id* LaneTide_Item::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneTide.Item.lane_id)
  return lane_id_.Mutable(index);
}
::COWA::MapData::Id* LaneTide_Item::add_lane_id() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneTide.Item.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
LaneTide_Item::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneTide.Item.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
LaneTide_Item::lane_id() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneTide.Item.lane_id)
  return lane_id_;
}

// repeated .COWA.MapData.LaneTide.Item.Time time = 2;
int LaneTide_Item::time_size() const {
  return time_.size();
}
void LaneTide_Item::clear_time() {
  time_.Clear();
}
const ::COWA::MapData::LaneTide_Item_Time& LaneTide_Item::time(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.Item.time)
  return time_.Get(index);
}
::COWA::MapData::LaneTide_Item_Time* LaneTide_Item::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneTide.Item.time)
  return time_.Mutable(index);
}
::COWA::MapData::LaneTide_Item_Time* LaneTide_Item::add_time() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneTide.Item.time)
  return time_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneTide_Item_Time >*
LaneTide_Item::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneTide.Item.time)
  return &time_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneTide_Item_Time >&
LaneTide_Item::time() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneTide.Item.time)
  return time_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneTide::kIdFieldNumber;
const int LaneTide::kAFieldNumber;
const int LaneTide::kBFieldNumber;
const int LaneTide::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneTide::LaneTide()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LaneTide)
}
LaneTide::LaneTide(const LaneTide& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_a()) {
    a_ = new ::COWA::MapData::LaneTide_Item(*from.a_);
  } else {
    a_ = NULL;
  }
  if (from.has_b()) {
    b_ = new ::COWA::MapData::LaneTide_Item(*from.b_);
  } else {
    b_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LaneTide)
}

void LaneTide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&id_) + sizeof(b_));
}

LaneTide::~LaneTide() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LaneTide)
  SharedDtor();
}

void LaneTide::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete a_;
  }
  if (this != internal_default_instance()) {
    delete b_;
  }
}

void LaneTide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneTide::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneTide& LaneTide::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneTide* LaneTide::New(::google::protobuf::Arena* arena) const {
  LaneTide* n = new LaneTide;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneTide::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LaneTide)
  signal_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_a()) {
      GOOGLE_DCHECK(a_ != NULL);
      a_->::COWA::MapData::LaneTide_Item::Clear();
    }
    if (has_b()) {
      GOOGLE_DCHECK(b_ != NULL);
      b_->::COWA::MapData::LaneTide_Item::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneTide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LaneTide)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.LaneTide.Item a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.LaneTide.Item b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id signal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LaneTide)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LaneTide)
  return false;
#undef DO_
}

void LaneTide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LaneTide)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.LaneTide.Item a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->a_, output);
  }

  // optional .COWA.MapData.LaneTide.Item b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->b_, output);
  }

  // repeated .COWA.MapData.Id signal = 5;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LaneTide)
}

::google::protobuf::uint8* LaneTide::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LaneTide)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.LaneTide.Item a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->a_, deterministic, target);
  }

  // optional .COWA.MapData.LaneTide.Item b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->b_, deterministic, target);
  }

  // repeated .COWA.MapData.Id signal = 5;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->signal(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LaneTide)
  return target;
}

size_t LaneTide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LaneTide)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Id signal = 5;
  {
    unsigned int count = this->signal_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.LaneTide.Item a = 2;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a_);
    }

    // optional .COWA.MapData.LaneTide.Item b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->b_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneTide::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LaneTide)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneTide* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneTide>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LaneTide)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LaneTide)
    MergeFrom(*source);
  }
}

void LaneTide::MergeFrom(const LaneTide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LaneTide)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_a()->::COWA::MapData::LaneTide_Item::MergeFrom(from.a());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_b()->::COWA::MapData::LaneTide_Item::MergeFrom(from.b());
    }
  }
}

void LaneTide::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LaneTide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneTide::CopyFrom(const LaneTide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LaneTide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTide::IsInitialized() const {
  return true;
}

void LaneTide::Swap(LaneTide* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneTide::InternalSwap(LaneTide* other) {
  signal_.InternalSwap(&other->signal_);
  std::swap(id_, other->id_);
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneTide::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneTide

// optional .COWA.MapData.Id id = 1;
bool LaneTide::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneTide::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneTide::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneTide::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& LaneTide::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* LaneTide::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneTide.id)
  return id_;
}
::COWA::MapData::Id* LaneTide::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.LaneTide.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void LaneTide::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.LaneTide.id)
}

// optional .COWA.MapData.LaneTide.Item a = 2;
bool LaneTide::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneTide::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneTide::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneTide::clear_a() {
  if (a_ != NULL) a_->::COWA::MapData::LaneTide_Item::Clear();
  clear_has_a();
}
const ::COWA::MapData::LaneTide_Item& LaneTide::a() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.a)
  return a_ != NULL ? *a_
                         : *::COWA::MapData::LaneTide_Item::internal_default_instance();
}
::COWA::MapData::LaneTide_Item* LaneTide::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    a_ = new ::COWA::MapData::LaneTide_Item;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneTide.a)
  return a_;
}
::COWA::MapData::LaneTide_Item* LaneTide::release_a() {
  // @@protoc_insertion_point(field_release:COWA.MapData.LaneTide.a)
  clear_has_a();
  ::COWA::MapData::LaneTide_Item* temp = a_;
  a_ = NULL;
  return temp;
}
void LaneTide::set_allocated_a(::COWA::MapData::LaneTide_Item* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.LaneTide.a)
}

// optional .COWA.MapData.LaneTide.Item b = 3;
bool LaneTide::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneTide::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneTide::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneTide::clear_b() {
  if (b_ != NULL) b_->::COWA::MapData::LaneTide_Item::Clear();
  clear_has_b();
}
const ::COWA::MapData::LaneTide_Item& LaneTide::b() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.b)
  return b_ != NULL ? *b_
                         : *::COWA::MapData::LaneTide_Item::internal_default_instance();
}
::COWA::MapData::LaneTide_Item* LaneTide::mutable_b() {
  set_has_b();
  if (b_ == NULL) {
    b_ = new ::COWA::MapData::LaneTide_Item;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneTide.b)
  return b_;
}
::COWA::MapData::LaneTide_Item* LaneTide::release_b() {
  // @@protoc_insertion_point(field_release:COWA.MapData.LaneTide.b)
  clear_has_b();
  ::COWA::MapData::LaneTide_Item* temp = b_;
  b_ = NULL;
  return temp;
}
void LaneTide::set_allocated_b(::COWA::MapData::LaneTide_Item* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.LaneTide.b)
}

// repeated .COWA.MapData.Id signal = 5;
int LaneTide::signal_size() const {
  return signal_.size();
}
void LaneTide::clear_signal() {
  signal_.Clear();
}
const ::COWA::MapData::Id& LaneTide::signal(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneTide.signal)
  return signal_.Get(index);
}
::COWA::MapData::Id* LaneTide::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneTide.signal)
  return signal_.Mutable(index);
}
::COWA::MapData::Id* LaneTide::add_signal() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneTide.signal)
  return signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
LaneTide::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneTide.signal)
  return &signal_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
LaneTide::signal() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneTide.signal)
  return signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kIdFieldNumber;
const int Road::kTypeFieldNumber;
const int Road::kLaneIdAFieldNumber;
const int Road::kLaneIdBFieldNumber;
const int Road::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_id_a_(from.lane_id_a_),
      lane_id_b_(from.lane_id_b_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::COWA::MapData::LaneCurve(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Road)
}

void Road::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&boundary_) -
    reinterpret_cast<char*>(&id_) + sizeof(boundary_));
  type_ = 1;
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete boundary_;
  }
}

void Road::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Road* Road::New(::google::protobuf::Arena* arena) const {
  Road* n = new Road;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Road)
  lane_id_a_.Clear();
  lane_id_b_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_boundary()) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->::COWA::MapData::LaneCurve::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Road)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Road.RoadType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Road_RoadType_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Road_RoadType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id lane_id_a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id lane_id_b = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.LaneCurve boundary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Road.RoadType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .COWA.MapData.Id lane_id_a = 3;
  for (unsigned int i = 0, n = this->lane_id_a_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lane_id_a(i), output);
  }

  // repeated .COWA.MapData.Id lane_id_b = 4;
  for (unsigned int i = 0, n = this->lane_id_b_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lane_id_b(i), output);
  }

  // optional .COWA.MapData.LaneCurve boundary = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->boundary_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Road.RoadType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .COWA.MapData.Id lane_id_a = 3;
  for (unsigned int i = 0, n = this->lane_id_a_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->lane_id_a(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id lane_id_b = 4;
  for (unsigned int i = 0, n = this->lane_id_b_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->lane_id_b(i), deterministic, target);
  }

  // optional .COWA.MapData.LaneCurve boundary = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->boundary_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Road)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Id lane_id_a = 3;
  {
    unsigned int count = this->lane_id_a_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id_a(i));
    }
  }

  // repeated .COWA.MapData.Id lane_id_b = 4;
  {
    unsigned int count = this->lane_id_b_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id_b(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.LaneCurve boundary = 5;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

    // optional .COWA.MapData.Road.RoadType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_a_.MergeFrom(from.lane_id_a_);
  lane_id_b_.MergeFrom(from.lane_id_b_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::COWA::MapData::LaneCurve::MergeFrom(from.boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  lane_id_a_.InternalSwap(&other->lane_id_a_);
  lane_id_b_.InternalSwap(&other->lane_id_b_);
  std::swap(id_, other->id_);
  std::swap(boundary_, other->boundary_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Road

// optional .COWA.MapData.Id id = 1;
bool Road::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Road::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Road::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Road::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Road::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Road.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Road::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Road.id)
  return id_;
}
::COWA::MapData::Id* Road::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Road.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Road::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Road.id)
}

// optional .COWA.MapData.Road.RoadType type = 2;
bool Road::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Road::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Road::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Road::clear_type() {
  type_ = 1;
  clear_has_type();
}
::COWA::MapData::Road_RoadType Road::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Road.type)
  return static_cast< ::COWA::MapData::Road_RoadType >(type_);
}
void Road::set_type(::COWA::MapData::Road_RoadType value) {
  assert(::COWA::MapData::Road_RoadType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Road.type)
}

// repeated .COWA.MapData.Id lane_id_a = 3;
int Road::lane_id_a_size() const {
  return lane_id_a_.size();
}
void Road::clear_lane_id_a() {
  lane_id_a_.Clear();
}
const ::COWA::MapData::Id& Road::lane_id_a(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Road.lane_id_a)
  return lane_id_a_.Get(index);
}
::COWA::MapData::Id* Road::mutable_lane_id_a(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Road.lane_id_a)
  return lane_id_a_.Mutable(index);
}
::COWA::MapData::Id* Road::add_lane_id_a() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Road.lane_id_a)
  return lane_id_a_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Road::mutable_lane_id_a() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Road.lane_id_a)
  return &lane_id_a_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Road::lane_id_a() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Road.lane_id_a)
  return lane_id_a_;
}

// repeated .COWA.MapData.Id lane_id_b = 4;
int Road::lane_id_b_size() const {
  return lane_id_b_.size();
}
void Road::clear_lane_id_b() {
  lane_id_b_.Clear();
}
const ::COWA::MapData::Id& Road::lane_id_b(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Road.lane_id_b)
  return lane_id_b_.Get(index);
}
::COWA::MapData::Id* Road::mutable_lane_id_b(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Road.lane_id_b)
  return lane_id_b_.Mutable(index);
}
::COWA::MapData::Id* Road::add_lane_id_b() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Road.lane_id_b)
  return lane_id_b_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Road::mutable_lane_id_b() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Road.lane_id_b)
  return &lane_id_b_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Road::lane_id_b() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Road.lane_id_b)
  return lane_id_b_;
}

// optional .COWA.MapData.LaneCurve boundary = 5;
bool Road::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Road::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void Road::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void Road::clear_boundary() {
  if (boundary_ != NULL) boundary_->::COWA::MapData::LaneCurve::Clear();
  clear_has_boundary();
}
const ::COWA::MapData::LaneCurve& Road::boundary() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Road.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::COWA::MapData::LaneCurve::internal_default_instance();
}
::COWA::MapData::LaneCurve* Road::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::COWA::MapData::LaneCurve;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Road.boundary)
  return boundary_;
}
::COWA::MapData::LaneCurve* Road::release_boundary() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Road.boundary)
  clear_has_boundary();
  ::COWA::MapData::LaneCurve* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void Road::set_allocated_boundary(::COWA::MapData::LaneCurve* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Road.boundary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Square::kIdFieldNumber;
const int Square::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Square::Square()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Square)
}
Square::Square(const Square& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Square)
}

void Square::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&polygon_) -
    reinterpret_cast<char*>(&id_) + sizeof(polygon_));
}

Square::~Square() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Square)
  SharedDtor();
}

void Square::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Square::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Square::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Square& Square::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Square* Square::New(::google::protobuf::Arena* arena) const {
  Square* n = new Square;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Square::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Square)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Square::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Square)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Square)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Square)
  return false;
#undef DO_
}

void Square::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Square)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Polygon polygon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->polygon_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Square)
}

::google::protobuf::uint8* Square::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Square)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Polygon polygon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->polygon_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Square)
  return target;
}

size_t Square::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Square)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon polygon = 3;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Square::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Square)
  GOOGLE_DCHECK_NE(&from, this);
  const Square* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Square>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Square)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Square)
    MergeFrom(*source);
  }
}

void Square::MergeFrom(const Square& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Square)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
  }
}

void Square::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Square)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Square::CopyFrom(const Square& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Square)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Square::IsInitialized() const {
  return true;
}

void Square::Swap(Square* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Square::InternalSwap(Square* other) {
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Square::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Square

// optional .COWA.MapData.Id id = 1;
bool Square::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Square::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Square::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Square::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Square::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Square.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Square::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Square.id)
  return id_;
}
::COWA::MapData::Id* Square::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Square.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Square::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Square.id)
}

// optional .COWA.MapData.Polygon polygon = 3;
bool Square::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Square::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void Square::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Square::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& Square::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Square.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Square::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Square.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* Square::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Square.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Square::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Square.polygon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ramp::kIdFieldNumber;
const int Ramp::kPolygonFieldNumber;
const int Ramp::kOrientionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ramp::Ramp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Ramp)
}
Ramp::Ramp(const Ramp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  oriention_ = from.oriention_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Ramp)
}

void Ramp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&oriention_) -
    reinterpret_cast<char*>(&id_) + sizeof(oriention_));
}

Ramp::~Ramp() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Ramp)
  SharedDtor();
}

void Ramp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Ramp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ramp::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ramp& Ramp::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ramp* Ramp::New(::google::protobuf::Arena* arena) const {
  Ramp* n = new Ramp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ramp::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Ramp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
  }
  oriention_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ramp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Ramp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float oriention = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_oriention();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oriention_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Ramp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Ramp)
  return false;
#undef DO_
}

void Ramp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Ramp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // optional float oriention = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->oriention(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Ramp)
}

::google::protobuf::uint8* Ramp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Ramp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // optional float oriention = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->oriention(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Ramp)
  return target;
}

size_t Ramp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Ramp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional float oriention = 3;
    if (has_oriention()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ramp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Ramp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ramp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ramp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Ramp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Ramp)
    MergeFrom(*source);
  }
}

void Ramp::MergeFrom(const Ramp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Ramp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      oriention_ = from.oriention_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ramp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Ramp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ramp::CopyFrom(const Ramp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Ramp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ramp::IsInitialized() const {
  return true;
}

void Ramp::Swap(Ramp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ramp::InternalSwap(Ramp* other) {
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(oriention_, other->oriention_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ramp::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ramp

// optional .COWA.MapData.Id id = 1;
bool Ramp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ramp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Ramp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ramp::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Ramp::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Ramp.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Ramp::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Ramp.id)
  return id_;
}
::COWA::MapData::Id* Ramp::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Ramp.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Ramp::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Ramp.id)
}

// optional .COWA.MapData.Polygon polygon = 2;
bool Ramp::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ramp::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void Ramp::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ramp::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& Ramp::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Ramp.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Ramp::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Ramp.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* Ramp::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Ramp.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Ramp::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Ramp.polygon)
}

// optional float oriention = 3;
bool Ramp::has_oriention() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ramp::set_has_oriention() {
  _has_bits_[0] |= 0x00000004u;
}
void Ramp::clear_has_oriention() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ramp::clear_oriention() {
  oriention_ = 0;
  clear_has_oriention();
}
float Ramp::oriention() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Ramp.oriention)
  return oriention_;
}
void Ramp::set_oriention(float value) {
  set_has_oriention();
  oriention_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Ramp.oriention)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Crosswalk::kIdFieldNumber;
const int Crosswalk::kPolygonFieldNumber;
const int Crosswalk::kOrientionFieldNumber;
const int Crosswalk::kHybridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Crosswalk::Crosswalk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Crosswalk)
}
Crosswalk::Crosswalk(const Crosswalk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&oriention_, &from.oriention_,
    reinterpret_cast<char*>(&hybrid_) -
    reinterpret_cast<char*>(&oriention_) + sizeof(hybrid_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Crosswalk)
}

void Crosswalk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&hybrid_) -
    reinterpret_cast<char*>(&id_) + sizeof(hybrid_));
}

Crosswalk::~Crosswalk() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Crosswalk)
  SharedDtor();
}

void Crosswalk::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Crosswalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Crosswalk::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Crosswalk& Crosswalk::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Crosswalk* Crosswalk::New(::google::protobuf::Arena* arena) const {
  Crosswalk* n = new Crosswalk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Crosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Crosswalk)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&oriention_, 0, reinterpret_cast<char*>(&hybrid_) -
      reinterpret_cast<char*>(&oriention_) + sizeof(hybrid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Crosswalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Crosswalk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float oriention = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_oriention();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oriention_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hybrid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hybrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hybrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Crosswalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Crosswalk)
  return false;
#undef DO_
}

void Crosswalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Crosswalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // optional float oriention = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->oriention(), output);
  }

  // optional bool hybrid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hybrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Crosswalk)
}

::google::protobuf::uint8* Crosswalk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Crosswalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // optional float oriention = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->oriention(), target);
  }

  // optional bool hybrid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hybrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Crosswalk)
  return target;
}

size_t Crosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Crosswalk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional float oriention = 3;
    if (has_oriention()) {
      total_size += 1 + 4;
    }

    // optional bool hybrid = 4;
    if (has_hybrid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crosswalk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Crosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  const Crosswalk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Crosswalk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Crosswalk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Crosswalk)
    MergeFrom(*source);
  }
}

void Crosswalk::MergeFrom(const Crosswalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Crosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      oriention_ = from.oriention_;
    }
    if (cached_has_bits & 0x00000008u) {
      hybrid_ = from.hybrid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Crosswalk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crosswalk::CopyFrom(const Crosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crosswalk::IsInitialized() const {
  return true;
}

void Crosswalk::Swap(Crosswalk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Crosswalk::InternalSwap(Crosswalk* other) {
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(oriention_, other->oriention_);
  std::swap(hybrid_, other->hybrid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Crosswalk::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Crosswalk

// optional .COWA.MapData.Id id = 1;
bool Crosswalk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Crosswalk::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Crosswalk::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Crosswalk::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Crosswalk::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crosswalk.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Crosswalk::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crosswalk.id)
  return id_;
}
::COWA::MapData::Id* Crosswalk::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Crosswalk.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Crosswalk::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Crosswalk.id)
}

// optional .COWA.MapData.Polygon polygon = 2;
bool Crosswalk::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Crosswalk::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void Crosswalk::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Crosswalk::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& Crosswalk::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crosswalk.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Crosswalk::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crosswalk.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* Crosswalk::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Crosswalk.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Crosswalk::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Crosswalk.polygon)
}

// optional float oriention = 3;
bool Crosswalk::has_oriention() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Crosswalk::set_has_oriention() {
  _has_bits_[0] |= 0x00000004u;
}
void Crosswalk::clear_has_oriention() {
  _has_bits_[0] &= ~0x00000004u;
}
void Crosswalk::clear_oriention() {
  oriention_ = 0;
  clear_has_oriention();
}
float Crosswalk::oriention() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crosswalk.oriention)
  return oriention_;
}
void Crosswalk::set_oriention(float value) {
  set_has_oriention();
  oriention_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Crosswalk.oriention)
}

// optional bool hybrid = 4;
bool Crosswalk::has_hybrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Crosswalk::set_has_hybrid() {
  _has_bits_[0] |= 0x00000008u;
}
void Crosswalk::clear_has_hybrid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Crosswalk::clear_hybrid() {
  hybrid_ = false;
  clear_has_hybrid();
}
bool Crosswalk::hybrid() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crosswalk.hybrid)
  return hybrid_;
}
void Crosswalk::set_hybrid(bool value) {
  set_has_hybrid();
  hybrid_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Crosswalk.hybrid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Roadmark::kIdFieldNumber;
const int Roadmark::kPolygonFieldNumber;
const int Roadmark::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Roadmark::Roadmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Roadmark)
}
Roadmark::Roadmark(const Roadmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Roadmark)
}

void Roadmark::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&polygon_) -
    reinterpret_cast<char*>(&id_) + sizeof(polygon_));
  type_ = 1;
}

Roadmark::~Roadmark() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Roadmark)
  SharedDtor();
}

void Roadmark::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Roadmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roadmark::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Roadmark& Roadmark::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Roadmark* Roadmark::New(::google::protobuf::Arena* arena) const {
  Roadmark* n = new Roadmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Roadmark::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Roadmark)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Roadmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Roadmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Roadmark.RoadmarkType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Roadmark_RoadmarkType_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Roadmark_RoadmarkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Roadmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Roadmark)
  return false;
#undef DO_
}

void Roadmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Roadmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // optional .COWA.MapData.Roadmark.RoadmarkType type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Roadmark)
}

::google::protobuf::uint8* Roadmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Roadmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // optional .COWA.MapData.Roadmark.RoadmarkType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Roadmark)
  return target;
}

size_t Roadmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Roadmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional .COWA.MapData.Roadmark.RoadmarkType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roadmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Roadmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Roadmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Roadmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Roadmark)
    MergeFrom(*source);
  }
}

void Roadmark::MergeFrom(const Roadmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Roadmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Roadmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Roadmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmark::CopyFrom(const Roadmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Roadmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmark::IsInitialized() const {
  return true;
}

void Roadmark::Swap(Roadmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Roadmark::InternalSwap(Roadmark* other) {
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Roadmark::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Roadmark

// optional .COWA.MapData.Id id = 1;
bool Roadmark::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Roadmark::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Roadmark::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Roadmark::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Roadmark::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Roadmark.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Roadmark::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Roadmark.id)
  return id_;
}
::COWA::MapData::Id* Roadmark::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Roadmark.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Roadmark::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Roadmark.id)
}

// optional .COWA.MapData.Polygon polygon = 2;
bool Roadmark::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Roadmark::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void Roadmark::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Roadmark::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& Roadmark::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Roadmark.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Roadmark::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Roadmark.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* Roadmark::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Roadmark.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Roadmark::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Roadmark.polygon)
}

// optional .COWA.MapData.Roadmark.RoadmarkType type = 3;
bool Roadmark::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Roadmark::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Roadmark::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Roadmark::clear_type() {
  type_ = 1;
  clear_has_type();
}
::COWA::MapData::Roadmark_RoadmarkType Roadmark::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Roadmark.type)
  return static_cast< ::COWA::MapData::Roadmark_RoadmarkType >(type_);
}
void Roadmark::set_type(::COWA::MapData::Roadmark_RoadmarkType value) {
  assert(::COWA::MapData::Roadmark_RoadmarkType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Roadmark.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSpace::kIdFieldNumber;
const int ParkingSpace::kPolygonFieldNumber;
const int ParkingSpace::kBoundaryFieldNumber;
const int ParkingSpace::kOrientionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSpace::ParkingSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.ParkingSpace)
}
ParkingSpace::ParkingSpace(const ParkingSpace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::COWA::MapData::Polygon(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  oriention_ = from.oriention_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.ParkingSpace)
}

void ParkingSpace::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&oriention_) -
    reinterpret_cast<char*>(&id_) + sizeof(oriention_));
}

ParkingSpace::~ParkingSpace() {
  // @@protoc_insertion_point(destructor:COWA.MapData.ParkingSpace)
  SharedDtor();
}

void ParkingSpace::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
  if (this != internal_default_instance()) {
    delete boundary_;
  }
}

void ParkingSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSpace::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSpace& ParkingSpace::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParkingSpace* ParkingSpace::New(::google::protobuf::Arena* arena) const {
  ParkingSpace* n = new ParkingSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.ParkingSpace)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
    if (has_boundary()) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->::COWA::MapData::Polygon::Clear();
    }
  }
  oriention_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.ParkingSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float oriention = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_oriention();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oriention_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.ParkingSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.ParkingSpace)
  return false;
#undef DO_
}

void ParkingSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.ParkingSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // optional .COWA.MapData.Polygon boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->boundary_, output);
  }

  // optional float oriention = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->oriention(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.ParkingSpace)
}

::google::protobuf::uint8* ParkingSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.ParkingSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // optional .COWA.MapData.Polygon boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->boundary_, deterministic, target);
  }

  // optional float oriention = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->oriention(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.ParkingSpace)
  return target;
}

size_t ParkingSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.ParkingSpace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional .COWA.MapData.Polygon boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

    // optional float oriention = 4;
    if (has_oriention()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.ParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.ParkingSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.ParkingSpace)
    MergeFrom(*source);
  }
}

void ParkingSpace::MergeFrom(const ParkingSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.ParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_boundary()->::COWA::MapData::Polygon::MergeFrom(from.boundary());
    }
    if (cached_has_bits & 0x00000008u) {
      oriention_ = from.oriention_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.ParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpace::CopyFrom(const ParkingSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.ParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpace::IsInitialized() const {
  return true;
}

void ParkingSpace::Swap(ParkingSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSpace::InternalSwap(ParkingSpace* other) {
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(boundary_, other->boundary_);
  std::swap(oriention_, other->oriention_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSpace::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParkingSpace

// optional .COWA.MapData.Id id = 1;
bool ParkingSpace::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParkingSpace::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ParkingSpace::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingSpace::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& ParkingSpace::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.ParkingSpace.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* ParkingSpace::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.ParkingSpace.id)
  return id_;
}
::COWA::MapData::Id* ParkingSpace::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.ParkingSpace.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void ParkingSpace::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.ParkingSpace.id)
}

// optional .COWA.MapData.Polygon polygon = 2;
bool ParkingSpace::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParkingSpace::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void ParkingSpace::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingSpace::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& ParkingSpace::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.ParkingSpace.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* ParkingSpace::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.ParkingSpace.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* ParkingSpace::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.ParkingSpace.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void ParkingSpace::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.ParkingSpace.polygon)
}

// optional .COWA.MapData.Polygon boundary = 3;
bool ParkingSpace::has_boundary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParkingSpace::set_has_boundary() {
  _has_bits_[0] |= 0x00000004u;
}
void ParkingSpace::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParkingSpace::clear_boundary() {
  if (boundary_ != NULL) boundary_->::COWA::MapData::Polygon::Clear();
  clear_has_boundary();
}
const ::COWA::MapData::Polygon& ParkingSpace::boundary() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.ParkingSpace.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* ParkingSpace::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.ParkingSpace.boundary)
  return boundary_;
}
::COWA::MapData::Polygon* ParkingSpace::release_boundary() {
  // @@protoc_insertion_point(field_release:COWA.MapData.ParkingSpace.boundary)
  clear_has_boundary();
  ::COWA::MapData::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void ParkingSpace::set_allocated_boundary(::COWA::MapData::Polygon* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.ParkingSpace.boundary)
}

// optional float oriention = 4;
bool ParkingSpace::has_oriention() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParkingSpace::set_has_oriention() {
  _has_bits_[0] |= 0x00000008u;
}
void ParkingSpace::clear_has_oriention() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParkingSpace::clear_oriention() {
  oriention_ = 0;
  clear_has_oriention();
}
float ParkingSpace::oriention() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.ParkingSpace.oriention)
  return oriention_;
}
void ParkingSpace::set_oriention(float value) {
  set_has_oriention();
  oriention_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.ParkingSpace.oriention)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kIdFieldNumber;
const int Object::kTypeFieldNumber;
const int Object::kPolygonFieldNumber;
const int Object::kCloudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::COWA::MapData::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  if (from.has_cloud()) {
    cloud_ = new ::COWA::MapData::Cloud(*from.cloud_);
  } else {
    cloud_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&cloud_) -
    reinterpret_cast<char*>(&id_) + sizeof(cloud_));
  type_ = 1;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
  if (this != internal_default_instance()) {
    delete cloud_;
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Object)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::COWA::MapData::Polygon::Clear();
    }
    if (has_cloud()) {
      GOOGLE_DCHECK(cloud_ != NULL);
      cloud_->::COWA::MapData::Cloud::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Object.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Object_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Object_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon polygon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Cloud cloud = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Object.Type type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .COWA.MapData.Polygon polygon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->polygon_, output);
  }

  // optional .COWA.MapData.Cloud cloud = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cloud_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Object.Type type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .COWA.MapData.Polygon polygon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->polygon_, deterministic, target);
  }

  // optional .COWA.MapData.Cloud cloud = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cloud_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon polygon = 3;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional .COWA.MapData.Cloud cloud = 4;
    if (has_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cloud_);
    }

    // optional .COWA.MapData.Object.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::COWA::MapData::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cloud()->::COWA::MapData::Cloud::MergeFrom(from.cloud());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(cloud_, other->cloud_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// optional .COWA.MapData.Id id = 1;
bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Object::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Object::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Object.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Object::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Object.id)
  return id_;
}
::COWA::MapData::Id* Object::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Object.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Object::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Object.id)
}

// optional .COWA.MapData.Object.Type type = 2;
bool Object::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Object::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Object::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Object::clear_type() {
  type_ = 1;
  clear_has_type();
}
::COWA::MapData::Object_Type Object::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Object.type)
  return static_cast< ::COWA::MapData::Object_Type >(type_);
}
void Object::set_type(::COWA::MapData::Object_Type value) {
  assert(::COWA::MapData::Object_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Object.type)
}

// optional .COWA.MapData.Polygon polygon = 3;
bool Object::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Object::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void Object::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Object::clear_polygon() {
  if (polygon_ != NULL) polygon_->::COWA::MapData::Polygon::Clear();
  clear_has_polygon();
}
const ::COWA::MapData::Polygon& Object::polygon() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Object.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Object::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Object.polygon)
  return polygon_;
}
::COWA::MapData::Polygon* Object::release_polygon() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Object.polygon)
  clear_has_polygon();
  ::COWA::MapData::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Object::set_allocated_polygon(::COWA::MapData::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Object.polygon)
}

// optional .COWA.MapData.Cloud cloud = 4;
bool Object::has_cloud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Object::set_has_cloud() {
  _has_bits_[0] |= 0x00000004u;
}
void Object::clear_has_cloud() {
  _has_bits_[0] &= ~0x00000004u;
}
void Object::clear_cloud() {
  if (cloud_ != NULL) cloud_->::COWA::MapData::Cloud::Clear();
  clear_has_cloud();
}
const ::COWA::MapData::Cloud& Object::cloud() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Object.cloud)
  return cloud_ != NULL ? *cloud_
                         : *::COWA::MapData::Cloud::internal_default_instance();
}
::COWA::MapData::Cloud* Object::mutable_cloud() {
  set_has_cloud();
  if (cloud_ == NULL) {
    cloud_ = new ::COWA::MapData::Cloud;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Object.cloud)
  return cloud_;
}
::COWA::MapData::Cloud* Object::release_cloud() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Object.cloud)
  clear_has_cloud();
  ::COWA::MapData::Cloud* temp = cloud_;
  cloud_ = NULL;
  return temp;
}
void Object::set_allocated_cloud(::COWA::MapData::Cloud* cloud) {
  delete cloud_;
  cloud_ = cloud;
  if (cloud) {
    set_has_cloud();
  } else {
    clear_has_cloud();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Object.cloud)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subsignal::kIdFieldNumber;
const int Subsignal::kTypeFieldNumber;
const int Subsignal::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subsignal::Subsignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Subsignal)
}
Subsignal::Subsignal(const Subsignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::COWA::MapData::Polygon(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Subsignal)
}

void Subsignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&boundary_) -
    reinterpret_cast<char*>(&id_) + sizeof(boundary_));
  type_ = 1;
}

Subsignal::~Subsignal() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Subsignal)
  SharedDtor();
}

void Subsignal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete boundary_;
  }
}

void Subsignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subsignal::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subsignal& Subsignal::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Subsignal* Subsignal::New(::google::protobuf::Arena* arena) const {
  Subsignal* n = new Subsignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Subsignal)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_boundary()) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->::COWA::MapData::Polygon::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Subsignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Subsignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Subsignal.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Subsignal_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Subsignal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Subsignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Subsignal)
  return false;
#undef DO_
}

void Subsignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .COWA.MapData.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .COWA.MapData.Polygon boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->boundary_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Subsignal)
}

::google::protobuf::uint8* Subsignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .COWA.MapData.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .COWA.MapData.Polygon boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->boundary_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Subsignal)
  return target;
}

size_t Subsignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Subsignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

    // optional .COWA.MapData.Subsignal.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subsignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  const Subsignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subsignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Subsignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Subsignal)
    MergeFrom(*source);
  }
}

void Subsignal::MergeFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::COWA::MapData::Polygon::MergeFrom(from.boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Subsignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subsignal::CopyFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsignal::IsInitialized() const {
  return true;
}

void Subsignal::Swap(Subsignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subsignal::InternalSwap(Subsignal* other) {
  std::swap(id_, other->id_);
  std::swap(boundary_, other->boundary_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subsignal::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subsignal

// optional .COWA.MapData.Id id = 1;
bool Subsignal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Subsignal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Subsignal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Subsignal::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Subsignal::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Subsignal.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Subsignal::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Subsignal.id)
  return id_;
}
::COWA::MapData::Id* Subsignal::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Subsignal.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Subsignal::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Subsignal.id)
}

// optional .COWA.MapData.Subsignal.Type type = 2;
bool Subsignal::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Subsignal::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Subsignal::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Subsignal::clear_type() {
  type_ = 1;
  clear_has_type();
}
::COWA::MapData::Subsignal_Type Subsignal::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Subsignal.type)
  return static_cast< ::COWA::MapData::Subsignal_Type >(type_);
}
void Subsignal::set_type(::COWA::MapData::Subsignal_Type value) {
  assert(::COWA::MapData::Subsignal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Subsignal.type)
}

// optional .COWA.MapData.Polygon boundary = 3;
bool Subsignal::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Subsignal::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void Subsignal::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void Subsignal::clear_boundary() {
  if (boundary_ != NULL) boundary_->::COWA::MapData::Polygon::Clear();
  clear_has_boundary();
}
const ::COWA::MapData::Polygon& Subsignal::boundary() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Subsignal.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Subsignal::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Subsignal.boundary)
  return boundary_;
}
::COWA::MapData::Polygon* Subsignal::release_boundary() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Subsignal.boundary)
  clear_has_boundary();
  ::COWA::MapData::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void Subsignal::set_allocated_boundary(::COWA::MapData::Polygon* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Subsignal.boundary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kSubsignalFieldNumber;
const int Signal::kStopLineFieldNumber;
const int Signal::kWaitLaneFieldNumber;
const int Signal::kWaitSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      type_(from.type_),
      subsignal_(from.subsignal_),
      stop_line_(from.stop_line_),
      wait_lane_(from.wait_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_wait_signal()) {
    wait_signal_ = new ::COWA::MapData::Id(*from.wait_signal_);
  } else {
    wait_signal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Signal)
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&wait_signal_) -
    reinterpret_cast<char*>(&id_) + sizeof(wait_signal_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete wait_signal_;
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Signal)
  type_.Clear();
  subsignal_.Clear();
  stop_line_.Clear();
  wait_lane_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_wait_signal()) {
      GOOGLE_DCHECK(wait_signal_ != NULL);
      wait_signal_->::COWA::MapData::Id::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Signal.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Signal_Type_IsValid(value)) {
            add_type(static_cast< ::COWA::MapData::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::COWA::MapData::Signal_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Subsignal subsignal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subsignal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.PointENU stop_line = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id wait_lane = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Id wait_signal = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .COWA.MapData.Signal.Type type = 2;
  for (int i = 0, n = this->type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(i), output);
  }

  // repeated .COWA.MapData.Subsignal subsignal = 3;
  for (unsigned int i = 0, n = this->subsignal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subsignal(i), output);
  }

  // repeated .COWA.MapData.PointENU stop_line = 5;
  for (unsigned int i = 0, n = this->stop_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stop_line(i), output);
  }

  // repeated .COWA.MapData.Id wait_lane = 6;
  for (unsigned int i = 0, n = this->wait_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wait_lane(i), output);
  }

  // optional .COWA.MapData.Id wait_signal = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->wait_signal_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .COWA.MapData.Signal.Type type = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->type_, target);

  // repeated .COWA.MapData.Subsignal subsignal = 3;
  for (unsigned int i = 0, n = this->subsignal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->subsignal(i), deterministic, target);
  }

  // repeated .COWA.MapData.PointENU stop_line = 5;
  for (unsigned int i = 0, n = this->stop_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->stop_line(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id wait_lane = 6;
  for (unsigned int i = 0, n = this->wait_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->wait_lane(i), deterministic, target);
  }

  // optional .COWA.MapData.Id wait_signal = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->wait_signal_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Signal.Type type = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->type_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .COWA.MapData.Subsignal subsignal = 3;
  {
    unsigned int count = this->subsignal_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subsignal(i));
    }
  }

  // repeated .COWA.MapData.PointENU stop_line = 5;
  {
    unsigned int count = this->stop_line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_line(i));
    }
  }

  // repeated .COWA.MapData.Id wait_lane = 6;
  {
    unsigned int count = this->wait_lane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wait_lane(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Id wait_signal = 7;
    if (has_wait_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wait_signal_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  subsignal_.MergeFrom(from.subsignal_);
  stop_line_.MergeFrom(from.stop_line_);
  wait_lane_.MergeFrom(from.wait_lane_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wait_signal()->::COWA::MapData::Id::MergeFrom(from.wait_signal());
    }
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  type_.InternalSwap(&other->type_);
  subsignal_.InternalSwap(&other->subsignal_);
  stop_line_.InternalSwap(&other->stop_line_);
  wait_lane_.InternalSwap(&other->wait_lane_);
  std::swap(id_, other->id_);
  std::swap(wait_signal_, other->wait_signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional .COWA.MapData.Id id = 1;
bool Signal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Signal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signal::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Signal::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Signal.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Signal::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Signal.id)
  return id_;
}
::COWA::MapData::Id* Signal::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Signal.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Signal::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Signal.id)
}

// repeated .COWA.MapData.Signal.Type type = 2;
int Signal::type_size() const {
  return type_.size();
}
void Signal::clear_type() {
  type_.Clear();
}
::COWA::MapData::Signal_Type Signal::type(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Signal.type)
  return static_cast< ::COWA::MapData::Signal_Type >(type_.Get(index));
}
void Signal::set_type(int index, ::COWA::MapData::Signal_Type value) {
  assert(::COWA::MapData::Signal_Type_IsValid(value));
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:COWA.MapData.Signal.type)
}
void Signal::add_type(::COWA::MapData::Signal_Type value) {
  assert(::COWA::MapData::Signal_Type_IsValid(value));
  type_.Add(value);
  // @@protoc_insertion_point(field_add:COWA.MapData.Signal.type)
}
const ::google::protobuf::RepeatedField<int>&
Signal::type() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Signal.type)
  return type_;
}
::google::protobuf::RepeatedField<int>*
Signal::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Signal.type)
  return &type_;
}

// repeated .COWA.MapData.Subsignal subsignal = 3;
int Signal::subsignal_size() const {
  return subsignal_.size();
}
void Signal::clear_subsignal() {
  subsignal_.Clear();
}
const ::COWA::MapData::Subsignal& Signal::subsignal(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Signal.subsignal)
  return subsignal_.Get(index);
}
::COWA::MapData::Subsignal* Signal::mutable_subsignal(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Signal.subsignal)
  return subsignal_.Mutable(index);
}
::COWA::MapData::Subsignal* Signal::add_subsignal() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Signal.subsignal)
  return subsignal_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Subsignal >*
Signal::mutable_subsignal() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Signal.subsignal)
  return &subsignal_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Subsignal >&
Signal::subsignal() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Signal.subsignal)
  return subsignal_;
}

// repeated .COWA.MapData.PointENU stop_line = 5;
int Signal::stop_line_size() const {
  return stop_line_.size();
}
void Signal::clear_stop_line() {
  stop_line_.Clear();
}
const ::COWA::MapData::PointENU& Signal::stop_line(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Signal.stop_line)
  return stop_line_.Get(index);
}
::COWA::MapData::PointENU* Signal::mutable_stop_line(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Signal.stop_line)
  return stop_line_.Mutable(index);
}
::COWA::MapData::PointENU* Signal::add_stop_line() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Signal.stop_line)
  return stop_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::PointENU >*
Signal::mutable_stop_line() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Signal.stop_line)
  return &stop_line_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::PointENU >&
Signal::stop_line() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Signal.stop_line)
  return stop_line_;
}

// repeated .COWA.MapData.Id wait_lane = 6;
int Signal::wait_lane_size() const {
  return wait_lane_.size();
}
void Signal::clear_wait_lane() {
  wait_lane_.Clear();
}
const ::COWA::MapData::Id& Signal::wait_lane(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Signal.wait_lane)
  return wait_lane_.Get(index);
}
::COWA::MapData::Id* Signal::mutable_wait_lane(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Signal.wait_lane)
  return wait_lane_.Mutable(index);
}
::COWA::MapData::Id* Signal::add_wait_lane() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Signal.wait_lane)
  return wait_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Signal::mutable_wait_lane() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Signal.wait_lane)
  return &wait_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Signal::wait_lane() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Signal.wait_lane)
  return wait_lane_;
}

// optional .COWA.MapData.Id wait_signal = 7;
bool Signal::has_wait_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signal::set_has_wait_signal() {
  _has_bits_[0] |= 0x00000002u;
}
void Signal::clear_has_wait_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signal::clear_wait_signal() {
  if (wait_signal_ != NULL) wait_signal_->::COWA::MapData::Id::Clear();
  clear_has_wait_signal();
}
const ::COWA::MapData::Id& Signal::wait_signal() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Signal.wait_signal)
  return wait_signal_ != NULL ? *wait_signal_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Signal::mutable_wait_signal() {
  set_has_wait_signal();
  if (wait_signal_ == NULL) {
    wait_signal_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Signal.wait_signal)
  return wait_signal_;
}
::COWA::MapData::Id* Signal::release_wait_signal() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Signal.wait_signal)
  clear_has_wait_signal();
  ::COWA::MapData::Id* temp = wait_signal_;
  wait_signal_ = NULL;
  return temp;
}
void Signal::set_allocated_wait_signal(::COWA::MapData::Id* wait_signal) {
  delete wait_signal_;
  wait_signal_ = wait_signal;
  if (wait_signal) {
    set_has_wait_signal();
  } else {
    clear_has_wait_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Signal.wait_signal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Crossroad_Line::kSignalsFieldNumber;
const int Crossroad_Line::kLaneInFieldNumber;
const int Crossroad_Line::kLaneOutFieldNumber;
const int Crossroad_Line::kRoadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Crossroad_Line::Crossroad_Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Crossroad.Line)
}
Crossroad_Line::Crossroad_Line(const Crossroad_Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signals_(from.signals_),
      lane_in_(from.lane_in_),
      lane_out_(from.lane_out_),
      road_(from.road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Crossroad.Line)
}

void Crossroad_Line::SharedCtor() {
  _cached_size_ = 0;
}

Crossroad_Line::~Crossroad_Line() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Crossroad.Line)
  SharedDtor();
}

void Crossroad_Line::SharedDtor() {
}

void Crossroad_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Crossroad_Line::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Crossroad_Line& Crossroad_Line::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Crossroad_Line* Crossroad_Line::New(::google::protobuf::Arena* arena) const {
  Crossroad_Line* n = new Crossroad_Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Crossroad_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Crossroad.Line)
  signals_.Clear();
  lane_in_.Clear();
  lane_out_.Clear();
  road_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Crossroad_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Crossroad.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .COWA.MapData.Id signals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id lane_in = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id lane_out = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id road = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Crossroad.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Crossroad.Line)
  return false;
#undef DO_
}

void Crossroad_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Crossroad.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .COWA.MapData.Id signals = 1;
  for (unsigned int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signals(i), output);
  }

  // repeated .COWA.MapData.Id lane_in = 2;
  for (unsigned int i = 0, n = this->lane_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_in(i), output);
  }

  // repeated .COWA.MapData.Id lane_out = 3;
  for (unsigned int i = 0, n = this->lane_out_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lane_out(i), output);
  }

  // repeated .COWA.MapData.Id road = 4;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->road(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Crossroad.Line)
}

::google::protobuf::uint8* Crossroad_Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Crossroad.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .COWA.MapData.Id signals = 1;
  for (unsigned int i = 0, n = this->signals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->signals(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id lane_in = 2;
  for (unsigned int i = 0, n = this->lane_in_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_in(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id lane_out = 3;
  for (unsigned int i = 0, n = this->lane_out_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->lane_out(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id road = 4;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->road(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Crossroad.Line)
  return target;
}

size_t Crossroad_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Crossroad.Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Id signals = 1;
  {
    unsigned int count = this->signals_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signals(i));
    }
  }

  // repeated .COWA.MapData.Id lane_in = 2;
  {
    unsigned int count = this->lane_in_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_in(i));
    }
  }

  // repeated .COWA.MapData.Id lane_out = 3;
  {
    unsigned int count = this->lane_out_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_out(i));
    }
  }

  // repeated .COWA.MapData.Id road = 4;
  {
    unsigned int count = this->road_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crossroad_Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Crossroad.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Crossroad_Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Crossroad_Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Crossroad.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Crossroad.Line)
    MergeFrom(*source);
  }
}

void Crossroad_Line::MergeFrom(const Crossroad_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Crossroad.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  lane_in_.MergeFrom(from.lane_in_);
  lane_out_.MergeFrom(from.lane_out_);
  road_.MergeFrom(from.road_);
}

void Crossroad_Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Crossroad.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crossroad_Line::CopyFrom(const Crossroad_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Crossroad.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crossroad_Line::IsInitialized() const {
  return true;
}

void Crossroad_Line::Swap(Crossroad_Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Crossroad_Line::InternalSwap(Crossroad_Line* other) {
  signals_.InternalSwap(&other->signals_);
  lane_in_.InternalSwap(&other->lane_in_);
  lane_out_.InternalSwap(&other->lane_out_);
  road_.InternalSwap(&other->road_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Crossroad_Line::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Crossroad_Line

// repeated .COWA.MapData.Id signals = 1;
int Crossroad_Line::signals_size() const {
  return signals_.size();
}
void Crossroad_Line::clear_signals() {
  signals_.Clear();
}
const ::COWA::MapData::Id& Crossroad_Line::signals(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.Line.signals)
  return signals_.Get(index);
}
::COWA::MapData::Id* Crossroad_Line::mutable_signals(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.Line.signals)
  return signals_.Mutable(index);
}
::COWA::MapData::Id* Crossroad_Line::add_signals() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Crossroad.Line.signals)
  return signals_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Crossroad_Line::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Crossroad.Line.signals)
  return &signals_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Crossroad_Line::signals() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Crossroad.Line.signals)
  return signals_;
}

// repeated .COWA.MapData.Id lane_in = 2;
int Crossroad_Line::lane_in_size() const {
  return lane_in_.size();
}
void Crossroad_Line::clear_lane_in() {
  lane_in_.Clear();
}
const ::COWA::MapData::Id& Crossroad_Line::lane_in(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.Line.lane_in)
  return lane_in_.Get(index);
}
::COWA::MapData::Id* Crossroad_Line::mutable_lane_in(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.Line.lane_in)
  return lane_in_.Mutable(index);
}
::COWA::MapData::Id* Crossroad_Line::add_lane_in() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Crossroad.Line.lane_in)
  return lane_in_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Crossroad_Line::mutable_lane_in() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Crossroad.Line.lane_in)
  return &lane_in_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Crossroad_Line::lane_in() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Crossroad.Line.lane_in)
  return lane_in_;
}

// repeated .COWA.MapData.Id lane_out = 3;
int Crossroad_Line::lane_out_size() const {
  return lane_out_.size();
}
void Crossroad_Line::clear_lane_out() {
  lane_out_.Clear();
}
const ::COWA::MapData::Id& Crossroad_Line::lane_out(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.Line.lane_out)
  return lane_out_.Get(index);
}
::COWA::MapData::Id* Crossroad_Line::mutable_lane_out(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.Line.lane_out)
  return lane_out_.Mutable(index);
}
::COWA::MapData::Id* Crossroad_Line::add_lane_out() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Crossroad.Line.lane_out)
  return lane_out_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Crossroad_Line::mutable_lane_out() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Crossroad.Line.lane_out)
  return &lane_out_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Crossroad_Line::lane_out() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Crossroad.Line.lane_out)
  return lane_out_;
}

// repeated .COWA.MapData.Id road = 4;
int Crossroad_Line::road_size() const {
  return road_.size();
}
void Crossroad_Line::clear_road() {
  road_.Clear();
}
const ::COWA::MapData::Id& Crossroad_Line::road(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.Line.road)
  return road_.Get(index);
}
::COWA::MapData::Id* Crossroad_Line::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.Line.road)
  return road_.Mutable(index);
}
::COWA::MapData::Id* Crossroad_Line::add_road() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Crossroad.Line.road)
  return road_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
Crossroad_Line::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Crossroad.Line.road)
  return &road_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
Crossroad_Line::road() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Crossroad.Line.road)
  return road_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Crossroad::kIdFieldNumber;
const int Crossroad::kGroupFieldNumber;
const int Crossroad::kBoundaryFieldNumber;
const int Crossroad::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Crossroad::Crossroad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Crossroad)
}
Crossroad::Crossroad(const Crossroad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      group_(from.group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::COWA::MapData::Polygon(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Crossroad)
}

void Crossroad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&boundary_) -
    reinterpret_cast<char*>(&id_) + sizeof(boundary_));
  type_ = 1;
}

Crossroad::~Crossroad() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Crossroad)
  SharedDtor();
}

void Crossroad::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete boundary_;
  }
}

void Crossroad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Crossroad::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Crossroad& Crossroad::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Crossroad* Crossroad::New(::google::protobuf::Arena* arena) const {
  Crossroad* n = new Crossroad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Crossroad::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Crossroad)
  group_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_boundary()) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->::COWA::MapData::Polygon::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Crossroad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Crossroad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Crossroad.Line group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Crossroad.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Crossroad_Type_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Crossroad_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Crossroad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Crossroad)
  return false;
#undef DO_
}

void Crossroad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Crossroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .COWA.MapData.Crossroad.Line group = 2;
  for (unsigned int i = 0, n = this->group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(i), output);
  }

  // optional .COWA.MapData.Polygon boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->boundary_, output);
  }

  // optional .COWA.MapData.Crossroad.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Crossroad)
}

::google::protobuf::uint8* Crossroad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Crossroad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .COWA.MapData.Crossroad.Line group = 2;
  for (unsigned int i = 0, n = this->group_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->group(i), deterministic, target);
  }

  // optional .COWA.MapData.Polygon boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->boundary_, deterministic, target);
  }

  // optional .COWA.MapData.Crossroad.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Crossroad)
  return target;
}

size_t Crossroad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Crossroad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Crossroad.Line group = 2;
  {
    unsigned int count = this->group_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

    // optional .COWA.MapData.Crossroad.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crossroad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Crossroad)
  GOOGLE_DCHECK_NE(&from, this);
  const Crossroad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Crossroad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Crossroad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Crossroad)
    MergeFrom(*source);
  }
}

void Crossroad::MergeFrom(const Crossroad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Crossroad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_.MergeFrom(from.group_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::COWA::MapData::Polygon::MergeFrom(from.boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Crossroad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Crossroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crossroad::CopyFrom(const Crossroad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Crossroad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crossroad::IsInitialized() const {
  return true;
}

void Crossroad::Swap(Crossroad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Crossroad::InternalSwap(Crossroad* other) {
  group_.InternalSwap(&other->group_);
  std::swap(id_, other->id_);
  std::swap(boundary_, other->boundary_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Crossroad::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Crossroad

// optional .COWA.MapData.Id id = 1;
bool Crossroad::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Crossroad::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Crossroad::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Crossroad::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& Crossroad::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* Crossroad::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.id)
  return id_;
}
::COWA::MapData::Id* Crossroad::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Crossroad.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Crossroad::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Crossroad.id)
}

// repeated .COWA.MapData.Crossroad.Line group = 2;
int Crossroad::group_size() const {
  return group_.size();
}
void Crossroad::clear_group() {
  group_.Clear();
}
const ::COWA::MapData::Crossroad_Line& Crossroad::group(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.group)
  return group_.Get(index);
}
::COWA::MapData::Crossroad_Line* Crossroad::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.group)
  return group_.Mutable(index);
}
::COWA::MapData::Crossroad_Line* Crossroad::add_group() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Crossroad.group)
  return group_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Crossroad_Line >*
Crossroad::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Crossroad.group)
  return &group_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Crossroad_Line >&
Crossroad::group() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Crossroad.group)
  return group_;
}

// optional .COWA.MapData.Polygon boundary = 3;
bool Crossroad::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Crossroad::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void Crossroad::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void Crossroad::clear_boundary() {
  if (boundary_ != NULL) boundary_->::COWA::MapData::Polygon::Clear();
  clear_has_boundary();
}
const ::COWA::MapData::Polygon& Crossroad::boundary() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* Crossroad::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Crossroad.boundary)
  return boundary_;
}
::COWA::MapData::Polygon* Crossroad::release_boundary() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Crossroad.boundary)
  clear_has_boundary();
  ::COWA::MapData::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void Crossroad::set_allocated_boundary(::COWA::MapData::Polygon* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Crossroad.boundary)
}

// optional .COWA.MapData.Crossroad.Type type = 4;
bool Crossroad::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Crossroad::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Crossroad::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Crossroad::clear_type() {
  type_ = 1;
  clear_has_type();
}
::COWA::MapData::Crossroad_Type Crossroad::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Crossroad.type)
  return static_cast< ::COWA::MapData::Crossroad_Type >(type_);
}
void Crossroad::set_type(::COWA::MapData::Crossroad_Type value) {
  assert(::COWA::MapData::Crossroad_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Crossroad.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneChange::kIdFieldNumber;
const int LaneChange::kLaneInFieldNumber;
const int LaneChange::kLaneOutFieldNumber;
const int LaneChange::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneChange::LaneChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.LaneChange)
}
LaneChange::LaneChange(const LaneChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_in_(from.lane_in_),
      lane_out_(from.lane_out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::COWA::MapData::Polygon(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.LaneChange)
}

void LaneChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&boundary_) -
    reinterpret_cast<char*>(&id_) + sizeof(boundary_));
}

LaneChange::~LaneChange() {
  // @@protoc_insertion_point(destructor:COWA.MapData.LaneChange)
  SharedDtor();
}

void LaneChange::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete boundary_;
  }
}

void LaneChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneChange::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneChange& LaneChange::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneChange* LaneChange::New(::google::protobuf::Arena* arena) const {
  LaneChange* n = new LaneChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneChange::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.LaneChange)
  lane_in_.Clear();
  lane_out_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::COWA::MapData::Id::Clear();
    }
    if (has_boundary()) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->::COWA::MapData::Polygon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.LaneChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id lane_in = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Id lane_out = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Polygon boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.LaneChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.LaneChange)
  return false;
#undef DO_
}

void LaneChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.LaneChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .COWA.MapData.Id lane_in = 2;
  for (unsigned int i = 0, n = this->lane_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_in(i), output);
  }

  // repeated .COWA.MapData.Id lane_out = 3;
  for (unsigned int i = 0, n = this->lane_out_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lane_out(i), output);
  }

  // optional .COWA.MapData.Polygon boundary = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->boundary_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.LaneChange)
}

::google::protobuf::uint8* LaneChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.LaneChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .COWA.MapData.Id lane_in = 2;
  for (unsigned int i = 0, n = this->lane_in_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_in(i), deterministic, target);
  }

  // repeated .COWA.MapData.Id lane_out = 3;
  for (unsigned int i = 0, n = this->lane_out_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->lane_out(i), deterministic, target);
  }

  // optional .COWA.MapData.Polygon boundary = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->boundary_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.LaneChange)
  return target;
}

size_t LaneChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.LaneChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Id lane_in = 2;
  {
    unsigned int count = this->lane_in_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_in(i));
    }
  }

  // repeated .COWA.MapData.Id lane_out = 3;
  {
    unsigned int count = this->lane_out_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_out(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .COWA.MapData.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .COWA.MapData.Polygon boundary = 4;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.LaneChange)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.LaneChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.LaneChange)
    MergeFrom(*source);
  }
}

void LaneChange::MergeFrom(const LaneChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.LaneChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_in_.MergeFrom(from.lane_in_);
  lane_out_.MergeFrom(from.lane_out_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::COWA::MapData::Polygon::MergeFrom(from.boundary());
    }
  }
}

void LaneChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.LaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneChange::CopyFrom(const LaneChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.LaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneChange::IsInitialized() const {
  return true;
}

void LaneChange::Swap(LaneChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneChange::InternalSwap(LaneChange* other) {
  lane_in_.InternalSwap(&other->lane_in_);
  lane_out_.InternalSwap(&other->lane_out_);
  std::swap(id_, other->id_);
  std::swap(boundary_, other->boundary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneChange::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneChange

// optional .COWA.MapData.Id id = 1;
bool LaneChange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneChange::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneChange::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneChange::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::Id::Clear();
  clear_has_id();
}
const ::COWA::MapData::Id& LaneChange::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneChange.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::Id::internal_default_instance();
}
::COWA::MapData::Id* LaneChange::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::Id;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneChange.id)
  return id_;
}
::COWA::MapData::Id* LaneChange::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.LaneChange.id)
  clear_has_id();
  ::COWA::MapData::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void LaneChange::set_allocated_id(::COWA::MapData::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.LaneChange.id)
}

// repeated .COWA.MapData.Id lane_in = 2;
int LaneChange::lane_in_size() const {
  return lane_in_.size();
}
void LaneChange::clear_lane_in() {
  lane_in_.Clear();
}
const ::COWA::MapData::Id& LaneChange::lane_in(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneChange.lane_in)
  return lane_in_.Get(index);
}
::COWA::MapData::Id* LaneChange::mutable_lane_in(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneChange.lane_in)
  return lane_in_.Mutable(index);
}
::COWA::MapData::Id* LaneChange::add_lane_in() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneChange.lane_in)
  return lane_in_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
LaneChange::mutable_lane_in() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneChange.lane_in)
  return &lane_in_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
LaneChange::lane_in() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneChange.lane_in)
  return lane_in_;
}

// repeated .COWA.MapData.Id lane_out = 3;
int LaneChange::lane_out_size() const {
  return lane_out_.size();
}
void LaneChange::clear_lane_out() {
  lane_out_.Clear();
}
const ::COWA::MapData::Id& LaneChange::lane_out(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneChange.lane_out)
  return lane_out_.Get(index);
}
::COWA::MapData::Id* LaneChange::mutable_lane_out(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneChange.lane_out)
  return lane_out_.Mutable(index);
}
::COWA::MapData::Id* LaneChange::add_lane_out() {
  // @@protoc_insertion_point(field_add:COWA.MapData.LaneChange.lane_out)
  return lane_out_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >*
LaneChange::mutable_lane_out() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.LaneChange.lane_out)
  return &lane_out_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Id >&
LaneChange::lane_out() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.LaneChange.lane_out)
  return lane_out_;
}

// optional .COWA.MapData.Polygon boundary = 4;
bool LaneChange::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneChange::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneChange::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneChange::clear_boundary() {
  if (boundary_ != NULL) boundary_->::COWA::MapData::Polygon::Clear();
  clear_has_boundary();
}
const ::COWA::MapData::Polygon& LaneChange::boundary() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.LaneChange.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::COWA::MapData::Polygon::internal_default_instance();
}
::COWA::MapData::Polygon* LaneChange::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::COWA::MapData::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.LaneChange.boundary)
  return boundary_;
}
::COWA::MapData::Polygon* LaneChange::release_boundary() {
  // @@protoc_insertion_point(field_release:COWA.MapData.LaneChange.boundary)
  clear_has_boundary();
  ::COWA::MapData::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void LaneChange::set_allocated_boundary(::COWA::MapData::Polygon* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.LaneChange.boundary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HdMap::kHeaderFieldNumber;
const int HdMap::kRoadFieldNumber;
const int HdMap::kLaneCurveFieldNumber;
const int HdMap::kLaneFieldNumber;
const int HdMap::kCrosswalkFieldNumber;
const int HdMap::kSignalFieldNumber;
const int HdMap::kCrossroadFieldNumber;
const int HdMap::kRampFieldNumber;
const int HdMap::kRoadmarkFieldNumber;
const int HdMap::kParkingSpaceFieldNumber;
const int HdMap::kOverlapFieldNumber;
const int HdMap::kObjectsFieldNumber;
const int HdMap::kLaneChangeFieldNumber;
const int HdMap::kTideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HdMap::HdMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.HdMap)
}
HdMap::HdMap(const HdMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_(from.lane_),
      crosswalk_(from.crosswalk_),
      signal_(from.signal_),
      crossroad_(from.crossroad_),
      ramp_(from.ramp_),
      road_(from.road_),
      roadmark_(from.roadmark_),
      parking_space_(from.parking_space_),
      overlap_(from.overlap_),
      lane_curve_(from.lane_curve_),
      objects_(from.objects_),
      lane_change_(from.lane_change_),
      tide_(from.tide_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::COWA::MapData::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.HdMap)
}

void HdMap::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

HdMap::~HdMap() {
  // @@protoc_insertion_point(destructor:COWA.MapData.HdMap)
  SharedDtor();
}

void HdMap::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void HdMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HdMap::descriptor() {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HdMap& HdMap::default_instance() {
  protobuf_hdmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

HdMap* HdMap::New(::google::protobuf::Arena* arena) const {
  HdMap* n = new HdMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HdMap::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.HdMap)
  lane_.Clear();
  crosswalk_.Clear();
  signal_.Clear();
  crossroad_.Clear();
  ramp_.Clear();
  road_.Clear();
  roadmark_.Clear();
  parking_space_.Clear();
  overlap_.Clear();
  lane_curve_.Clear();
  objects_.Clear();
  lane_change_.Clear();
  tide_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::COWA::MapData::Header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HdMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.HdMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Lane lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Crosswalk crosswalk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Signal signal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Crossroad crossroad = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crossroad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Ramp ramp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ramp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Road road = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Roadmark roadmark = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roadmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.ParkingSpace parking_space = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parking_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Overlap overlap = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overlap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.LaneCurve lane_curve = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Object objects = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.LaneChange lane_change = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.LaneTide tide = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tide()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.HdMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.HdMap)
  return false;
#undef DO_
}

void HdMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.HdMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .COWA.MapData.Lane lane = 2;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane(i), output);
  }

  // repeated .COWA.MapData.Crosswalk crosswalk = 3;
  for (unsigned int i = 0, n = this->crosswalk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->crosswalk(i), output);
  }

  // repeated .COWA.MapData.Signal signal = 4;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signal(i), output);
  }

  // repeated .COWA.MapData.Crossroad crossroad = 5;
  for (unsigned int i = 0, n = this->crossroad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->crossroad(i), output);
  }

  // repeated .COWA.MapData.Ramp ramp = 6;
  for (unsigned int i = 0, n = this->ramp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ramp(i), output);
  }

  // repeated .COWA.MapData.Road road = 7;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->road(i), output);
  }

  // repeated .COWA.MapData.Roadmark roadmark = 8;
  for (unsigned int i = 0, n = this->roadmark_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->roadmark(i), output);
  }

  // repeated .COWA.MapData.ParkingSpace parking_space = 9;
  for (unsigned int i = 0, n = this->parking_space_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->parking_space(i), output);
  }

  // repeated .COWA.MapData.Overlap overlap = 10;
  for (unsigned int i = 0, n = this->overlap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->overlap(i), output);
  }

  // repeated .COWA.MapData.LaneCurve lane_curve = 11;
  for (unsigned int i = 0, n = this->lane_curve_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lane_curve(i), output);
  }

  // repeated .COWA.MapData.Object objects = 12;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->objects(i), output);
  }

  // repeated .COWA.MapData.LaneChange lane_change = 13;
  for (unsigned int i = 0, n = this->lane_change_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lane_change(i), output);
  }

  // repeated .COWA.MapData.LaneTide tide = 14;
  for (unsigned int i = 0, n = this->tide_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tide(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.HdMap)
}

::google::protobuf::uint8* HdMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.HdMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .COWA.MapData.Lane lane = 2;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane(i), deterministic, target);
  }

  // repeated .COWA.MapData.Crosswalk crosswalk = 3;
  for (unsigned int i = 0, n = this->crosswalk_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->crosswalk(i), deterministic, target);
  }

  // repeated .COWA.MapData.Signal signal = 4;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->signal(i), deterministic, target);
  }

  // repeated .COWA.MapData.Crossroad crossroad = 5;
  for (unsigned int i = 0, n = this->crossroad_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->crossroad(i), deterministic, target);
  }

  // repeated .COWA.MapData.Ramp ramp = 6;
  for (unsigned int i = 0, n = this->ramp_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->ramp(i), deterministic, target);
  }

  // repeated .COWA.MapData.Road road = 7;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->road(i), deterministic, target);
  }

  // repeated .COWA.MapData.Roadmark roadmark = 8;
  for (unsigned int i = 0, n = this->roadmark_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->roadmark(i), deterministic, target);
  }

  // repeated .COWA.MapData.ParkingSpace parking_space = 9;
  for (unsigned int i = 0, n = this->parking_space_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->parking_space(i), deterministic, target);
  }

  // repeated .COWA.MapData.Overlap overlap = 10;
  for (unsigned int i = 0, n = this->overlap_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->overlap(i), deterministic, target);
  }

  // repeated .COWA.MapData.LaneCurve lane_curve = 11;
  for (unsigned int i = 0, n = this->lane_curve_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->lane_curve(i), deterministic, target);
  }

  // repeated .COWA.MapData.Object objects = 12;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->objects(i), deterministic, target);
  }

  // repeated .COWA.MapData.LaneChange lane_change = 13;
  for (unsigned int i = 0, n = this->lane_change_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->lane_change(i), deterministic, target);
  }

  // repeated .COWA.MapData.LaneTide tide = 14;
  for (unsigned int i = 0, n = this->tide_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->tide(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.HdMap)
  return target;
}

size_t HdMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.HdMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Lane lane = 2;
  {
    unsigned int count = this->lane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane(i));
    }
  }

  // repeated .COWA.MapData.Crosswalk crosswalk = 3;
  {
    unsigned int count = this->crosswalk_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crosswalk(i));
    }
  }

  // repeated .COWA.MapData.Signal signal = 4;
  {
    unsigned int count = this->signal_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal(i));
    }
  }

  // repeated .COWA.MapData.Crossroad crossroad = 5;
  {
    unsigned int count = this->crossroad_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossroad(i));
    }
  }

  // repeated .COWA.MapData.Ramp ramp = 6;
  {
    unsigned int count = this->ramp_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ramp(i));
    }
  }

  // repeated .COWA.MapData.Road road = 7;
  {
    unsigned int count = this->road_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road(i));
    }
  }

  // repeated .COWA.MapData.Roadmark roadmark = 8;
  {
    unsigned int count = this->roadmark_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roadmark(i));
    }
  }

  // repeated .COWA.MapData.ParkingSpace parking_space = 9;
  {
    unsigned int count = this->parking_space_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parking_space(i));
    }
  }

  // repeated .COWA.MapData.Overlap overlap = 10;
  {
    unsigned int count = this->overlap_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overlap(i));
    }
  }

  // repeated .COWA.MapData.LaneCurve lane_curve = 11;
  {
    unsigned int count = this->lane_curve_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_curve(i));
    }
  }

  // repeated .COWA.MapData.Object objects = 12;
  {
    unsigned int count = this->objects_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objects(i));
    }
  }

  // repeated .COWA.MapData.LaneChange lane_change = 13;
  {
    unsigned int count = this->lane_change_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_change(i));
    }
  }

  // repeated .COWA.MapData.LaneTide tide = 14;
  {
    unsigned int count = this->tide_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tide(i));
    }
  }

  // optional .COWA.MapData.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HdMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.HdMap)
  GOOGLE_DCHECK_NE(&from, this);
  const HdMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HdMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.HdMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.HdMap)
    MergeFrom(*source);
  }
}

void HdMap::MergeFrom(const HdMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.HdMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_.MergeFrom(from.lane_);
  crosswalk_.MergeFrom(from.crosswalk_);
  signal_.MergeFrom(from.signal_);
  crossroad_.MergeFrom(from.crossroad_);
  ramp_.MergeFrom(from.ramp_);
  road_.MergeFrom(from.road_);
  roadmark_.MergeFrom(from.roadmark_);
  parking_space_.MergeFrom(from.parking_space_);
  overlap_.MergeFrom(from.overlap_);
  lane_curve_.MergeFrom(from.lane_curve_);
  objects_.MergeFrom(from.objects_);
  lane_change_.MergeFrom(from.lane_change_);
  tide_.MergeFrom(from.tide_);
  if (from.has_header()) {
    mutable_header()->::COWA::MapData::Header::MergeFrom(from.header());
  }
}

void HdMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.HdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdMap::CopyFrom(const HdMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.HdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdMap::IsInitialized() const {
  return true;
}

void HdMap::Swap(HdMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HdMap::InternalSwap(HdMap* other) {
  lane_.InternalSwap(&other->lane_);
  crosswalk_.InternalSwap(&other->crosswalk_);
  signal_.InternalSwap(&other->signal_);
  crossroad_.InternalSwap(&other->crossroad_);
  ramp_.InternalSwap(&other->ramp_);
  road_.InternalSwap(&other->road_);
  roadmark_.InternalSwap(&other->roadmark_);
  parking_space_.InternalSwap(&other->parking_space_);
  overlap_.InternalSwap(&other->overlap_);
  lane_curve_.InternalSwap(&other->lane_curve_);
  objects_.InternalSwap(&other->objects_);
  lane_change_.InternalSwap(&other->lane_change_);
  tide_.InternalSwap(&other->tide_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HdMap::GetMetadata() const {
  protobuf_hdmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HdMap

// optional .COWA.MapData.Header header = 1;
bool HdMap::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HdMap::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void HdMap::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void HdMap::clear_header() {
  if (header_ != NULL) header_->::COWA::MapData::Header::Clear();
  clear_has_header();
}
const ::COWA::MapData::Header& HdMap::header() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.header)
  return header_ != NULL ? *header_
                         : *::COWA::MapData::Header::internal_default_instance();
}
::COWA::MapData::Header* HdMap::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::COWA::MapData::Header;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.header)
  return header_;
}
::COWA::MapData::Header* HdMap::release_header() {
  // @@protoc_insertion_point(field_release:COWA.MapData.HdMap.header)
  clear_has_header();
  ::COWA::MapData::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void HdMap::set_allocated_header(::COWA::MapData::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.HdMap.header)
}

// repeated .COWA.MapData.Road road = 7;
int HdMap::road_size() const {
  return road_.size();
}
void HdMap::clear_road() {
  road_.Clear();
}
const ::COWA::MapData::Road& HdMap::road(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.road)
  return road_.Get(index);
}
::COWA::MapData::Road* HdMap::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.road)
  return road_.Mutable(index);
}
::COWA::MapData::Road* HdMap::add_road() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.road)
  return road_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Road >*
HdMap::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.road)
  return &road_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Road >&
HdMap::road() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.road)
  return road_;
}

// repeated .COWA.MapData.LaneCurve lane_curve = 11;
int HdMap::lane_curve_size() const {
  return lane_curve_.size();
}
void HdMap::clear_lane_curve() {
  lane_curve_.Clear();
}
const ::COWA::MapData::LaneCurve& HdMap::lane_curve(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.lane_curve)
  return lane_curve_.Get(index);
}
::COWA::MapData::LaneCurve* HdMap::mutable_lane_curve(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.lane_curve)
  return lane_curve_.Mutable(index);
}
::COWA::MapData::LaneCurve* HdMap::add_lane_curve() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.lane_curve)
  return lane_curve_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneCurve >*
HdMap::mutable_lane_curve() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.lane_curve)
  return &lane_curve_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneCurve >&
HdMap::lane_curve() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.lane_curve)
  return lane_curve_;
}

// repeated .COWA.MapData.Lane lane = 2;
int HdMap::lane_size() const {
  return lane_.size();
}
void HdMap::clear_lane() {
  lane_.Clear();
}
const ::COWA::MapData::Lane& HdMap::lane(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.lane)
  return lane_.Get(index);
}
::COWA::MapData::Lane* HdMap::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.lane)
  return lane_.Mutable(index);
}
::COWA::MapData::Lane* HdMap::add_lane() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.lane)
  return lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Lane >*
HdMap::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.lane)
  return &lane_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Lane >&
HdMap::lane() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.lane)
  return lane_;
}

// repeated .COWA.MapData.Crosswalk crosswalk = 3;
int HdMap::crosswalk_size() const {
  return crosswalk_.size();
}
void HdMap::clear_crosswalk() {
  crosswalk_.Clear();
}
const ::COWA::MapData::Crosswalk& HdMap::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.crosswalk)
  return crosswalk_.Get(index);
}
::COWA::MapData::Crosswalk* HdMap::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.crosswalk)
  return crosswalk_.Mutable(index);
}
::COWA::MapData::Crosswalk* HdMap::add_crosswalk() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.crosswalk)
  return crosswalk_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Crosswalk >*
HdMap::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.crosswalk)
  return &crosswalk_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Crosswalk >&
HdMap::crosswalk() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.crosswalk)
  return crosswalk_;
}

// repeated .COWA.MapData.Signal signal = 4;
int HdMap::signal_size() const {
  return signal_.size();
}
void HdMap::clear_signal() {
  signal_.Clear();
}
const ::COWA::MapData::Signal& HdMap::signal(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.signal)
  return signal_.Get(index);
}
::COWA::MapData::Signal* HdMap::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.signal)
  return signal_.Mutable(index);
}
::COWA::MapData::Signal* HdMap::add_signal() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.signal)
  return signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Signal >*
HdMap::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.signal)
  return &signal_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Signal >&
HdMap::signal() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.signal)
  return signal_;
}

// repeated .COWA.MapData.Crossroad crossroad = 5;
int HdMap::crossroad_size() const {
  return crossroad_.size();
}
void HdMap::clear_crossroad() {
  crossroad_.Clear();
}
const ::COWA::MapData::Crossroad& HdMap::crossroad(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.crossroad)
  return crossroad_.Get(index);
}
::COWA::MapData::Crossroad* HdMap::mutable_crossroad(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.crossroad)
  return crossroad_.Mutable(index);
}
::COWA::MapData::Crossroad* HdMap::add_crossroad() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.crossroad)
  return crossroad_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Crossroad >*
HdMap::mutable_crossroad() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.crossroad)
  return &crossroad_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Crossroad >&
HdMap::crossroad() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.crossroad)
  return crossroad_;
}

// repeated .COWA.MapData.Ramp ramp = 6;
int HdMap::ramp_size() const {
  return ramp_.size();
}
void HdMap::clear_ramp() {
  ramp_.Clear();
}
const ::COWA::MapData::Ramp& HdMap::ramp(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.ramp)
  return ramp_.Get(index);
}
::COWA::MapData::Ramp* HdMap::mutable_ramp(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.ramp)
  return ramp_.Mutable(index);
}
::COWA::MapData::Ramp* HdMap::add_ramp() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.ramp)
  return ramp_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Ramp >*
HdMap::mutable_ramp() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.ramp)
  return &ramp_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Ramp >&
HdMap::ramp() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.ramp)
  return ramp_;
}

// repeated .COWA.MapData.Roadmark roadmark = 8;
int HdMap::roadmark_size() const {
  return roadmark_.size();
}
void HdMap::clear_roadmark() {
  roadmark_.Clear();
}
const ::COWA::MapData::Roadmark& HdMap::roadmark(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.roadmark)
  return roadmark_.Get(index);
}
::COWA::MapData::Roadmark* HdMap::mutable_roadmark(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.roadmark)
  return roadmark_.Mutable(index);
}
::COWA::MapData::Roadmark* HdMap::add_roadmark() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.roadmark)
  return roadmark_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Roadmark >*
HdMap::mutable_roadmark() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.roadmark)
  return &roadmark_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Roadmark >&
HdMap::roadmark() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.roadmark)
  return roadmark_;
}

// repeated .COWA.MapData.ParkingSpace parking_space = 9;
int HdMap::parking_space_size() const {
  return parking_space_.size();
}
void HdMap::clear_parking_space() {
  parking_space_.Clear();
}
const ::COWA::MapData::ParkingSpace& HdMap::parking_space(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.parking_space)
  return parking_space_.Get(index);
}
::COWA::MapData::ParkingSpace* HdMap::mutable_parking_space(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.parking_space)
  return parking_space_.Mutable(index);
}
::COWA::MapData::ParkingSpace* HdMap::add_parking_space() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.parking_space)
  return parking_space_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::ParkingSpace >*
HdMap::mutable_parking_space() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.parking_space)
  return &parking_space_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::ParkingSpace >&
HdMap::parking_space() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.parking_space)
  return parking_space_;
}

// repeated .COWA.MapData.Overlap overlap = 10;
int HdMap::overlap_size() const {
  return overlap_.size();
}
void HdMap::clear_overlap() {
  overlap_.Clear();
}
const ::COWA::MapData::Overlap& HdMap::overlap(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.overlap)
  return overlap_.Get(index);
}
::COWA::MapData::Overlap* HdMap::mutable_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.overlap)
  return overlap_.Mutable(index);
}
::COWA::MapData::Overlap* HdMap::add_overlap() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.overlap)
  return overlap_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Overlap >*
HdMap::mutable_overlap() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.overlap)
  return &overlap_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Overlap >&
HdMap::overlap() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.overlap)
  return overlap_;
}

// repeated .COWA.MapData.Object objects = 12;
int HdMap::objects_size() const {
  return objects_.size();
}
void HdMap::clear_objects() {
  objects_.Clear();
}
const ::COWA::MapData::Object& HdMap::objects(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.objects)
  return objects_.Get(index);
}
::COWA::MapData::Object* HdMap::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.objects)
  return objects_.Mutable(index);
}
::COWA::MapData::Object* HdMap::add_objects() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Object >*
HdMap::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Object >&
HdMap::objects() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.objects)
  return objects_;
}

// repeated .COWA.MapData.LaneChange lane_change = 13;
int HdMap::lane_change_size() const {
  return lane_change_.size();
}
void HdMap::clear_lane_change() {
  lane_change_.Clear();
}
const ::COWA::MapData::LaneChange& HdMap::lane_change(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.lane_change)
  return lane_change_.Get(index);
}
::COWA::MapData::LaneChange* HdMap::mutable_lane_change(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.lane_change)
  return lane_change_.Mutable(index);
}
::COWA::MapData::LaneChange* HdMap::add_lane_change() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.lane_change)
  return lane_change_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneChange >*
HdMap::mutable_lane_change() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.lane_change)
  return &lane_change_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneChange >&
HdMap::lane_change() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.lane_change)
  return lane_change_;
}

// repeated .COWA.MapData.LaneTide tide = 14;
int HdMap::tide_size() const {
  return tide_.size();
}
void HdMap::clear_tide() {
  tide_.Clear();
}
const ::COWA::MapData::LaneTide& HdMap::tide(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.HdMap.tide)
  return tide_.Get(index);
}
::COWA::MapData::LaneTide* HdMap::mutable_tide(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.HdMap.tide)
  return tide_.Mutable(index);
}
::COWA::MapData::LaneTide* HdMap::add_tide() {
  // @@protoc_insertion_point(field_add:COWA.MapData.HdMap.tide)
  return tide_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneTide >*
HdMap::mutable_tide() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.HdMap.tide)
  return &tide_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::LaneTide >&
HdMap::tide() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.HdMap.tide)
  return tide_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MapData
}  // namespace COWA

// @@protoc_insertion_point(global_scope)
