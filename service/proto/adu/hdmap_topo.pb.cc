// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hdmap_topo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hdmap_topo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace COWA {
namespace MapData {
class TopoIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TopoId> {
} _TopoId_default_instance_;
class NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node> {
} _Node_default_instance_;
class EdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Edge> {
} _Edge_default_instance_;
class GraphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Graph> {
} _Graph_default_instance_;

namespace protobuf_hdmap_5ftopo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopoId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopoId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopoId, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopoId, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, cost_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, hdmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_),
  0,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(TopoId)},
  { 9, 16, sizeof(Node)},
  { 18, 27, sizeof(Edge)},
  { 31, 39, sizeof(Graph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopoId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Graph_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hdmap_topo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _TopoId_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Node_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Edge_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Graph_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::COWA::MapData::protobuf_hdmap_5fcommon_2eproto::InitDefaults();
  _TopoId_default_instance_.DefaultConstruct();
  _Node_default_instance_.DefaultConstruct();
  _Edge_default_instance_.DefaultConstruct();
  _Graph_default_instance_.DefaultConstruct();
  _Node_default_instance_.get_mutable()->id_ = const_cast< ::COWA::MapData::TopoId*>(
      ::COWA::MapData::TopoId::internal_default_instance());
  _Edge_default_instance_.get_mutable()->from_ = const_cast< ::COWA::MapData::TopoId*>(
      ::COWA::MapData::TopoId::internal_default_instance());
  _Edge_default_instance_.get_mutable()->to_ = const_cast< ::COWA::MapData::TopoId*>(
      ::COWA::MapData::TopoId::internal_default_instance());
  _Graph_default_instance_.get_mutable()->hdmap_ = const_cast< ::COWA::MapData::Header*>(
      ::COWA::MapData::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020hdmap_topo.proto\022\014COWA.MapData\032\022hdmap_"
      "common.proto\":\n\006TopoId\022\n\n\002id\030\001 \001(\t\022$\n\004ty"
      "pe\030\002 \001(\0162\026.COWA.MapData.TopoType\"6\n\004Node"
      "\022 \n\002id\030\001 \001(\0132\024.COWA.MapData.TopoId\022\014\n\004co"
      "st\030\002 \001(\001\"\316\001\n\004Edge\022\"\n\004from\030\001 \001(\0132\024.COWA.M"
      "apData.TopoId\022 \n\002to\030\002 \001(\0132\024.COWA.MapData"
      ".TopoId\022\014\n\004cost\030\003 \001(\001\022.\n\004type\030\004 \001(\0162 .CO"
      "WA.MapData.Edge.DirectionType\"B\n\rDirecti"
      "onType\022\013\n\007FORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002"
      "\022\017\n\013BIDIRECTION\020\003\"p\n\005Graph\022#\n\005hdmap\030\001 \001("
      "\0132\024.COWA.MapData.Header\022 \n\004node\030\003 \003(\0132\022."
      "COWA.MapData.Node\022 \n\004edge\030\004 \003(\0132\022.COWA.M"
      "apData.Edge*v\n\010TopoType\022\020\n\014CITY_DRIVING\020"
      "\002\022\n\n\006BIKING\020\003\022\014\n\010SIDEWALK\020\004\022\013\n\007PARKING\020\005"
      "\022\014\n\010SHOULDER\020\006\022\010\n\004RAMP\020\007\022\r\n\tCROSSWALK\020\010\022"
      "\n\n\006SQUARE\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hdmap_topo.proto", &protobuf_RegisterTypes);
  ::COWA::MapData::protobuf_hdmap_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_hdmap_5ftopo_2eproto

const ::google::protobuf::EnumDescriptor* Edge_DirectionType_descriptor() {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_enum_descriptors[0];
}
bool Edge_DirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Edge_DirectionType Edge::FORWARD;
const Edge_DirectionType Edge::LEFT;
const Edge_DirectionType Edge::RIGHT;
const Edge_DirectionType Edge::BIDIRECTION;
const Edge_DirectionType Edge::DirectionType_MIN;
const Edge_DirectionType Edge::DirectionType_MAX;
const int Edge::DirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TopoType_descriptor() {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_enum_descriptors[1];
}
bool TopoType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopoId::kIdFieldNumber;
const int TopoId::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopoId::TopoId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.TopoId)
}
TopoId::TopoId(const TopoId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.TopoId)
}

void TopoId::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 2;
}

TopoId::~TopoId() {
  // @@protoc_insertion_point(destructor:COWA.MapData.TopoId)
  SharedDtor();
}

void TopoId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopoId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopoId::descriptor() {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopoId& TopoId::default_instance() {
  protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopoId* TopoId::New(::google::protobuf::Arena* arena) const {
  TopoId* n = new TopoId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopoId::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.TopoId)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopoId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.TopoId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "COWA.MapData.TopoId.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.TopoType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::TopoType_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::TopoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.TopoId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.TopoId)
  return false;
#undef DO_
}

void TopoId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.TopoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.MapData.TopoId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .COWA.MapData.TopoType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.TopoId)
}

::google::protobuf::uint8* TopoId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.TopoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "COWA.MapData.TopoId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .COWA.MapData.TopoType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.TopoId)
  return target;
}

size_t TopoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.TopoId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .COWA.MapData.TopoType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopoId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.TopoId)
  GOOGLE_DCHECK_NE(&from, this);
  const TopoId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopoId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.TopoId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.TopoId)
    MergeFrom(*source);
  }
}

void TopoId::MergeFrom(const TopoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.TopoId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TopoId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.TopoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopoId::CopyFrom(const TopoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.TopoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopoId::IsInitialized() const {
  return true;
}

void TopoId::Swap(TopoId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopoId::InternalSwap(TopoId* other) {
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopoId::GetMetadata() const {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopoId

// optional string id = 1;
bool TopoId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopoId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TopoId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopoId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& TopoId::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.TopoId.id)
  return id_.GetNoArena();
}
void TopoId::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:COWA.MapData.TopoId.id)
}
#if LANG_CXX11
void TopoId::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COWA.MapData.TopoId.id)
}
#endif
void TopoId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COWA.MapData.TopoId.id)
}
void TopoId::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COWA.MapData.TopoId.id)
}
::std::string* TopoId::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:COWA.MapData.TopoId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopoId::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.TopoId.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopoId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.TopoId.id)
}

// optional .COWA.MapData.TopoType type = 2;
bool TopoId::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopoId::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TopoId::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopoId::clear_type() {
  type_ = 2;
  clear_has_type();
}
::COWA::MapData::TopoType TopoId::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.TopoId.type)
  return static_cast< ::COWA::MapData::TopoType >(type_);
}
void TopoId::set_type(::COWA::MapData::TopoType value) {
  assert(::COWA::MapData::TopoType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.TopoId.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::COWA::MapData::TopoId(*from.id_);
  } else {
    id_ = NULL;
  }
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Node)
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&id_) + sizeof(cost_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Node)
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::COWA::MapData::TopoId::Clear();
  }
  cost_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.TopoId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.TopoId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional double cost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.TopoId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional double cost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .COWA.MapData.TopoId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional double cost = 2;
    if (has_cost()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::COWA::MapData::TopoId::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      cost_ = from.cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(id_, other->id_);
  std::swap(cost_, other->cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional .COWA.MapData.TopoId id = 1;
bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Node::clear_id() {
  if (id_ != NULL) id_->::COWA::MapData::TopoId::Clear();
  clear_has_id();
}
const ::COWA::MapData::TopoId& Node::id() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Node.id)
  return id_ != NULL ? *id_
                         : *::COWA::MapData::TopoId::internal_default_instance();
}
::COWA::MapData::TopoId* Node::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::COWA::MapData::TopoId;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Node.id)
  return id_;
}
::COWA::MapData::TopoId* Node::release_id() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Node.id)
  clear_has_id();
  ::COWA::MapData::TopoId* temp = id_;
  id_ = NULL;
  return temp;
}
void Node::set_allocated_id(::COWA::MapData::TopoId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Node.id)
}

// optional double cost = 2;
bool Node::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Node::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
void Node::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
void Node::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
double Node::cost() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Node.cost)
  return cost_;
}
void Node::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Node.cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kFromFieldNumber;
const int Edge::kToFieldNumber;
const int Edge::kCostFieldNumber;
const int Edge::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::COWA::MapData::TopoId(*from.from_);
  } else {
    from_ = NULL;
  }
  if (from.has_to()) {
    to_ = new ::COWA::MapData::TopoId(*from.to_);
  } else {
    to_ = NULL;
  }
  ::memcpy(&cost_, &from.cost_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&cost_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Edge)
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&from_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&from_) + sizeof(type_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != internal_default_instance()) {
    delete from_;
  }
  if (this != internal_default_instance()) {
    delete to_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Edge& Edge::default_instance() {
  protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Edge)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_from()) {
      GOOGLE_DCHECK(from_ != NULL);
      from_->::COWA::MapData::TopoId::Clear();
    }
    if (has_to()) {
      GOOGLE_DCHECK(to_ != NULL);
      to_->::COWA::MapData::TopoId::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&cost_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&cost_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.TopoId from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.TopoId to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .COWA.MapData.Edge.DirectionType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COWA::MapData::Edge_DirectionType_IsValid(value)) {
            set_type(static_cast< ::COWA::MapData::Edge_DirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.TopoId from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // optional .COWA.MapData.TopoId to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_, output);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cost(), output);
  }

  // optional .COWA.MapData.Edge.DirectionType type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.TopoId from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, deterministic, target);
  }

  // optional .COWA.MapData.TopoId to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_, deterministic, target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cost(), target);
  }

  // optional .COWA.MapData.Edge.DirectionType type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Edge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .COWA.MapData.TopoId from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_);
    }

    // optional .COWA.MapData.TopoId to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_);
    }

    // optional double cost = 3;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional .COWA.MapData.Edge.DirectionType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_from()->::COWA::MapData::TopoId::MergeFrom(from.from());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_to()->::COWA::MapData::TopoId::MergeFrom(from.to());
    }
    if (cached_has_bits & 0x00000004u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  std::swap(cost_, other->cost_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional .COWA.MapData.TopoId from = 1;
bool Edge::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Edge::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void Edge::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void Edge::clear_from() {
  if (from_ != NULL) from_->::COWA::MapData::TopoId::Clear();
  clear_has_from();
}
const ::COWA::MapData::TopoId& Edge::from() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Edge.from)
  return from_ != NULL ? *from_
                         : *::COWA::MapData::TopoId::internal_default_instance();
}
::COWA::MapData::TopoId* Edge::mutable_from() {
  set_has_from();
  if (from_ == NULL) {
    from_ = new ::COWA::MapData::TopoId;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Edge.from)
  return from_;
}
::COWA::MapData::TopoId* Edge::release_from() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Edge.from)
  clear_has_from();
  ::COWA::MapData::TopoId* temp = from_;
  from_ = NULL;
  return temp;
}
void Edge::set_allocated_from(::COWA::MapData::TopoId* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Edge.from)
}

// optional .COWA.MapData.TopoId to = 2;
bool Edge::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Edge::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Edge::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Edge::clear_to() {
  if (to_ != NULL) to_->::COWA::MapData::TopoId::Clear();
  clear_has_to();
}
const ::COWA::MapData::TopoId& Edge::to() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Edge.to)
  return to_ != NULL ? *to_
                         : *::COWA::MapData::TopoId::internal_default_instance();
}
::COWA::MapData::TopoId* Edge::mutable_to() {
  set_has_to();
  if (to_ == NULL) {
    to_ = new ::COWA::MapData::TopoId;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Edge.to)
  return to_;
}
::COWA::MapData::TopoId* Edge::release_to() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Edge.to)
  clear_has_to();
  ::COWA::MapData::TopoId* temp = to_;
  to_ = NULL;
  return temp;
}
void Edge::set_allocated_to(::COWA::MapData::TopoId* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Edge.to)
}

// optional double cost = 3;
bool Edge::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Edge::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void Edge::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void Edge::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
double Edge::cost() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Edge.cost)
  return cost_;
}
void Edge::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Edge.cost)
}

// optional .COWA.MapData.Edge.DirectionType type = 4;
bool Edge::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Edge::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Edge::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Edge::clear_type() {
  type_ = 0;
  clear_has_type();
}
::COWA::MapData::Edge_DirectionType Edge::type() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Edge.type)
  return static_cast< ::COWA::MapData::Edge_DirectionType >(type_);
}
void Edge::set_type(::COWA::MapData::Edge_DirectionType value) {
  assert(::COWA::MapData::Edge_DirectionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:COWA.MapData.Edge.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kHdmapFieldNumber;
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:COWA.MapData.Graph)
}
Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      node_(from.node_),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdmap()) {
    hdmap_ = new ::COWA::MapData::Header(*from.hdmap_);
  } else {
    hdmap_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:COWA.MapData.Graph)
}

void Graph::SharedCtor() {
  _cached_size_ = 0;
  hdmap_ = NULL;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:COWA.MapData.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != internal_default_instance()) {
    delete hdmap_;
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Graph& Graph::default_instance() {
  protobuf_hdmap_5ftopo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:COWA.MapData.Graph)
  node_.Clear();
  edge_.Clear();
  if (has_hdmap()) {
    GOOGLE_DCHECK(hdmap_ != NULL);
    hdmap_->::COWA::MapData::Header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COWA.MapData.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .COWA.MapData.Header hdmap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Node node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .COWA.MapData.Edge edge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COWA.MapData.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COWA.MapData.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COWA.MapData.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Header hdmap = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdmap_, output);
  }

  // repeated .COWA.MapData.Node node = 3;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node(i), output);
  }

  // repeated .COWA.MapData.Edge edge = 4;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edge(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COWA.MapData.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COWA.MapData.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COWA.MapData.Header hdmap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdmap_, deterministic, target);
  }

  // repeated .COWA.MapData.Node node = 3;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->node(i), deterministic, target);
  }

  // repeated .COWA.MapData.Edge edge = 4;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->edge(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COWA.MapData.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COWA.MapData.Graph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .COWA.MapData.Node node = 3;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .COWA.MapData.Edge edge = 4;
  {
    unsigned int count = this->edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge(i));
    }
  }

  // optional .COWA.MapData.Header hdmap = 1;
  if (has_hdmap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdmap_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COWA.MapData.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COWA.MapData.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COWA.MapData.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COWA.MapData.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  if (from.has_hdmap()) {
    mutable_hdmap()->::COWA::MapData::Header::MergeFrom(from.hdmap());
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COWA.MapData.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COWA.MapData.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  node_.InternalSwap(&other->node_);
  edge_.InternalSwap(&other->edge_);
  std::swap(hdmap_, other->hdmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_hdmap_5ftopo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hdmap_5ftopo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// optional .COWA.MapData.Header hdmap = 1;
bool Graph::has_hdmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Graph::set_has_hdmap() {
  _has_bits_[0] |= 0x00000001u;
}
void Graph::clear_has_hdmap() {
  _has_bits_[0] &= ~0x00000001u;
}
void Graph::clear_hdmap() {
  if (hdmap_ != NULL) hdmap_->::COWA::MapData::Header::Clear();
  clear_has_hdmap();
}
const ::COWA::MapData::Header& Graph::hdmap() const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Graph.hdmap)
  return hdmap_ != NULL ? *hdmap_
                         : *::COWA::MapData::Header::internal_default_instance();
}
::COWA::MapData::Header* Graph::mutable_hdmap() {
  set_has_hdmap();
  if (hdmap_ == NULL) {
    hdmap_ = new ::COWA::MapData::Header;
  }
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Graph.hdmap)
  return hdmap_;
}
::COWA::MapData::Header* Graph::release_hdmap() {
  // @@protoc_insertion_point(field_release:COWA.MapData.Graph.hdmap)
  clear_has_hdmap();
  ::COWA::MapData::Header* temp = hdmap_;
  hdmap_ = NULL;
  return temp;
}
void Graph::set_allocated_hdmap(::COWA::MapData::Header* hdmap) {
  delete hdmap_;
  hdmap_ = hdmap;
  if (hdmap) {
    set_has_hdmap();
  } else {
    clear_has_hdmap();
  }
  // @@protoc_insertion_point(field_set_allocated:COWA.MapData.Graph.hdmap)
}

// repeated .COWA.MapData.Node node = 3;
int Graph::node_size() const {
  return node_.size();
}
void Graph::clear_node() {
  node_.Clear();
}
const ::COWA::MapData::Node& Graph::node(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Graph.node)
  return node_.Get(index);
}
::COWA::MapData::Node* Graph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Graph.node)
  return node_.Mutable(index);
}
::COWA::MapData::Node* Graph::add_node() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Graph.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Node >*
Graph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Graph.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Node >&
Graph::node() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Graph.node)
  return node_;
}

// repeated .COWA.MapData.Edge edge = 4;
int Graph::edge_size() const {
  return edge_.size();
}
void Graph::clear_edge() {
  edge_.Clear();
}
const ::COWA::MapData::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:COWA.MapData.Graph.edge)
  return edge_.Get(index);
}
::COWA::MapData::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:COWA.MapData.Graph.edge)
  return edge_.Mutable(index);
}
::COWA::MapData::Edge* Graph::add_edge() {
  // @@protoc_insertion_point(field_add:COWA.MapData.Graph.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::COWA::MapData::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:COWA.MapData.Graph.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::COWA::MapData::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:COWA.MapData.Graph.edge)
  return edge_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MapData
}  // namespace COWA

// @@protoc_insertion_point(global_scope)
