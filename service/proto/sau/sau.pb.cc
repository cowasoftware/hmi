// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sau.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sau.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cowa {
namespace sau {
class InstallResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InstallResult> {
} _InstallResult_default_instance_;
class PackageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PackageInfo> {
} _PackageInfo_default_instance_;
class InstallControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InstallControl> {
} _InstallControl_default_instance_;
class InstallVersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InstallVersion> {
} _InstallVersion_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
} _Command_default_instance_;
class BlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Block> {
} _Block_default_instance_;
class FileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileInfo> {
} _FileInfo_default_instance_;
class PushFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PushFile> {
} _PushFile_default_instance_;
class SubFileAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubFileAck> {
} _SubFileAck_default_instance_;
class FallbackResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FallbackResult> {
} _FallbackResult_default_instance_;
class PackageUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PackageUpdate> {
} _PackageUpdate_default_instance_;
class InstallPackagesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InstallPackages> {
} _InstallPackages_default_instance_;
class InstallNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InstallNotify> {
} _InstallNotify_default_instance_;

namespace protobuf_sau_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallResult, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallResult, package_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallResult, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, device_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallControl, control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallControl, package_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallControl, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallVersion, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallVersion, packages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, mainifest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, package_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFile, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFile, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFile, block_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubFileAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubFileAck, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubFileAck, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallbackResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallbackResult, pkginfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallbackResult, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallbackResult, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, new_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, old_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallPackages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallPackages, version_cur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallPackages, version_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallPackages, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallPackages, pkgs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallNotify, update_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(InstallResult)},
  { 8, -1, sizeof(PackageInfo)},
  { 16, -1, sizeof(InstallControl)},
  { 24, -1, sizeof(InstallVersion)},
  { 31, -1, sizeof(Command)},
  { 40, -1, sizeof(Block)},
  { 48, -1, sizeof(FileInfo)},
  { 59, -1, sizeof(PushFile)},
  { 67, -1, sizeof(SubFileAck)},
  { 74, -1, sizeof(FallbackResult)},
  { 82, -1, sizeof(PackageUpdate)},
  { 90, -1, sizeof(InstallPackages)},
  { 99, -1, sizeof(InstallNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstallResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstallControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstallVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PushFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubFileAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FallbackResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackageUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstallPackages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstallNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sau.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _InstallResult_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PackageInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _InstallControl_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _InstallVersion_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Block_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FileInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _PushFile_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SubFileAck_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _FallbackResult_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PackageUpdate_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _InstallPackages_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _InstallNotify_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _InstallResult_default_instance_.DefaultConstruct();
  _PackageInfo_default_instance_.DefaultConstruct();
  _InstallControl_default_instance_.DefaultConstruct();
  _InstallVersion_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _Block_default_instance_.DefaultConstruct();
  _FileInfo_default_instance_.DefaultConstruct();
  _PushFile_default_instance_.DefaultConstruct();
  _SubFileAck_default_instance_.DefaultConstruct();
  _FallbackResult_default_instance_.DefaultConstruct();
  _PackageUpdate_default_instance_.DefaultConstruct();
  _InstallPackages_default_instance_.DefaultConstruct();
  _InstallNotify_default_instance_.DefaultConstruct();
  _PushFile_default_instance_.get_mutable()->file_ = const_cast< ::cowa::sau::FileInfo*>(
      ::cowa::sau::FileInfo::internal_default_instance());
  _PushFile_default_instance_.get_mutable()->block_ = const_cast< ::cowa::sau::Block*>(
      ::cowa::sau::Block::internal_default_instance());
  _FallbackResult_default_instance_.get_mutable()->pkginfo_ = const_cast< ::cowa::sau::PackageInfo*>(
      ::cowa::sau::PackageInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tsau.proto\022\010cowa.sau\"V\n\rInstallResult\022$"
      "\n\004code\030\001 \001(\0162\026.cowa.sau.InstallState\022\017\n\007"
      "package\030\002 \001(\t\022\016\n\006reason\030\003 \001(\t\"<\n\013Package"
      "Info\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\016\n\006d"
      "evice\030\003 \001(\t\"`\n\016InstallControl\022,\n\007control"
      "\030\001 \001(\0162\033.cowa.sau.InstallControlCmd\022\017\n\007p"
      "ackage\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\"I\n\016Install"
      "Version\022\016\n\006device\030\001 \001(\t\022\'\n\010packages\030\002 \003("
      "\0132\025.cowa.sau.PackageInfo\"T\n\007Command\022\033\n\002i"
      "d\030\001 \001(\0162\017.cowa.sau.CmdId\022\016\n\006device\030\002 \001(\t"
      "\022\016\n\006module\030\003 \001(\t\022\014\n\004data\030\004 \001(\t\"5\n\005Block\022"
      "\017\n\007counter\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\014\n\004data\030"
      "\003 \001(\014\"h\n\010FileInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007versi"
      "on\030\002 \001(\t\022\013\n\003md5\030\003 \001(\t\022\014\n\004size\030\004 \001(\r\022\021\n\tm"
      "ainifest\030\005 \001(\010\022\017\n\007package\030\006 \001(\t\"\\\n\010PushF"
      "ile\022\016\n\006target\030\001 \001(\t\022 \n\004file\030\002 \001(\0132\022.cowa"
      ".sau.FileInfo\022\036\n\005block\030\003 \001(\0132\017.cowa.sau."
      "Block\"+\n\nSubFileAck\022\014\n\004name\030\001 \001(\t\022\017\n\007suc"
      "cess\030\002 \001(\010\"p\n\016FallbackResult\022&\n\007pkginfo\030"
      "\001 \001(\0132\025.cowa.sau.PackageInfo\022&\n\005state\030\002 "
      "\001(\0162\027.cowa.sau.FallbackState\022\016\n\006reason\030\003"
      " \001(\t\"G\n\rPackageUpdate\022\014\n\004name\030\001 \001(\t\022\023\n\013n"
      "ew_version\030\002 \001(\t\022\023\n\013old_version\030\003 \001(\t\"\211\001"
      "\n\017InstallPackages\022\023\n\013version_cur\030\001 \001(\t\022\023"
      "\n\013version_new\030\002 \001(\t\022%\n\005state\030\003 \001(\0162\026.cow"
      "a.sau.InstallState\022%\n\004pkgs\030\004 \003(\0132\027.cowa."
      "sau.PackageUpdate\"\037\n\rInstallNotify\022\016\n\006up"
      "date\030\001 \001(\010*\226\003\n\005CmdId\022\022\n\016CMD_ID_INVALID\020\000"
      "\022\032\n\026CMD_ID_NOTIFY_IDENTITY\020\001\022$\n CMD_ID_N"
      "OTIFY_INSTALLED_VERSIONS\020\002\022\027\n\023CMD_ID_REQ"
      "_IDENTITY\020\003\022\026\n\022CMD_ID_REQ_VERSION\020\004\022\032\n\026C"
      "MD_ID_PUB_PACKAGE_ACK\020\005\022\032\n\026CMD_ID_INSTAL"
      "L_CONTROL\020\006\022\031\n\025CMD_ID_INSTALL_STATUS\020\007\022\033"
      "\n\027CMD_ID_FALLBACK_CONTROL\020\020\022\032\n\026CMD_ID_FA"
      "LLBACK_STATUS\020\021\022\027\n\023CMD_ID_PROCESS_EXIT\020 "
      "\022#\n\037CMD_ID_NOTIFY_DOWNLOAD_VERSIONS\0200\022 \n"
      "\034CMD_ID_REQ_DOWNLOAD_VERSIONS\0201\022\032\n\026CMD_I"
      "D_CONFIRM_INSTALL\0202*\223\001\n\014InstallState\022\030\n\024"
      "INSTALL_STATE_UNKNOW\020\000\022\030\n\024INSTALL_STATE_"
      "NORMAL\020\001\022\034\n\030INSTALL_STATE_PROCESSING\020\002\022\030"
      "\n\024INSTALL_STATE_FINISH\020\003\022\027\n\023INSTALL_STAT"
      "E_ERROR\020\004*8\n\021InstallControlCmd\022\021\n\rINSTAL"
      "L_START\020\000\022\020\n\014INSTALL_STOP\020\001*{\n\rFallbackS"
      "tate\022\032\n\026FALLBACK_STATE_UNKNOWN\020\000\022\035\n\031FALL"
      "BACK_STATE_PROCESSING\020\001\022\025\n\021FALLBACK_STAT"
      "E_OK\020\002\022\030\n\024FALLBACK_STATE_ERROR\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1840);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sau.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sau_2eproto

const ::google::protobuf::EnumDescriptor* CmdId_descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_enum_descriptors[0];
}
bool CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 16:
    case 17:
    case 32:
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InstallState_descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_enum_descriptors[1];
}
bool InstallState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InstallControlCmd_descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_enum_descriptors[2];
}
bool InstallControlCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FallbackState_descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_enum_descriptors[3];
}
bool FallbackState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallResult::kCodeFieldNumber;
const int InstallResult::kPackageFieldNumber;
const int InstallResult::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallResult::InstallResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.InstallResult)
}
InstallResult::InstallResult(const InstallResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.package().size() > 0) {
    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.InstallResult)
}

void InstallResult::SharedCtor() {
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

InstallResult::~InstallResult() {
  // @@protoc_insertion_point(destructor:cowa.sau.InstallResult)
  SharedDtor();
}

void InstallResult::SharedDtor() {
  package_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallResult::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallResult& InstallResult::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstallResult* InstallResult::New(::google::protobuf::Arena* arena) const {
  InstallResult* n = new InstallResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.InstallResult)
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

bool InstallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.InstallResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cowa.sau.InstallState code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::cowa::sau::InstallState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallResult.package"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallResult.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.InstallResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.InstallResult)
  return false;
#undef DO_
}

void InstallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.InstallResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.InstallState code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string package = 2;
  if (this->package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallResult.package");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package(), output);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallResult.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.InstallResult)
}

::google::protobuf::uint8* InstallResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.InstallResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.InstallState code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string package = 2;
  if (this->package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallResult.package");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->package(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallResult.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.InstallResult)
  return target;
}

size_t InstallResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.InstallResult)
  size_t total_size = 0;

  // string package = 2;
  if (this->package().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package());
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // .cowa.sau.InstallState code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.InstallResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.InstallResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.InstallResult)
    MergeFrom(*source);
  }
}

void InstallResult::MergeFrom(const InstallResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.InstallResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.package().size() > 0) {

    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void InstallResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.InstallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallResult::CopyFrom(const InstallResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.InstallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallResult::IsInitialized() const {
  return true;
}

void InstallResult::Swap(InstallResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallResult::InternalSwap(InstallResult* other) {
  package_.Swap(&other->package_);
  reason_.Swap(&other->reason_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallResult::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallResult

// .cowa.sau.InstallState code = 1;
void InstallResult::clear_code() {
  code_ = 0;
}
::cowa::sau::InstallState InstallResult::code() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallResult.code)
  return static_cast< ::cowa::sau::InstallState >(code_);
}
void InstallResult::set_code(::cowa::sau::InstallState value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.InstallResult.code)
}

// string package = 2;
void InstallResult::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallResult::package() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallResult.package)
  return package_.GetNoArena();
}
void InstallResult::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallResult.package)
}
#if LANG_CXX11
void InstallResult::set_package(::std::string&& value) {
  
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallResult.package)
}
#endif
void InstallResult::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallResult.package)
}
void InstallResult::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallResult.package)
}
::std::string* InstallResult::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallResult.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallResult::release_package() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallResult.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallResult::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallResult.package)
}

// string reason = 3;
void InstallResult::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallResult::reason() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallResult.reason)
  return reason_.GetNoArena();
}
void InstallResult::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallResult.reason)
}
#if LANG_CXX11
void InstallResult::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallResult.reason)
}
#endif
void InstallResult::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallResult.reason)
}
void InstallResult::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallResult.reason)
}
::std::string* InstallResult::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallResult.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallResult::release_reason() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallResult.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallResult::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallResult.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackageInfo::kNameFieldNumber;
const int PackageInfo::kVersionFieldNumber;
const int PackageInfo::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackageInfo::PackageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.PackageInfo)
}
PackageInfo::PackageInfo(const PackageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  // @@protoc_insertion_point(copy_constructor:cowa.sau.PackageInfo)
}

void PackageInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PackageInfo::~PackageInfo() {
  // @@protoc_insertion_point(destructor:cowa.sau.PackageInfo)
  SharedDtor();
}

void PackageInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageInfo::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackageInfo& PackageInfo::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackageInfo* PackageInfo::New(::google::protobuf::Arena* arena) const {
  PackageInfo* n = new PackageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.PackageInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.PackageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PackageInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PackageInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PackageInfo.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.PackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.PackageInfo)
  return false;
#undef DO_
}

void PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string device = 3;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageInfo.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.PackageInfo)
}

::google::protobuf::uint8* PackageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.PackageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // string device = 3;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageInfo.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.PackageInfo)
  return target;
}

size_t PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.PackageInfo)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string device = 3;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PackageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.PackageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.PackageInfo)
    MergeFrom(*source);
  }
}

void PackageInfo::MergeFrom(const PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
}

void PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageInfo::CopyFrom(const PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageInfo::IsInitialized() const {
  return true;
}

void PackageInfo::Swap(PackageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackageInfo::InternalSwap(PackageInfo* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  device_.Swap(&other->device_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackageInfo::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackageInfo

// string name = 1;
void PackageInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackageInfo::name() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PackageInfo.name)
  return name_.GetNoArena();
}
void PackageInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PackageInfo.name)
}
#if LANG_CXX11
void PackageInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PackageInfo.name)
}
#endif
void PackageInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PackageInfo.name)
}
void PackageInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PackageInfo.name)
}
::std::string* PackageInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PackageInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackageInfo::release_name() {
  // @@protoc_insertion_point(field_release:cowa.sau.PackageInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackageInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PackageInfo.name)
}

// string version = 2;
void PackageInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackageInfo::version() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PackageInfo.version)
  return version_.GetNoArena();
}
void PackageInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PackageInfo.version)
}
#if LANG_CXX11
void PackageInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PackageInfo.version)
}
#endif
void PackageInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PackageInfo.version)
}
void PackageInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PackageInfo.version)
}
::std::string* PackageInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PackageInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackageInfo::release_version() {
  // @@protoc_insertion_point(field_release:cowa.sau.PackageInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackageInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PackageInfo.version)
}

// string device = 3;
void PackageInfo::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackageInfo::device() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PackageInfo.device)
  return device_.GetNoArena();
}
void PackageInfo::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PackageInfo.device)
}
#if LANG_CXX11
void PackageInfo::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PackageInfo.device)
}
#endif
void PackageInfo::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PackageInfo.device)
}
void PackageInfo::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PackageInfo.device)
}
::std::string* PackageInfo::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PackageInfo.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackageInfo::release_device() {
  // @@protoc_insertion_point(field_release:cowa.sau.PackageInfo.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackageInfo::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PackageInfo.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallControl::kControlFieldNumber;
const int InstallControl::kPackageFieldNumber;
const int InstallControl::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallControl::InstallControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.InstallControl)
}
InstallControl::InstallControl(const InstallControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.package().size() > 0) {
    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  control_ = from.control_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.InstallControl)
}

void InstallControl::SharedCtor() {
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  control_ = 0;
  _cached_size_ = 0;
}

InstallControl::~InstallControl() {
  // @@protoc_insertion_point(destructor:cowa.sau.InstallControl)
  SharedDtor();
}

void InstallControl::SharedDtor() {
  package_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstallControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallControl::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallControl& InstallControl::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstallControl* InstallControl::New(::google::protobuf::Arena* arena) const {
  InstallControl* n = new InstallControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallControl::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.InstallControl)
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  control_ = 0;
}

bool InstallControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.InstallControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cowa.sau.InstallControlCmd control = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control(static_cast< ::cowa::sau::InstallControlCmd >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallControl.package"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallControl.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.InstallControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.InstallControl)
  return false;
#undef DO_
}

void InstallControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.InstallControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.InstallControlCmd control = 1;
  if (this->control() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->control(), output);
  }

  // string package = 2;
  if (this->package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallControl.package");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallControl.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.InstallControl)
}

::google::protobuf::uint8* InstallControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.InstallControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.InstallControlCmd control = 1;
  if (this->control() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->control(), target);
  }

  // string package = 2;
  if (this->package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallControl.package");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->package(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallControl.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.InstallControl)
  return target;
}

size_t InstallControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.InstallControl)
  size_t total_size = 0;

  // string package = 2;
  if (this->package().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .cowa.sau.InstallControlCmd control = 1;
  if (this->control() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.InstallControl)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.InstallControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.InstallControl)
    MergeFrom(*source);
  }
}

void InstallControl::MergeFrom(const InstallControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.InstallControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.package().size() > 0) {

    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.control() != 0) {
    set_control(from.control());
  }
}

void InstallControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.InstallControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallControl::CopyFrom(const InstallControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.InstallControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallControl::IsInitialized() const {
  return true;
}

void InstallControl::Swap(InstallControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallControl::InternalSwap(InstallControl* other) {
  package_.Swap(&other->package_);
  version_.Swap(&other->version_);
  std::swap(control_, other->control_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallControl::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallControl

// .cowa.sau.InstallControlCmd control = 1;
void InstallControl::clear_control() {
  control_ = 0;
}
::cowa::sau::InstallControlCmd InstallControl::control() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallControl.control)
  return static_cast< ::cowa::sau::InstallControlCmd >(control_);
}
void InstallControl::set_control(::cowa::sau::InstallControlCmd value) {
  
  control_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.InstallControl.control)
}

// string package = 2;
void InstallControl::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallControl::package() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallControl.package)
  return package_.GetNoArena();
}
void InstallControl::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallControl.package)
}
#if LANG_CXX11
void InstallControl::set_package(::std::string&& value) {
  
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallControl.package)
}
#endif
void InstallControl::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallControl.package)
}
void InstallControl::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallControl.package)
}
::std::string* InstallControl::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallControl.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallControl::release_package() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallControl.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallControl::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallControl.package)
}

// string version = 3;
void InstallControl::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallControl::version() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallControl.version)
  return version_.GetNoArena();
}
void InstallControl::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallControl.version)
}
#if LANG_CXX11
void InstallControl::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallControl.version)
}
#endif
void InstallControl::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallControl.version)
}
void InstallControl::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallControl.version)
}
::std::string* InstallControl::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallControl.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallControl::release_version() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallControl.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallControl::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallControl.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallVersion::kDeviceFieldNumber;
const int InstallVersion::kPackagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallVersion::InstallVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.InstallVersion)
}
InstallVersion::InstallVersion(const InstallVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      packages_(from.packages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  // @@protoc_insertion_point(copy_constructor:cowa.sau.InstallVersion)
}

void InstallVersion::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InstallVersion::~InstallVersion() {
  // @@protoc_insertion_point(destructor:cowa.sau.InstallVersion)
  SharedDtor();
}

void InstallVersion::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstallVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallVersion::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallVersion& InstallVersion::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstallVersion* InstallVersion::New(::google::protobuf::Arena* arena) const {
  InstallVersion* n = new InstallVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.InstallVersion)
  packages_.Clear();
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InstallVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.InstallVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallVersion.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cowa.sau.PackageInfo packages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.InstallVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.InstallVersion)
  return false;
#undef DO_
}

void InstallVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.InstallVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallVersion.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // repeated .cowa.sau.PackageInfo packages = 2;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.InstallVersion)
}

::google::protobuf::uint8* InstallVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.InstallVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallVersion.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // repeated .cowa.sau.PackageInfo packages = 2;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->packages(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.InstallVersion)
  return target;
}

size_t InstallVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.InstallVersion)
  size_t total_size = 0;

  // repeated .cowa.sau.PackageInfo packages = 2;
  {
    unsigned int count = this->packages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packages(i));
    }
  }

  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.InstallVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.InstallVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.InstallVersion)
    MergeFrom(*source);
  }
}

void InstallVersion::MergeFrom(const InstallVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.InstallVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
}

void InstallVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.InstallVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallVersion::CopyFrom(const InstallVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.InstallVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallVersion::IsInitialized() const {
  return true;
}

void InstallVersion::Swap(InstallVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallVersion::InternalSwap(InstallVersion* other) {
  packages_.InternalSwap(&other->packages_);
  device_.Swap(&other->device_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallVersion::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallVersion

// string device = 1;
void InstallVersion::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallVersion::device() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallVersion.device)
  return device_.GetNoArena();
}
void InstallVersion::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallVersion.device)
}
#if LANG_CXX11
void InstallVersion::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallVersion.device)
}
#endif
void InstallVersion::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallVersion.device)
}
void InstallVersion::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallVersion.device)
}
::std::string* InstallVersion::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallVersion.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallVersion::release_device() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallVersion.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallVersion::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallVersion.device)
}

// repeated .cowa.sau.PackageInfo packages = 2;
int InstallVersion::packages_size() const {
  return packages_.size();
}
void InstallVersion::clear_packages() {
  packages_.Clear();
}
const ::cowa::sau::PackageInfo& InstallVersion::packages(int index) const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallVersion.packages)
  return packages_.Get(index);
}
::cowa::sau::PackageInfo* InstallVersion::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallVersion.packages)
  return packages_.Mutable(index);
}
::cowa::sau::PackageInfo* InstallVersion::add_packages() {
  // @@protoc_insertion_point(field_add:cowa.sau.InstallVersion.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::cowa::sau::PackageInfo >*
InstallVersion::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:cowa.sau.InstallVersion.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::cowa::sau::PackageInfo >&
InstallVersion::packages() const {
  // @@protoc_insertion_point(field_list:cowa.sau.InstallVersion.packages)
  return packages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kIdFieldNumber;
const int Command::kDeviceFieldNumber;
const int Command::kModuleFieldNumber;
const int Command::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module().size() > 0) {
    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.Command)
}

void Command::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:cowa.sau.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.Command)
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cowa.sau.CmdId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::cowa::sau::CmdId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.Command.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.Command.module"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.Command.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.CmdId id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.Command.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device(), output);
  }

  // string module = 3;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.Command.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->module(), output);
  }

  // string data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.Command.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.CmdId id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.Command.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // string module = 3;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.Command.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->module(), target);
  }

  // string data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.Command.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.Command)
  size_t total_size = 0;

  // string device = 2;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // string module = 3;
  if (this->module().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module());
  }

  // string data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .cowa.sau.CmdId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.module().size() > 0) {

    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  device_.Swap(&other->device_);
  module_.Swap(&other->module_);
  data_.Swap(&other->data_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// .cowa.sau.CmdId id = 1;
void Command::clear_id() {
  id_ = 0;
}
::cowa::sau::CmdId Command::id() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Command.id)
  return static_cast< ::cowa::sau::CmdId >(id_);
}
void Command::set_id(::cowa::sau::CmdId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.Command.id)
}

// string device = 2;
void Command::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Command::device() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Command.device)
  return device_.GetNoArena();
}
void Command::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.Command.device)
}
#if LANG_CXX11
void Command::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.Command.device)
}
#endif
void Command::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.Command.device)
}
void Command::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.Command.device)
}
::std::string* Command::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.Command.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_device() {
  // @@protoc_insertion_point(field_release:cowa.sau.Command.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.Command.device)
}

// string module = 3;
void Command::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Command::module() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Command.module)
  return module_.GetNoArena();
}
void Command::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.Command.module)
}
#if LANG_CXX11
void Command::set_module(::std::string&& value) {
  
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.Command.module)
}
#endif
void Command::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.Command.module)
}
void Command::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.Command.module)
}
::std::string* Command::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.Command.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_module() {
  // @@protoc_insertion_point(field_release:cowa.sau.Command.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.Command.module)
}

// string data = 4;
void Command::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Command::data() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Command.data)
  return data_.GetNoArena();
}
void Command::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.Command.data)
}
#if LANG_CXX11
void Command::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.Command.data)
}
#endif
void Command::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.Command.data)
}
void Command::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.Command.data)
}
::std::string* Command::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.Command.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_data() {
  // @@protoc_insertion_point(field_release:cowa.sau.Command.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.Command.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kCounterFieldNumber;
const int Block::kIndexFieldNumber;
const int Block::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&counter_, &from.counter_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&counter_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:cowa.sau.Block)
}

void Block::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&counter_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&counter_) + sizeof(index_));
  _cached_size_ = 0;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:cowa.sau.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.Block)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&counter_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&counter_) + sizeof(index_));
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 counter = 1;
  if (this->counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->counter(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 counter = 1;
  if (this->counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->counter(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.Block)
  size_t total_size = 0;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 counter = 1;
  if (this->counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->counter());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.counter() != 0) {
    set_counter(from.counter());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  data_.Swap(&other->data_);
  std::swap(counter_, other->counter_);
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// uint32 counter = 1;
void Block::clear_counter() {
  counter_ = 0u;
}
::google::protobuf::uint32 Block::counter() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Block.counter)
  return counter_;
}
void Block::set_counter(::google::protobuf::uint32 value) {
  
  counter_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.Block.counter)
}

// uint32 index = 2;
void Block::clear_index() {
  index_ = 0u;
}
::google::protobuf::uint32 Block::index() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Block.index)
  return index_;
}
void Block::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.Block.index)
}

// bytes data = 3;
void Block::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Block::data() const {
  // @@protoc_insertion_point(field_get:cowa.sau.Block.data)
  return data_.GetNoArena();
}
void Block::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.Block.data)
}
#if LANG_CXX11
void Block::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.Block.data)
}
#endif
void Block::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.Block.data)
}
void Block::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.Block.data)
}
::std::string* Block::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.Block.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Block::release_data() {
  // @@protoc_insertion_point(field_release:cowa.sau.Block.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Block::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.Block.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kNameFieldNumber;
const int FileInfo::kVersionFieldNumber;
const int FileInfo::kMd5FieldNumber;
const int FileInfo::kSizeFieldNumber;
const int FileInfo::kMainifestFieldNumber;
const int FileInfo::kPackageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5().size() > 0) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.package().size() > 0) {
    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&mainifest_) -
    reinterpret_cast<char*>(&size_) + sizeof(mainifest_));
  // @@protoc_insertion_point(copy_constructor:cowa.sau.FileInfo)
}

void FileInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&mainifest_) -
    reinterpret_cast<char*>(&size_) + sizeof(mainifest_));
  _cached_size_ = 0;
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:cowa.sau.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileInfo& FileInfo::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileInfo* FileInfo::New(::google::protobuf::Arena* arena) const {
  FileInfo* n = new FileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.FileInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&mainifest_) -
    reinterpret_cast<char*>(&size_) + sizeof(mainifest_));
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.FileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.FileInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.FileInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.FileInfo.md5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mainifest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mainifest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.FileInfo.package"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.FileInfo)
  return false;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5(), output);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // bool mainifest = 5;
  if (this->mainifest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->mainifest(), output);
  }

  // string package = 6;
  if (this->package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.package");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->package(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5(), target);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // bool mainifest = 5;
  if (this->mainifest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->mainifest(), target);
  }

  // string package = 6;
  if (this->package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FileInfo.package");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->package(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.FileInfo)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  // string package = 6;
  if (this->package().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // bool mainifest = 5;
  if (this->mainifest() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.package().size() > 0) {

    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.mainifest() != 0) {
    set_mainifest(from.mainifest());
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  md5_.Swap(&other->md5_);
  package_.Swap(&other->package_);
  std::swap(size_, other->size_);
  std::swap(mainifest_, other->mainifest_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileInfo

// string name = 1;
void FileInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FileInfo.name)
  return name_.GetNoArena();
}
void FileInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.FileInfo.name)
}
#if LANG_CXX11
void FileInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.FileInfo.name)
}
#endif
void FileInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.FileInfo.name)
}
void FileInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.FileInfo.name)
}
::std::string* FileInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.FileInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:cowa.sau.FileInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.FileInfo.name)
}

// string version = 2;
void FileInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileInfo::version() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FileInfo.version)
  return version_.GetNoArena();
}
void FileInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.FileInfo.version)
}
#if LANG_CXX11
void FileInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.FileInfo.version)
}
#endif
void FileInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.FileInfo.version)
}
void FileInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.FileInfo.version)
}
::std::string* FileInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.FileInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileInfo::release_version() {
  // @@protoc_insertion_point(field_release:cowa.sau.FileInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.FileInfo.version)
}

// string md5 = 3;
void FileInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileInfo::md5() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FileInfo.md5)
  return md5_.GetNoArena();
}
void FileInfo::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.FileInfo.md5)
}
#if LANG_CXX11
void FileInfo::set_md5(::std::string&& value) {
  
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.FileInfo.md5)
}
#endif
void FileInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.FileInfo.md5)
}
void FileInfo::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.FileInfo.md5)
}
::std::string* FileInfo::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.FileInfo.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileInfo::release_md5() {
  // @@protoc_insertion_point(field_release:cowa.sau.FileInfo.md5)
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileInfo::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.FileInfo.md5)
}

// uint32 size = 4;
void FileInfo::clear_size() {
  size_ = 0u;
}
::google::protobuf::uint32 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FileInfo.size)
  return size_;
}
void FileInfo::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.FileInfo.size)
}

// bool mainifest = 5;
void FileInfo::clear_mainifest() {
  mainifest_ = false;
}
bool FileInfo::mainifest() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FileInfo.mainifest)
  return mainifest_;
}
void FileInfo::set_mainifest(bool value) {
  
  mainifest_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.FileInfo.mainifest)
}

// string package = 6;
void FileInfo::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileInfo::package() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FileInfo.package)
  return package_.GetNoArena();
}
void FileInfo::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.FileInfo.package)
}
#if LANG_CXX11
void FileInfo::set_package(::std::string&& value) {
  
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.FileInfo.package)
}
#endif
void FileInfo::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.FileInfo.package)
}
void FileInfo::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.FileInfo.package)
}
::std::string* FileInfo::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.FileInfo.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileInfo::release_package() {
  // @@protoc_insertion_point(field_release:cowa.sau.FileInfo.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileInfo::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.FileInfo.package)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushFile::kTargetFieldNumber;
const int PushFile::kFileFieldNumber;
const int PushFile::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushFile::PushFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.PushFile)
}
PushFile::PushFile(const PushFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target().size() > 0) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.has_file()) {
    file_ = new ::cowa::sau::FileInfo(*from.file_);
  } else {
    file_ = NULL;
  }
  if (from.has_block()) {
    block_ = new ::cowa::sau::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cowa.sau.PushFile)
}

void PushFile::SharedCtor() {
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_, 0, reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&file_) + sizeof(block_));
  _cached_size_ = 0;
}

PushFile::~PushFile() {
  // @@protoc_insertion_point(destructor:cowa.sau.PushFile)
  SharedDtor();
}

void PushFile::SharedDtor() {
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete file_;
  }
  if (this != internal_default_instance()) {
    delete block_;
  }
}

void PushFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushFile::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PushFile& PushFile::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

PushFile* PushFile::New(::google::protobuf::Arena* arena) const {
  PushFile* n = new PushFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.PushFile)
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_ != NULL) {
    delete file_;
  }
  file_ = NULL;
  if (GetArenaNoVirtual() == NULL && block_ != NULL) {
    delete block_;
  }
  block_ = NULL;
}

bool PushFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.PushFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PushFile.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cowa.sau.FileInfo file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cowa.sau.Block block = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.PushFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.PushFile)
  return false;
#undef DO_
}

void PushFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.PushFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PushFile.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target(), output);
  }

  // .cowa.sau.FileInfo file = 2;
  if (this->has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->file_, output);
  }

  // .cowa.sau.Block block = 3;
  if (this->has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->block_, output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.PushFile)
}

::google::protobuf::uint8* PushFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.PushFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PushFile.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  // .cowa.sau.FileInfo file = 2;
  if (this->has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->file_, deterministic, target);
  }

  // .cowa.sau.Block block = 3;
  if (this->has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->block_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.PushFile)
  return target;
}

size_t PushFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.PushFile)
  size_t total_size = 0;

  // string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  // .cowa.sau.FileInfo file = 2;
  if (this->has_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_);
  }

  // .cowa.sau.Block block = 3;
  if (this->has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.PushFile)
  GOOGLE_DCHECK_NE(&from, this);
  const PushFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.PushFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.PushFile)
    MergeFrom(*source);
  }
}

void PushFile::MergeFrom(const PushFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.PushFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.has_file()) {
    mutable_file()->::cowa::sau::FileInfo::MergeFrom(from.file());
  }
  if (from.has_block()) {
    mutable_block()->::cowa::sau::Block::MergeFrom(from.block());
  }
}

void PushFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.PushFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushFile::CopyFrom(const PushFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.PushFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFile::IsInitialized() const {
  return true;
}

void PushFile::Swap(PushFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushFile::InternalSwap(PushFile* other) {
  target_.Swap(&other->target_);
  std::swap(file_, other->file_);
  std::swap(block_, other->block_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushFile::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushFile

// string target = 1;
void PushFile::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushFile::target() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PushFile.target)
  return target_.GetNoArena();
}
void PushFile::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PushFile.target)
}
#if LANG_CXX11
void PushFile::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PushFile.target)
}
#endif
void PushFile::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PushFile.target)
}
void PushFile::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PushFile.target)
}
::std::string* PushFile::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PushFile.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushFile::release_target() {
  // @@protoc_insertion_point(field_release:cowa.sau.PushFile.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushFile::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PushFile.target)
}

// .cowa.sau.FileInfo file = 2;
bool PushFile::has_file() const {
  return this != internal_default_instance() && file_ != NULL;
}
void PushFile::clear_file() {
  if (GetArenaNoVirtual() == NULL && file_ != NULL) delete file_;
  file_ = NULL;
}
const ::cowa::sau::FileInfo& PushFile::file() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PushFile.file)
  return file_ != NULL ? *file_
                         : *::cowa::sau::FileInfo::internal_default_instance();
}
::cowa::sau::FileInfo* PushFile::mutable_file() {
  
  if (file_ == NULL) {
    file_ = new ::cowa::sau::FileInfo;
  }
  // @@protoc_insertion_point(field_mutable:cowa.sau.PushFile.file)
  return file_;
}
::cowa::sau::FileInfo* PushFile::release_file() {
  // @@protoc_insertion_point(field_release:cowa.sau.PushFile.file)
  
  ::cowa::sau::FileInfo* temp = file_;
  file_ = NULL;
  return temp;
}
void PushFile::set_allocated_file(::cowa::sau::FileInfo* file) {
  delete file_;
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PushFile.file)
}

// .cowa.sau.Block block = 3;
bool PushFile::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
void PushFile::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
}
const ::cowa::sau::Block& PushFile::block() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PushFile.block)
  return block_ != NULL ? *block_
                         : *::cowa::sau::Block::internal_default_instance();
}
::cowa::sau::Block* PushFile::mutable_block() {
  
  if (block_ == NULL) {
    block_ = new ::cowa::sau::Block;
  }
  // @@protoc_insertion_point(field_mutable:cowa.sau.PushFile.block)
  return block_;
}
::cowa::sau::Block* PushFile::release_block() {
  // @@protoc_insertion_point(field_release:cowa.sau.PushFile.block)
  
  ::cowa::sau::Block* temp = block_;
  block_ = NULL;
  return temp;
}
void PushFile::set_allocated_block(::cowa::sau::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PushFile.block)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubFileAck::kNameFieldNumber;
const int SubFileAck::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubFileAck::SubFileAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.SubFileAck)
}
SubFileAck::SubFileAck(const SubFileAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.SubFileAck)
}

void SubFileAck::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _cached_size_ = 0;
}

SubFileAck::~SubFileAck() {
  // @@protoc_insertion_point(destructor:cowa.sau.SubFileAck)
  SharedDtor();
}

void SubFileAck::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubFileAck::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubFileAck& SubFileAck::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubFileAck* SubFileAck::New(::google::protobuf::Arena* arena) const {
  SubFileAck* n = new SubFileAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubFileAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.SubFileAck)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

bool SubFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.SubFileAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.SubFileAck.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.SubFileAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.SubFileAck)
  return false;
#undef DO_
}

void SubFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.SubFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.SubFileAck.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.SubFileAck)
}

::google::protobuf::uint8* SubFileAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.SubFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.SubFileAck.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.SubFileAck)
  return target;
}

size_t SubFileAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.SubFileAck)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubFileAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.SubFileAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SubFileAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubFileAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.SubFileAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.SubFileAck)
    MergeFrom(*source);
  }
}

void SubFileAck::MergeFrom(const SubFileAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.SubFileAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SubFileAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.SubFileAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubFileAck::CopyFrom(const SubFileAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.SubFileAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubFileAck::IsInitialized() const {
  return true;
}

void SubFileAck::Swap(SubFileAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubFileAck::InternalSwap(SubFileAck* other) {
  name_.Swap(&other->name_);
  std::swap(success_, other->success_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubFileAck::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubFileAck

// string name = 1;
void SubFileAck::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubFileAck::name() const {
  // @@protoc_insertion_point(field_get:cowa.sau.SubFileAck.name)
  return name_.GetNoArena();
}
void SubFileAck::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.SubFileAck.name)
}
#if LANG_CXX11
void SubFileAck::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.SubFileAck.name)
}
#endif
void SubFileAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.SubFileAck.name)
}
void SubFileAck::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.SubFileAck.name)
}
::std::string* SubFileAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.SubFileAck.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubFileAck::release_name() {
  // @@protoc_insertion_point(field_release:cowa.sau.SubFileAck.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubFileAck::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.SubFileAck.name)
}

// bool success = 2;
void SubFileAck::clear_success() {
  success_ = false;
}
bool SubFileAck::success() const {
  // @@protoc_insertion_point(field_get:cowa.sau.SubFileAck.success)
  return success_;
}
void SubFileAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.SubFileAck.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FallbackResult::kPkginfoFieldNumber;
const int FallbackResult::kStateFieldNumber;
const int FallbackResult::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FallbackResult::FallbackResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.FallbackResult)
}
FallbackResult::FallbackResult(const FallbackResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_pkginfo()) {
    pkginfo_ = new ::cowa::sau::PackageInfo(*from.pkginfo_);
  } else {
    pkginfo_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.FallbackResult)
}

void FallbackResult::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pkginfo_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&pkginfo_) + sizeof(state_));
  _cached_size_ = 0;
}

FallbackResult::~FallbackResult() {
  // @@protoc_insertion_point(destructor:cowa.sau.FallbackResult)
  SharedDtor();
}

void FallbackResult::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pkginfo_;
  }
}

void FallbackResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FallbackResult::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FallbackResult& FallbackResult::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

FallbackResult* FallbackResult::New(::google::protobuf::Arena* arena) const {
  FallbackResult* n = new FallbackResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FallbackResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.FallbackResult)
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pkginfo_ != NULL) {
    delete pkginfo_;
  }
  pkginfo_ = NULL;
  state_ = 0;
}

bool FallbackResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.FallbackResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cowa.sau.PackageInfo pkginfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pkginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cowa.sau.FallbackState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::cowa::sau::FallbackState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.FallbackResult.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.FallbackResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.FallbackResult)
  return false;
#undef DO_
}

void FallbackResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.FallbackResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.PackageInfo pkginfo = 1;
  if (this->has_pkginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pkginfo_, output);
  }

  // .cowa.sau.FallbackState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FallbackResult.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.FallbackResult)
}

::google::protobuf::uint8* FallbackResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.FallbackResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cowa.sau.PackageInfo pkginfo = 1;
  if (this->has_pkginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pkginfo_, deterministic, target);
  }

  // .cowa.sau.FallbackState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.FallbackResult.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.FallbackResult)
  return target;
}

size_t FallbackResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.FallbackResult)
  size_t total_size = 0;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // .cowa.sau.PackageInfo pkginfo = 1;
  if (this->has_pkginfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pkginfo_);
  }

  // .cowa.sau.FallbackState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FallbackResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.FallbackResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FallbackResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FallbackResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.FallbackResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.FallbackResult)
    MergeFrom(*source);
  }
}

void FallbackResult::MergeFrom(const FallbackResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.FallbackResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_pkginfo()) {
    mutable_pkginfo()->::cowa::sau::PackageInfo::MergeFrom(from.pkginfo());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void FallbackResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.FallbackResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FallbackResult::CopyFrom(const FallbackResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.FallbackResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallbackResult::IsInitialized() const {
  return true;
}

void FallbackResult::Swap(FallbackResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FallbackResult::InternalSwap(FallbackResult* other) {
  reason_.Swap(&other->reason_);
  std::swap(pkginfo_, other->pkginfo_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FallbackResult::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FallbackResult

// .cowa.sau.PackageInfo pkginfo = 1;
bool FallbackResult::has_pkginfo() const {
  return this != internal_default_instance() && pkginfo_ != NULL;
}
void FallbackResult::clear_pkginfo() {
  if (GetArenaNoVirtual() == NULL && pkginfo_ != NULL) delete pkginfo_;
  pkginfo_ = NULL;
}
const ::cowa::sau::PackageInfo& FallbackResult::pkginfo() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FallbackResult.pkginfo)
  return pkginfo_ != NULL ? *pkginfo_
                         : *::cowa::sau::PackageInfo::internal_default_instance();
}
::cowa::sau::PackageInfo* FallbackResult::mutable_pkginfo() {
  
  if (pkginfo_ == NULL) {
    pkginfo_ = new ::cowa::sau::PackageInfo;
  }
  // @@protoc_insertion_point(field_mutable:cowa.sau.FallbackResult.pkginfo)
  return pkginfo_;
}
::cowa::sau::PackageInfo* FallbackResult::release_pkginfo() {
  // @@protoc_insertion_point(field_release:cowa.sau.FallbackResult.pkginfo)
  
  ::cowa::sau::PackageInfo* temp = pkginfo_;
  pkginfo_ = NULL;
  return temp;
}
void FallbackResult::set_allocated_pkginfo(::cowa::sau::PackageInfo* pkginfo) {
  delete pkginfo_;
  pkginfo_ = pkginfo;
  if (pkginfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.FallbackResult.pkginfo)
}

// .cowa.sau.FallbackState state = 2;
void FallbackResult::clear_state() {
  state_ = 0;
}
::cowa::sau::FallbackState FallbackResult::state() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FallbackResult.state)
  return static_cast< ::cowa::sau::FallbackState >(state_);
}
void FallbackResult::set_state(::cowa::sau::FallbackState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.FallbackResult.state)
}

// string reason = 3;
void FallbackResult::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FallbackResult::reason() const {
  // @@protoc_insertion_point(field_get:cowa.sau.FallbackResult.reason)
  return reason_.GetNoArena();
}
void FallbackResult::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.FallbackResult.reason)
}
#if LANG_CXX11
void FallbackResult::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.FallbackResult.reason)
}
#endif
void FallbackResult::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.FallbackResult.reason)
}
void FallbackResult::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.FallbackResult.reason)
}
::std::string* FallbackResult::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.FallbackResult.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FallbackResult::release_reason() {
  // @@protoc_insertion_point(field_release:cowa.sau.FallbackResult.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FallbackResult::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.FallbackResult.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackageUpdate::kNameFieldNumber;
const int PackageUpdate::kNewVersionFieldNumber;
const int PackageUpdate::kOldVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackageUpdate::PackageUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.PackageUpdate)
}
PackageUpdate::PackageUpdate(const PackageUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  new_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_version().size() > 0) {
    new_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_version_);
  }
  old_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_version().size() > 0) {
    old_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_version_);
  }
  // @@protoc_insertion_point(copy_constructor:cowa.sau.PackageUpdate)
}

void PackageUpdate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PackageUpdate::~PackageUpdate() {
  // @@protoc_insertion_point(destructor:cowa.sau.PackageUpdate)
  SharedDtor();
}

void PackageUpdate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackageUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUpdate::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackageUpdate& PackageUpdate::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackageUpdate* PackageUpdate::New(::google::protobuf::Arena* arena) const {
  PackageUpdate* n = new PackageUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackageUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.PackageUpdate)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PackageUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.PackageUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PackageUpdate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_version().data(), this->new_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PackageUpdate.new_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_version().data(), this->old_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.PackageUpdate.old_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.PackageUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.PackageUpdate)
  return false;
#undef DO_
}

void PackageUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.PackageUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageUpdate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string new_version = 2;
  if (this->new_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_version().data(), this->new_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageUpdate.new_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_version(), output);
  }

  // string old_version = 3;
  if (this->old_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_version().data(), this->old_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageUpdate.old_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->old_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.PackageUpdate)
}

::google::protobuf::uint8* PackageUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.PackageUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageUpdate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string new_version = 2;
  if (this->new_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_version().data(), this->new_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageUpdate.new_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_version(), target);
  }

  // string old_version = 3;
  if (this->old_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_version().data(), this->old_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.PackageUpdate.old_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->old_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.PackageUpdate)
  return target;
}

size_t PackageUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.PackageUpdate)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string new_version = 2;
  if (this->new_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_version());
  }

  // string old_version = 3;
  if (this->old_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.PackageUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PackageUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackageUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.PackageUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.PackageUpdate)
    MergeFrom(*source);
  }
}

void PackageUpdate::MergeFrom(const PackageUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.PackageUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.new_version().size() > 0) {

    new_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_version_);
  }
  if (from.old_version().size() > 0) {

    old_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_version_);
  }
}

void PackageUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.PackageUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUpdate::CopyFrom(const PackageUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.PackageUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUpdate::IsInitialized() const {
  return true;
}

void PackageUpdate::Swap(PackageUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackageUpdate::InternalSwap(PackageUpdate* other) {
  name_.Swap(&other->name_);
  new_version_.Swap(&other->new_version_);
  old_version_.Swap(&other->old_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackageUpdate::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackageUpdate

// string name = 1;
void PackageUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackageUpdate::name() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PackageUpdate.name)
  return name_.GetNoArena();
}
void PackageUpdate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PackageUpdate.name)
}
#if LANG_CXX11
void PackageUpdate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PackageUpdate.name)
}
#endif
void PackageUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PackageUpdate.name)
}
void PackageUpdate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PackageUpdate.name)
}
::std::string* PackageUpdate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PackageUpdate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackageUpdate::release_name() {
  // @@protoc_insertion_point(field_release:cowa.sau.PackageUpdate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackageUpdate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PackageUpdate.name)
}

// string new_version = 2;
void PackageUpdate::clear_new_version() {
  new_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackageUpdate::new_version() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PackageUpdate.new_version)
  return new_version_.GetNoArena();
}
void PackageUpdate::set_new_version(const ::std::string& value) {
  
  new_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PackageUpdate.new_version)
}
#if LANG_CXX11
void PackageUpdate::set_new_version(::std::string&& value) {
  
  new_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PackageUpdate.new_version)
}
#endif
void PackageUpdate::set_new_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PackageUpdate.new_version)
}
void PackageUpdate::set_new_version(const char* value, size_t size) {
  
  new_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PackageUpdate.new_version)
}
::std::string* PackageUpdate::mutable_new_version() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PackageUpdate.new_version)
  return new_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackageUpdate::release_new_version() {
  // @@protoc_insertion_point(field_release:cowa.sau.PackageUpdate.new_version)
  
  return new_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackageUpdate::set_allocated_new_version(::std::string* new_version) {
  if (new_version != NULL) {
    
  } else {
    
  }
  new_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_version);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PackageUpdate.new_version)
}

// string old_version = 3;
void PackageUpdate::clear_old_version() {
  old_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackageUpdate::old_version() const {
  // @@protoc_insertion_point(field_get:cowa.sau.PackageUpdate.old_version)
  return old_version_.GetNoArena();
}
void PackageUpdate::set_old_version(const ::std::string& value) {
  
  old_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.PackageUpdate.old_version)
}
#if LANG_CXX11
void PackageUpdate::set_old_version(::std::string&& value) {
  
  old_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.PackageUpdate.old_version)
}
#endif
void PackageUpdate::set_old_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.PackageUpdate.old_version)
}
void PackageUpdate::set_old_version(const char* value, size_t size) {
  
  old_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.PackageUpdate.old_version)
}
::std::string* PackageUpdate::mutable_old_version() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.PackageUpdate.old_version)
  return old_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackageUpdate::release_old_version() {
  // @@protoc_insertion_point(field_release:cowa.sau.PackageUpdate.old_version)
  
  return old_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackageUpdate::set_allocated_old_version(::std::string* old_version) {
  if (old_version != NULL) {
    
  } else {
    
  }
  old_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_version);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.PackageUpdate.old_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallPackages::kVersionCurFieldNumber;
const int InstallPackages::kVersionNewFieldNumber;
const int InstallPackages::kStateFieldNumber;
const int InstallPackages::kPkgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallPackages::InstallPackages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.InstallPackages)
}
InstallPackages::InstallPackages(const InstallPackages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pkgs_(from.pkgs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_cur_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version_cur().size() > 0) {
    version_cur_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_cur_);
  }
  version_new_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version_new().size() > 0) {
    version_new_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_new_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.InstallPackages)
}

void InstallPackages::SharedCtor() {
  version_cur_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_new_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _cached_size_ = 0;
}

InstallPackages::~InstallPackages() {
  // @@protoc_insertion_point(destructor:cowa.sau.InstallPackages)
  SharedDtor();
}

void InstallPackages::SharedDtor() {
  version_cur_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_new_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstallPackages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallPackages::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallPackages& InstallPackages::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstallPackages* InstallPackages::New(::google::protobuf::Arena* arena) const {
  InstallPackages* n = new InstallPackages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallPackages::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.InstallPackages)
  pkgs_.Clear();
  version_cur_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_new_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

bool InstallPackages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.InstallPackages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version_cur = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_cur()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_cur().data(), this->version_cur().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallPackages.version_cur"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version_new = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_new()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_new().data(), this->version_new().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cowa.sau.InstallPackages.version_new"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cowa.sau.InstallState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::cowa::sau::InstallState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cowa.sau.PackageUpdate pkgs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pkgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.InstallPackages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.InstallPackages)
  return false;
#undef DO_
}

void InstallPackages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.InstallPackages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_cur = 1;
  if (this->version_cur().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_cur().data(), this->version_cur().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallPackages.version_cur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version_cur(), output);
  }

  // string version_new = 2;
  if (this->version_new().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_new().data(), this->version_new().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallPackages.version_new");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version_new(), output);
  }

  // .cowa.sau.InstallState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated .cowa.sau.PackageUpdate pkgs = 4;
  for (unsigned int i = 0, n = this->pkgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pkgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.InstallPackages)
}

::google::protobuf::uint8* InstallPackages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.InstallPackages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_cur = 1;
  if (this->version_cur().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_cur().data(), this->version_cur().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallPackages.version_cur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version_cur(), target);
  }

  // string version_new = 2;
  if (this->version_new().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_new().data(), this->version_new().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cowa.sau.InstallPackages.version_new");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version_new(), target);
  }

  // .cowa.sau.InstallState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated .cowa.sau.PackageUpdate pkgs = 4;
  for (unsigned int i = 0, n = this->pkgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->pkgs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.InstallPackages)
  return target;
}

size_t InstallPackages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.InstallPackages)
  size_t total_size = 0;

  // repeated .cowa.sau.PackageUpdate pkgs = 4;
  {
    unsigned int count = this->pkgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pkgs(i));
    }
  }

  // string version_cur = 1;
  if (this->version_cur().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version_cur());
  }

  // string version_new = 2;
  if (this->version_new().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version_new());
  }

  // .cowa.sau.InstallState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallPackages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.InstallPackages)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallPackages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallPackages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.InstallPackages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.InstallPackages)
    MergeFrom(*source);
  }
}

void InstallPackages::MergeFrom(const InstallPackages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.InstallPackages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pkgs_.MergeFrom(from.pkgs_);
  if (from.version_cur().size() > 0) {

    version_cur_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_cur_);
  }
  if (from.version_new().size() > 0) {

    version_new_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_new_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void InstallPackages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.InstallPackages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallPackages::CopyFrom(const InstallPackages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.InstallPackages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallPackages::IsInitialized() const {
  return true;
}

void InstallPackages::Swap(InstallPackages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallPackages::InternalSwap(InstallPackages* other) {
  pkgs_.InternalSwap(&other->pkgs_);
  version_cur_.Swap(&other->version_cur_);
  version_new_.Swap(&other->version_new_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallPackages::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallPackages

// string version_cur = 1;
void InstallPackages::clear_version_cur() {
  version_cur_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallPackages::version_cur() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallPackages.version_cur)
  return version_cur_.GetNoArena();
}
void InstallPackages::set_version_cur(const ::std::string& value) {
  
  version_cur_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallPackages.version_cur)
}
#if LANG_CXX11
void InstallPackages::set_version_cur(::std::string&& value) {
  
  version_cur_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallPackages.version_cur)
}
#endif
void InstallPackages::set_version_cur(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_cur_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallPackages.version_cur)
}
void InstallPackages::set_version_cur(const char* value, size_t size) {
  
  version_cur_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallPackages.version_cur)
}
::std::string* InstallPackages::mutable_version_cur() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallPackages.version_cur)
  return version_cur_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallPackages::release_version_cur() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallPackages.version_cur)
  
  return version_cur_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallPackages::set_allocated_version_cur(::std::string* version_cur) {
  if (version_cur != NULL) {
    
  } else {
    
  }
  version_cur_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_cur);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallPackages.version_cur)
}

// string version_new = 2;
void InstallPackages::clear_version_new() {
  version_new_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstallPackages::version_new() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallPackages.version_new)
  return version_new_.GetNoArena();
}
void InstallPackages::set_version_new(const ::std::string& value) {
  
  version_new_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cowa.sau.InstallPackages.version_new)
}
#if LANG_CXX11
void InstallPackages::set_version_new(::std::string&& value) {
  
  version_new_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cowa.sau.InstallPackages.version_new)
}
#endif
void InstallPackages::set_version_new(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_new_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cowa.sau.InstallPackages.version_new)
}
void InstallPackages::set_version_new(const char* value, size_t size) {
  
  version_new_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cowa.sau.InstallPackages.version_new)
}
::std::string* InstallPackages::mutable_version_new() {
  
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallPackages.version_new)
  return version_new_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallPackages::release_version_new() {
  // @@protoc_insertion_point(field_release:cowa.sau.InstallPackages.version_new)
  
  return version_new_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallPackages::set_allocated_version_new(::std::string* version_new) {
  if (version_new != NULL) {
    
  } else {
    
  }
  version_new_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_new);
  // @@protoc_insertion_point(field_set_allocated:cowa.sau.InstallPackages.version_new)
}

// .cowa.sau.InstallState state = 3;
void InstallPackages::clear_state() {
  state_ = 0;
}
::cowa::sau::InstallState InstallPackages::state() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallPackages.state)
  return static_cast< ::cowa::sau::InstallState >(state_);
}
void InstallPackages::set_state(::cowa::sau::InstallState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.InstallPackages.state)
}

// repeated .cowa.sau.PackageUpdate pkgs = 4;
int InstallPackages::pkgs_size() const {
  return pkgs_.size();
}
void InstallPackages::clear_pkgs() {
  pkgs_.Clear();
}
const ::cowa::sau::PackageUpdate& InstallPackages::pkgs(int index) const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallPackages.pkgs)
  return pkgs_.Get(index);
}
::cowa::sau::PackageUpdate* InstallPackages::mutable_pkgs(int index) {
  // @@protoc_insertion_point(field_mutable:cowa.sau.InstallPackages.pkgs)
  return pkgs_.Mutable(index);
}
::cowa::sau::PackageUpdate* InstallPackages::add_pkgs() {
  // @@protoc_insertion_point(field_add:cowa.sau.InstallPackages.pkgs)
  return pkgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::cowa::sau::PackageUpdate >*
InstallPackages::mutable_pkgs() {
  // @@protoc_insertion_point(field_mutable_list:cowa.sau.InstallPackages.pkgs)
  return &pkgs_;
}
const ::google::protobuf::RepeatedPtrField< ::cowa::sau::PackageUpdate >&
InstallPackages::pkgs() const {
  // @@protoc_insertion_point(field_list:cowa.sau.InstallPackages.pkgs)
  return pkgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallNotify::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallNotify::InstallNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sau_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cowa.sau.InstallNotify)
}
InstallNotify::InstallNotify(const InstallNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_ = from.update_;
  // @@protoc_insertion_point(copy_constructor:cowa.sau.InstallNotify)
}

void InstallNotify::SharedCtor() {
  update_ = false;
  _cached_size_ = 0;
}

InstallNotify::~InstallNotify() {
  // @@protoc_insertion_point(destructor:cowa.sau.InstallNotify)
  SharedDtor();
}

void InstallNotify::SharedDtor() {
}

void InstallNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallNotify::descriptor() {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstallNotify& InstallNotify::default_instance() {
  protobuf_sau_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstallNotify* InstallNotify::New(::google::protobuf::Arena* arena) const {
  InstallNotify* n = new InstallNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:cowa.sau.InstallNotify)
  update_ = false;
}

bool InstallNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cowa.sau.InstallNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool update = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cowa.sau.InstallNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cowa.sau.InstallNotify)
  return false;
#undef DO_
}

void InstallNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cowa.sau.InstallNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update = 1;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->update(), output);
  }

  // @@protoc_insertion_point(serialize_end:cowa.sau.InstallNotify)
}

::google::protobuf::uint8* InstallNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cowa.sau.InstallNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update = 1;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->update(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cowa.sau.InstallNotify)
  return target;
}

size_t InstallNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cowa.sau.InstallNotify)
  size_t total_size = 0;

  // bool update = 1;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cowa.sau.InstallNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cowa.sau.InstallNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cowa.sau.InstallNotify)
    MergeFrom(*source);
  }
}

void InstallNotify::MergeFrom(const InstallNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cowa.sau.InstallNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update() != 0) {
    set_update(from.update());
  }
}

void InstallNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cowa.sau.InstallNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallNotify::CopyFrom(const InstallNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cowa.sau.InstallNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallNotify::IsInitialized() const {
  return true;
}

void InstallNotify::Swap(InstallNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallNotify::InternalSwap(InstallNotify* other) {
  std::swap(update_, other->update_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallNotify::GetMetadata() const {
  protobuf_sau_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sau_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallNotify

// bool update = 1;
void InstallNotify::clear_update() {
  update_ = false;
}
bool InstallNotify::update() const {
  // @@protoc_insertion_point(field_get:cowa.sau.InstallNotify.update)
  return update_;
}
void InstallNotify::set_update(bool value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:cowa.sau.InstallNotify.update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sau
}  // namespace cowa

// @@protoc_insertion_point(global_scope)
